<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;

class bkex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'bkex',
            'name' => 'BKEX',
            'countries' => array( 'BVI' ), // British Virgin Islands
            'rateLimit' => 100,
            'version' => 'v2',
            'certified' => false,
            'has' => array(
                'CORS' => null,
                'spot' => null,
                'margin' => null,
                'swap' => null,
                'future' => null,
                'option' => null,
                'addMargin' => null,
                'cancelAllOrders' => null,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'createDepositAddress' => null,
                'createLimitOrder' => null,
                'createMarketOrder' => null,
                'createOrder' => true,
                'editOrder' => null,
                'fetchAccounts' => null,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,
                'fetchBorrowRate' => null,
                'fetchBorrowRateHistory' => null,
                'fetchBorrowRates' => null,
                'fetchBorrowRatesPerSymbol' => null,
                'fetchCanceledOrders' => null,
                'fetchClosedOrder' => null,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposit' => false,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => null,
                'fetchDepositAddressesByNetwork' => null,
                'fetchDeposits' => true,
                'fetchFundingHistory' => null,
                'fetchFundingRate' => null,
                'fetchFundingRateHistory' => null,
                'fetchFundingRates' => null,
                'fetchIndexOHLCV' => null,
                'fetchL2OrderBook' => null,
                'fetchLedger' => null,
                'fetchLedgerEntry' => null,
                'fetchLeverageTiers' => null,
                'fetchMarketLeverageTiers' => null,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => null,
                'fetchMyTrades' => null,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => null,
                'fetchOrders' => null,
                'fetchOrderTrades' => null,
                'fetchPosition' => null,
                'fetchPositions' => null,
                'fetchPositionsRisk' => null,
                'fetchPremiumIndexOHLCV' => null,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTradingLimits' => null,
                'fetchTransactionFee' => null,
                'fetchTransactionFees' => null,
                'fetchTransactions' => null,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => true,
                'loadMarkets' => true,
                'privateAPI' => true,
                'publicAPI' => true,
                'reduceMargin' => null,
                'setLeverage' => null,
                'setMarginMode' => null,
                'setPositionMode' => null,
                'signIn' => null,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/158043180-bb079a65-69e8-45a2-b393-f094d334e610.jpg',
                'api' => array(
                    'public' => 'https://api.bkex.com',
                    'private' => 'https://api.bkex.com',
                ),
                'www' => 'https://www.bkex.com/',
                'doc' => array(
                    'https://bkexapi.github.io/docs/api_en.htm',
                ),
                'fees' => array(
                    'https://www.bkex.com/help/instruction/33',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        '/common/symbols' => 1,
                        '/common/currencys' => 1,
                        '/common/timestamp' => 1,
                        '/q/kline' => 1,
                        '/q/tickers' => 1,
                        '/q/ticker/price' => 1,
                        '/q/depth' => 1,
                        '/q/deals' => 1,
                        // contracts:
                        '/contract/common/brokerInfo' => 1,
                        '/contract/q/index' => 1,
                        '/contract/q/depth' => 1,
                        '/contract/q/depthMerged' => 1,
                        '/contract/q/trades' => 1,
                        '/contract/q/kline' => 1,
                        '/contract/q/ticker24hr' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        '/u/api/info' => 1,
                        '/u/account/balance' => 1,
                        '/u/wallet/address' => 1,
                        '/u/wallet/depositRecord' => 1,
                        '/u/wallet/withdrawRecord' => 1,
                        '/u/order/openOrders' => 1,
                        '/u/order/openOrder/detail' => 1,
                        '/u/order/historyOrders' => 1,
                        // contracts:
                        '/contract/trade/getOrder' => 1,
                        '/contract/trade/openOrders' => 1,
                        '/contract/trade/historyOrders' => 1,
                        '/contract/trade/myTrades' => 1,
                        '/contract/trade/positions' => 1,
                        '/contract/u/account' => 1,
                    ),
                    'post' => array(
                        '/u/account/transfer' => 1,
                        '/u/wallet/withdraw' => 1,
                        '/u/order/create' => 1,
                        '/u/order/cancel' => 1,
                        '/u/order/batchCreate' => 1,
                        '/u/order/batchCancel' => 1,
                        // contracts:
                        '/contract/trade/order' => 1,
                        '/contract/trade/orderCancel' => 1,
                        '/contract/trade/modifyMargin' => 1,
                        '/contract/ws/dataStream/create' => 1,
                        '/contract/ws/dataStream/update' => 1,
                        '/contract/ws/dataStream/delete' => 1,
                    ),
                    'delete' => array(
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0015'),
                    'taker' => $this->parse_number('0.002'),
                ),
            ),
            'options' => array(
                'timeframes' => array(
                    'spot' => array(
                    ),
                    'contract' => array(
                    ),
                ),
                'defaultType' => 'spot', // spot, swap
                'networks' => array(
                    'TRX' => 'TRC-20',
                    'TRC20' => 'TRC-20',
                    'ETH' => 'ERC-20',
                    'ERC20' => 'ERC-20',
                    'BEP20' => 'BEP-20(BSC)',
                ),
            ),
            'commonCurrencies' => array(
            ),
            'exceptions' => array(
                'exact' => array(
                    '1005' => '\\ccxt\\InsufficientFunds',
                ),
                'broad' => array(
                    'Not Enough balance' => '\\ccxt\\InsufficientFunds',
                    'Order does not exist' => '\\ccxt\\InvalidOrder',
                    'System busy, please try again later' => '\\ccxt\\BadRequest', // in my tests, this was thrown mostly when request was bad, not the problem of exchange. It is easily reproduced in 'cancelOrders'
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves $data on all markets for bkex
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing $market $data
         */
        $response = $this->publicGetCommonSymbols ($params);
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //         array(
        //             "minimumOrderSize" => "0",
        //             "minimumTradeVolume" => "0E-18",
        //             "pricePrecision" => "11",
        //             "supportTrade" => true,
        //             "symbol" => "COMT_USDT",
        //             "volumePrecision" => 0
        //         ),
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $market = $data[$i];
            $id = $this->safe_string($market, 'symbol');
            list($baseId, $quoteId) = explode('_', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'future' => false,
                'swap' => false,
                'option' => false,
                'active' => $this->safe_value($market, 'supportTrade'),
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_integer($market, 'volumePrecision'),
                    'price' => $this->safe_integer($market, 'pricePrecision'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'minimumOrderSize'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'minimumTradeVolume'),
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} an associative dictionary of currencies
         */
        $response = $this->publicGetCommonCurrencys ($params);
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //        array(
        //           "currency" => "ETH",
        //           "maxWithdrawOneDay" => "100.000000000000000000",
        //           "maxWithdrawSingle" => "50.000000000000000000",
        //           "minWithdrawSingle" => "0.005000000000000000",
        //           "supportDeposit" => true,
        //           "supportTrade" => true,
        //           "supportWithdraw" => true,
        //           "withdrawFee" => 0.01
        //        ),
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $currency = $data[$i];
            $id = $this->safe_string($currency, 'currency');
            $code = $this->safe_currency_code($id);
            $name = $this->safe_string($currency, 'name');
            $withdrawEnabled = $this->safe_value($currency, 'supportWithdraw');
            $depositEnabled = $this->safe_value($currency, 'supportDeposit');
            $tradeEnabled = $this->safe_value($currency, 'supportTrade');
            $active = $withdrawEnabled && $depositEnabled && $tradeEnabled;
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'deposit' => $depositEnabled,
                'withdraw' => $withdrawEnabled,
                'active' => $active,
                'fee' => $this->safe_number($currency, 'withdrawFee'),
                'precision' => null,
                'limits' => array(
                    'amount' => array( 'min' => null, 'max' => null ),
                    'price' => array( 'min' => null, 'max' => null ),
                    'cost' => array( 'min' => null, 'max' => null ),
                    'withdraw' => array( 'min' => $this->safe_number($currency, 'minWithdrawSingle'), 'max' => $this->safe_number($currency, 'maxWithdrawSingle') ),
                ),
                'info' => $currency,
            );
        }
        return $result;
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->publicGetCommonTimestamp ($params);
        //
        // {
        //     "code" => '0',
        //     "data" => 1573542445411,
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        return $this->safe_integer($response, 'data');
    }

    public function fetch_status($params = array ()) {
        /**
         * the latest known information on the availability of the exchange API
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#exchange-status-structure status structure}
         */
        $response = $this->publicGetCommonTimestamp ($params);
        //
        //     {
        //         "code" => '0',
        //         "data" => 1573542445411,
        //         "msg" => "success",
        //         "status" => 0
        //     }
        //
        $statusRaw = $this->safe_integer($response, 'status');
        $codeRaw = $this->safe_integer($response, 'code');
        $updated = $this->safe_integer($response, 'data');
        return array(
            'status' => ($statusRaw === 0 && $codeRaw === 0) ? 'ok' : $statusRaw,
            'updated' => $updated,
            'eta' => null,
            'url' => null,
            'info' => $response,
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($limit !== null) {
            $request['size'] = $limit;
        }
        // their docs says that 'from/to' arguments are mandatory, however that's not true in reality
        if ($since !== null) {
            $request['from'] = $since;
            // when 'since' [from] argument is set, then exchange also requires 'to' value to be set. So we have to set 'to' argument depending 'limit' amount (if $limit was not provided, then exchange-default 500).
            if ($limit === null) {
                $limit = 500;
            }
            $duration = $this->parse_timeframe($timeframe);
            $timerange = $limit * $duration * 1000;
            $request['to'] = $this->sum($request['from'], $timerange);
        }
        $response = $this->publicGetQKline ($request);
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       array(
        //          "close" => "43414.68",
        //          "high" => "43446.47",
        //          "low" => "43403.05",
        //          "open" => "43406.05",
        //          "quoteVolume" => "61500.40099",
        //          "symbol" => "BTC_USDT",
        //          "ts" => "1646152440000",
        //          "volume" => 1.41627
        //       ),
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        return array(
            $this->safe_integer($ohlcv, 'ts'),
            $this->safe_float($ohlcv, 'open'),
            $this->safe_float($ohlcv, 'high'),
            $this->safe_float($ohlcv, 'low'),
            $this->safe_float($ohlcv, 'close'),
            $this->safe_float($ohlcv, 'volume'),
        );
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {str} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetQTickers (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       {
        //         "change" => "6.52",
        //         "close" => "43573.470000",
        //         "high" => "44940.540000",
        //         "low" => "40799.840000",
        //         "open" => "40905.780000",
        //         "quoteVolume" => "225621691.5991",
        //         "symbol" => "BTC_USDT",
        //         "ts" => "1646156490781",
        //         "volume" => 5210.349
        //       }
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $tickers = $this->safe_value($response, 'data');
        $ticker = $this->safe_value($tickers, 0);
        return $this->parse_ticker($ticker, $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price $tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market $tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structures}
         */
        $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            if (gettype($symbols) === 'array' && count(array_filter(array_keys($symbols), 'is_string')) != 0) {
                throw new BadRequest($this->id . ' fetchTickers () $symbols argument should be an array');
            }
        }
        if ($symbols !== null) {
            $marketIds = $this->market_ids($symbols);
            $request['symbol'] = implode(',', $marketIds);
        }
        $response = $this->publicGetQTickers (array_merge($request, $params));
        $tickers = $this->safe_value($response, 'data');
        return $this->parse_tickers($tickers, $symbols, $params);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //    {
        //          "change":-0.46,
        //          "close":29664.46,
        //          "high":30784.99,
        //          "low":29455.36,
        //          "open":29803.38,
        //          "quoteVolume":714653752.6991,
        //          "symbol":"BTC_USDT",
        //          "ts":1652812048118,
        //          "volume":23684.9416
        //    }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer($ticker, 'ts');
        $last = $this->safe_string($ticker, 'close');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_string($ticker, 'change'), // 24h percentage change (close - open) / open * 100
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'volume'),
            'quoteVolume' => $this->safe_string($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @param {str} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['depth'] = min ($limit, 50);
        }
        $response = $this->publicGetQDepth (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       "ask" => [
        //         ["43820.07","0.86947"],
        //         ["43820.25","0.07503"],
        //       ],
        //       "bid" => [
        //         ["43815.94","0.43743"],
        //         ["43815.72","0.08901"],
        //       ],
        //       "symbol" => "BTC_USDT",
        //       "timestamp" => 1646161595841
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_order_book($data, $symbol, null, 'bid', 'ask');
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['size'] = min ($limit, 50);
        }
        $response = $this->publicGetQDeals (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       array(
        //         "direction" => "S",
        //         "price" => "43930.63",
        //         "symbol" => "BTC_USDT",
        //         "ts" => "1646224171992",
        //         "volume" => 0.030653
        //       ), // first item is most recent
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $trades = $this->safe_value($response, 'data');
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        $timestamp = $this->safe_integer($trade, 'ts');
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $side = $this->parse_trade_side($this->safe_string($trade, 'direction'));
        $amount = $this->safe_number($trade, 'volume');
        $price = $this->safe_number($trade, 'price');
        $type = null;
        $takerOrMaker = 'taker';
        $id = $this->safe_string($trade, 'tid');
        if ($id === null) {
            $id = $this->synthetic_trade_id($market, $timestamp, $side, $amount, $price, $type, $takerOrMaker);
        }
        return $this->safe_trade(array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'order' => null,
            'type' => $type,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => null,
            'fee' => null,
            'info' => $trade,
        ), $market);
    }

    public function parse_trade_side($side) {
        $sides = array(
            'B' => 'buy',
            'S' => 'sell',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function synthetic_trade_id($market = null, $timestamp = null, $side = null, $amount = null, $price = null, $orderType = null, $takerOrMaker = null) {
        // TODO => can be unified method? this approach is being used by multiple exchanges (mexc, woo-coinsbit, dydx, ...)
        $id = '';
        if ($timestamp !== null) {
            $id = $this->number_to_string($timestamp) . '-' . $this->safe_string($market, 'id', '_');
            if ($side !== null) {
                $id .= '-' . $side;
            }
            if ($orderType !== null) {
                $id .= '-' . $orderType;
            }
            if ($takerOrMaker !== null) {
                $id .= '-' . $takerOrMaker;
            }
            if ($amount !== null) {
                $id .= '-' . $this->number_to_string($amount);
            }
            if ($price !== null) {
                $id .= '-' . $this->number_to_string($price);
            }
        }
        return $id;
    }

    public function fetch_balance($params = array ()) {
        /**
         * $query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the bkex api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $query = $this->omit($params, 'type');
        $response = $this->privateGetUAccountBalance ($query);
        //
        // {
        //     "code" => "0",
        //     "data" => {
        //       "WALLET" => array(
        //         array(
        //           "available" => "0.221212121000000000",
        //           "currency" => "PHX",
        //           "frozen" => "0E-18",
        //           "total" => 0.221212121
        //         ),
        //         array(
        //           "available" => "44.959577229600000000",
        //           "currency" => "USDT",
        //           "frozen" => "0E-18",
        //           "total" => 44.9595772296
        //         }
        //       )
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $balances = $this->safe_value($response, 'data');
        $wallets = $this->safe_value($balances, 'WALLET', array());
        $result = array( 'info' => $wallets );
        for ($i = 0; $i < count($wallets); $i++) {
            $wallet = $wallets[$i];
            $currencyId = $wallet['currency'];
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_number($wallet, 'available');
            $account['used'] = $this->safe_number($wallet, 'frozen');
            $account['total'] = $this->safe_number($wallet, 'total');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privateGetUWalletAddress (array_merge($request, $params));
        // NOTE => You can only retrieve addresses of already generated wallets - so should already have generated that COIN deposit address in UI. Otherwise, it seems from API you can't create/obtain addresses for those coins.
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       {
        //         "currency" => "BTC",
        //         "address" => "1m4k2yUKTSrX6SM9FGgvwMyxQbYtRVi2N",
        //         "memo" => ""
        //       }
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_deposit_address($data, $currency);
    }

    public function parse_deposit_address($data, $currency = null) {
        $depositObject = $this->safe_value($data, 0);
        $address = $this->safe_string($depositObject, 'address');
        $tag = $this->safe_string($depositObject, 'memo');
        $currencyId = $this->safe_string($depositObject, 'currency');
        $currency = $this->safe_currency($currencyId, $currency);
        return array(
            'currency' => $currency['code'],
            'address' => $address,
            'tag' => $tag,
            'network' => null,
            'info' => $data,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits() requires $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
            $endTime = $this->milliseconds();
            $request['endTime'] = $endTime;
        }
        if ($limit !== null) {
            $request['Size'] = $limit; // Todo => id api-docs, 'size' is incorrectly required to be in Uppercase
        }
        $response = $this->privateGetUWalletDepositRecord (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => {
        //       "data" => array(
        //         array(
        //           "createTime" => "1622274255000",
        //           "currency" => "BNB",
        //           "fromAddress" => "bnb10af52w77pkehgxhnwgeca50q2t2354q4xexa5y",
        //           "hash" => "97B982F497782C2777C0F6AD16CEAAC65A93A364B684A23A71CFBB8C010DEEA6",
        //           "id" => "2021052923441510234383337",
        //           "status" => "0",
        //           "toAddress" => "bnb13w64gkc42c0l45m2p5me4qn35z0a3ej9ldks3j_82784659",
        //           "volume" => 0.073
        //         }
        //       ),
        //       "total" => 1
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        $dataInner = $this->safe_value($data, 'data', array());
        for ($i = 0; $i < count($dataInner); $i++) {
            $dataInner[$i]['transactType'] = 'deposit';
        }
        return $this->parse_transactions($dataInner, $currency, $since, $limit, $params);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchWithdrawals() requires $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
            $endTime = $this->milliseconds();
            $request['endTime'] = $endTime;
        }
        if ($limit !== null) {
            $request['Size'] = $limit; // Todo => id api-docs, 'size' is incorrectly required to be in Uppercase
        }
        $response = $this->privateGetUWalletWithdrawRecord (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => {
        //       "data" => array(
        //         array(
        //           ...
        //         }
        //       ),
        //       "total" => 1
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        $dataInner = $this->safe_value($data, 'data', array());
        for ($i = 0; $i < count($dataInner); $i++) {
            $dataInner[$i]['transactType'] = 'withdrawal';
        }
        return $this->parse_transactions($dataInner, $currency, $since, $limit, $params);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        // {
        //   "createTime" => "1622274255000",
        //   "currency" => "BNB",
        //   "fromAddress" => "bnb10af52w77pkehgxhnwgeca50q2t2354q4xexa5y",
        //   "hash" => "97B982F497782C2777C0F6AD16CEAAC65A93A364B684A23A71CFBB8C010DEEA6",
        //   "id" => "2021052923441510234383337",
        //   "status" => "0",
        //   "toAddress" => "bnb13w64gkc42c0l45m2p5me4qn35z0a3ej9ldks3j_82784659",
        //   "volume" => 0.073
        // }
        //
        $id = $this->safe_string($transaction, 'id');
        $amount = $this->safe_number($transaction, 'volume');
        $addressTo = $this->safe_value($transaction, 'toAddress', array());
        $addressFrom = $this->safe_string($transaction, 'fromAddress');
        $txid = $this->safe_string($transaction, 'hash');
        $type = $this->safe_string($transaction, 'transactType');
        $timestamp = $this->safe_integer($transaction, 'createTime');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        return array(
            'id' => $id,
            'currency' => $code,
            'amount' => $amount,
            'network' => null,
            'address' => $addressTo,
            'addressTo' => $addressTo,
            'addressFrom' => $addressFrom,
            'tag' => null,
            'tagTo' => null,
            'tagFrom' => null,
            'status' => $status,
            'type' => $type,
            'updated' => null,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => array(
                'currency' => $code,
                'cost' => null,
            ),
            'info' => $transaction,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            '-1' => 'failed',
            '0' => 'ok',
            '3' => 'pending',
            '5' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $direction = ($side === 'buy') ? 'BID' : 'ASK';
        $request = array(
            'symbol' => $market['id'],
            'type' => strtoupper($type),
            'volume' => $this->amount_to_precision($symbol, $amount),
            'direction' => $direction,
        );
        if (($type !== 'market') && ($price !== null)) {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostUOrderCreate (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => "2022030302410146630023187",
        //     "msg" => "Create Order Successfully",
        //     "status" => 0
        // }
        //
        return $this->parse_order($response, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        $request = array(
            'orderId' => $id,
        );
        $response = $this->privatePostUOrderCancel (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => "2022030303032700030025325",
        //     "status" => 0
        // }
        //
        return $this->parse_order($response, $market);
    }

    public function cancel_orders($ids, $symbol = null, $params = array ()) {
        if (gettype($ids) === 'array' && count(array_filter(array_keys($ids), 'is_string')) != 0) {
            throw new ArgumentsRequired($this->id . ' cancelOrders() $ids argument should be an array');
        }
        $this->load_markets();
        $request = array(
            'orders' => $this->json($ids),
        );
        $response = $this->privatePostUOrderBatchCancel (array_merge($request, $params));
        // {
        //     "code" => 0,
        //     "msg" => "success",
        //     "data" => {
        //        "success" => 2,
        //        "fail" => 0,
        //        "results" => ["2019062312313131231"," 2019063123131312313"]
        //     }
        // }
        $data = $this->safe_value($response, 'data');
        $results = $this->safe_value($data, 'results');
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        return $this->parse_orders($results, $market, null, null, $params);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['size'] = $limit; // Todo => id api-docs, 'size' is incorrectly required to be in Uppercase
        }
        $response = $this->privateGetUOrderOpenOrders (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => {
        //       "data" => array(
        //         array(
        //           "createdTime" => "1646248301418",
        //           "dealVolume" => "0E-18",
        //           "direction" => "BID",
        //           "frozenVolumeByOrder" => "2.421300000000000000",
        //           "id" => "2022030303114141830007699",
        //           "price" => "0.150000000000000000",
        //           "source" => "WALLET",
        //           "status" => "0",
        //           "symbol" => "BKK_USDT",
        //           "totalVolume" => "16.142000000000000000",
        //           "type" => "LIMIT"
        //         }
        //       ),
        //       "pageRequest" => array(
        //         "asc" => false,
        //         "orderBy" => "id",
        //         "page" => "1",
        //         "size" => 10
        //       ),
        //       "total" => 1
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $result = $this->safe_value($response, 'data');
        $innerData = $this->safe_value($result, 'data');
        return $this->parse_orders($innerData, $market, $since, $limit, $params);
    }

    public function fetch_open_order($id, $symbol = null, $params = array ()) {
        $request = array(
            'orderId' => $id,
        );
        $response = $this->privateGetUOrderOpenOrderDetail (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       "createdTime" => "1646248301418",
        //       "dealAvgPrice" => "0",
        //       "dealVolume" => "0E-18",
        //       "direction" => "BID",
        //       "frozenVolumeByOrder" => "2.421300000000000000",
        //       "id" => "2022030303114141830002452",
        //       "price" => "0.150000000000000000",
        //       "source" => "WALLET",
        //       "status" => "0",
        //       "symbol" => "BKK_USDT",
        //       "totalVolume" => "16.142000000000000000",
        //       "type" => "LIMIT",
        //       "updateTime" => 1646248301418
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $data = $this->safe_value($response, 'data');
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        return $this->parse_order($data, $market);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['size'] = $limit; // Todo => id api-docs, 'size' is incorrectly required to be in Uppercase
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privateGetUOrderHistoryOrders (array_merge($request, $params));
        //
        // {
        //     "code" => "0",
        //     "data" => array(
        //       "data" => array(
        //         array(
        //           "createdTime" => "1646247807000",
        //           "dealAvgPrice" => "0",
        //           "dealVolume" => "0",
        //           "direction" => "BID",
        //           "frozenVolumeByOrder" => "1.65",
        //           "id" => "2022030303032700030025943",
        //           "price" => "0.15",
        //           "source" => "WALLET",
        //           "status" => "2",
        //           "symbol" => "BKK_USDT",
        //           "totalVolume" => "11",
        //           "type" => "LIMIT",
        //           "updateTime" => 1646247852558
        //         ),
        //       ),
        //       "pageRequest" => array(
        //         "asc" => false,
        //         "orderBy" => "id",
        //         "page" => "1",
        //         "size" => 10
        //       ),
        //       "total" => 6
        //     ),
        //     "msg" => "success",
        //     "status" => 0
        // }
        //
        $result = $this->safe_value($response, 'data');
        $innerData = $this->safe_value($result, 'data');
        return $this->parse_orders($innerData, $market, $since, $limit, $params);
    }

    public function parse_order($order, $market = null) {
        //
        // fetchOpenOrders
        //
        //  {
        //       "createdTime" => "1646248301418",
        //       "dealVolume" => "0E-18",
        //       "direction" => "BID",
        //       "frozenVolumeByOrder" => "2.421300000000000000",
        //       "id" => "2022030303114141830007699",
        //       "price" => "0.150000000000000000",
        //       "source" => "WALLET",
        //       "status" => "0",
        //       "symbol" => "BKK_USDT",
        //       "totalVolume" => "16.142000000000000000",
        //       "type" => "LIMIT"
        //       "stopPrice" =>  "0.14",            // present only for 'stop' $order types
        //       "operator" =>  ">="                // present only for 'stop' $order types
        //       "dealAvgPrice" => "0",             // only present in 'fetchOrder' & 'fetchClosedOrders'
        //       "updateTime" => 1646248301418      // only present in 'fetchOrder' & 'fetchClosedOrders'
        //  }
        //
        $timestamp = $this->safe_integer($order, 'createdTime');
        $updateTime = $this->safe_integer($order, 'updateTime');
        $filled = $this->safe_string($order, 'dealVolume');
        $side = $this->parse_order_side($this->safe_string($order, 'direction'));
        $id = $this->safe_string_2($order, 'id', 'data');
        $price = $this->safe_string($order, 'price');
        $rawStatus = $this->safe_string($order, 'status');
        $rawType = $this->safe_string($order, 'type');
        $type = $this->parse_order_type($rawType);
        $postOnly = false;
        if ($rawType === 'LIMIT_MAKER') {
            $postOnly = true;
        }
        $status = null;
        if ($timestamp !== null) {
            // cancelOrder handling
            $status = $this->parse_order_status($rawStatus);
        }
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $amount = $this->safe_string($order, 'totalVolume');
        $stopPrice = $this->safe_number($order, 'stopPrice');
        $average = $this->safe_string($order, 'dealAvgPrice');
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $updateTime,
            'status' => $status,
            'symbol' => $market['symbol'],
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'cost' => null,
            'trades' => null,
            'fee' => null,
            'info' => $order,
        ), $market);
    }

    public function parse_order_side($side) {
        $sides = array(
            'BID' => 'buy',
            'ASK' => 'sell',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function parse_order_status($status) {
        $statuses = array(
            '0' => 'open',
            '1' => 'closed',
            '2' => 'canceled',
            '3' => 'open',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type($status) {
        $statuses = array(
            'MARKET' => 'market',
            'LIMIT' => 'limit',
            'LIMIT_MAKER' => 'limit',
            'STOP_LIMIT' => 'limit',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $this->version . $this->implode_params($path, $params);
        $params = $this->omit($params, $this->extract_params($path));
        $paramsSortedEncoded = '';
        if ($params) {
            $paramsSortedEncoded = $this->rawencode($this->keysort($params));
            if ($method === 'GET') {
                $url .= '?' . $paramsSortedEncoded;
            }
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $signature = $this->hmac($this->encode($paramsSortedEncoded), $this->encode($this->secret), 'sha256');
            $headers = array(
                'Cache-Control' => 'no-cache',
                'Content-type' => 'application/x-www-form-urlencoded',
                'X_ACCESS_KEY' => $this->apiKey,
                'X_SIGNATURE' => $signature,
            );
            if ($method !== 'GET') {
                $body = $paramsSortedEncoded;
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        //
        // success
        //
        //   {
        //      "code" => "0",
        //      "msg" => "success",
        //      "status" => 0,
        //      "data" => [...],
        //   }
        //
        //
        // action error
        //
        //   {
        //     "code":1005,
        //     "msg":"BKK:Not Enough balance",
        //     "status":0
        //   }
        //
        //
        // HTTP error
        //
        //   {
        //      "timestamp" => "1646041085490",
        //      "status" => "403",
        //      "error" => "Forbidden",
        //      "message" => "签名错误",
        //      "path" => "/whatever/incorrect/path"
        //   }
        //
        $message = $this->safe_value($response, 'msg');
        if ($message === 'success') {
            return;
        }
        $responseCode = $this->safe_string($response, 'code');
        if ($responseCode !== '0') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $responseCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
            throw new ExchangeError($feedback);
        }
    }
}
