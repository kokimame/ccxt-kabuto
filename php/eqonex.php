<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;

class eqonex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'eqonex',
            'name' => 'EQONEX',
            'countries' => array( 'US', 'SG' ), // United States, Singapore
            'rateLimit' => 10,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => null, // has but not fully implemented
                'future' => null, // has but not fully implemented
                'option' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchCanceledOrders' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchTicker' => null,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTradingLimits' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => 1,
                '5m' => 2,
                '15m' => 3,
                '1h' => 4,
                '6h' => 5,
                '1d' => 6,
                '7d' => 7,
                '1w' => 7,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/122649755-1a076c80-d138-11eb-8f2e-9a9166a03d79.jpg',
                'test' => array(
                    'public' => 'https://testnet.eqonex.com/api',
                    'private' => 'https://testnet.eqonex.com/api',
                ),
                'api' => array(
                    'public' => 'https://eqonex.com/api',
                    'private' => 'https://eqonex.com/api',
                ),
                'www' => 'https://eqonex.com',
                'doc' => array(
                    'https://developer.eqonex.com',
                ),
                'referral' => 'https://eqonex.com?referredByCode=zpa8kij4ouvBFup3',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'health',
                        'getInstruments',
                        'getInstrumentPairs',
                        'getOrderBook',
                        'getRisk',
                        'getTradeHistory',
                        'getFundingRateHistory',
                        'getChart',
                        'getExchangeInfo', // not documented
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'logon',
                        'order',
                        'cancelOrder',
                        'cancelReplaceOrder',
                        'getOrder',
                        'getOrders',
                        'getOrderStatus',
                        'getOrderHistory',
                        'userTrades',
                        'getPositions',
                        'cancelAll',
                        'getUserHistory',
                        'getRisk',
                        'getDepositAddresses',
                        'getDepositHistory', // not documented
                        'getWithdrawRequests',
                        'sendWithdrawRequest',
                        'getTransferHistory',
                    ),
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'uid' => true,
            ),
            'exceptions' => array(
                'broad' => array(
                    'symbol not found' => '\\ccxt\\BadSymbol',
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all $markets for eqonex
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing $market data
         */
        $request = array(
            'verbose' => true,
        );
        $response = $this->publicGetGetInstrumentPairs (array_merge($request, $params));
        //
        //    {
        //        "instrumentPairs" => [
        //            {
        //                "instrumentId":303,
        //                "symbol":"BTC/USDC[220325]",
        //                "quoteId":1,
        //                "baseId":3,
        //                "price_scale":2,
        //                "quantity_scale":6,
        //                "securityStatus":1,
        //                "securityDesc":"BTC Dated Future",
        //                "assetType":"DATED_FUTURE",
        //                "currency":"BTC",
        //                "contAmtCurr":"USDC",
        //                "settlCurrency":"USDC",
        //                "commCurrency":"USDC",
        //                "cfiCode":"FFCPSX",
        //                "securityExchange":"EQOS",
        //                "micCode":"EQOD",
        //                "instrumentPricePrecision":2,
        //                "minPriceIncrement":1.0,
        //                "minPriceIncrementAmount":1.0,
        //                "roundLot":100,
        //                "minTradeVol":0.000100,
        //                "maxTradeVol":0.000000,
        //                "qtyType":0,
        //                "contractMultiplier":1.0,
        //                "auctionStartTime":0,
        //                "auctionDuration":0,
        //                "auctionFrequency":0,
        //                "auctionPrice":0,
        //                "auctionVolume":0,
        //                "marketStatus":"OPEN",
        //                "underlyingSymbol":"BTC/USDC",
        //                "underlyingSecurityId":52,
        //                "underlyingSecuritySource":"M",
        //                "underlyingSecurityExchange":"EQOC",
        //                "issueDate":1643256000000,
        //                "maturityDate":"2022-03-25",
        //                "maturityTime":"2022-03-25T08:00:00Z",
        //                "contractExpireTime":1648195200000
        //            }
        //            ...
        //        ]
        //    }
        //
        $instrumentPairs = $this->safe_value($response, 'instrumentPairs', array());
        $markets = array();
        for ($i = 0; $i < count($instrumentPairs); $i++) {
            $market = $this->parse_market($instrumentPairs[$i]);
            $markets[] = $market;
        }
        return $markets;
    }

    public function parse_market($market) {
        //
        //    {
        //        "instrumentPairs" => [
        //            {
        //                "instrumentId":303,
        //                "symbol":"BTC/USDC[220325]",
        //                "quoteId":1,
        //                "baseId":3,
        //                "price_scale":2,
        //                "quantity_scale":6,
        //                "securityStatus":1,
        //                "securityDesc":"BTC Dated Future",
        //                "assetType":"DATED_FUTURE",
        //                "currency":"BTC",
        //                "contAmtCurr":"USDC",
        //                "settlCurrency":"USDC",
        //                "commCurrency":"USDC",
        //                "cfiCode":"FFCPSX",
        //                "securityExchange":"EQOS",
        //                "micCode":"EQOD",
        //                "instrumentPricePrecision":2,
        //                "minPriceIncrement":1.0,
        //                "minPriceIncrementAmount":1.0,
        //                "roundLot":100,
        //                "minTradeVol":0.000100,
        //                "maxTradeVol":0.000000,
        //                "qtyType":0,
        //                "contractMultiplier":1.0,
        //                "auctionStartTime":0,
        //                "auctionDuration":0,
        //                "auctionFrequency":0,
        //                "auctionPrice":0,
        //                "auctionVolume":0,
        //                "marketStatus":"OPEN",
        //                "underlyingSymbol":"BTC/USDC",
        //                "underlyingSecurityId":52,
        //                "underlyingSecuritySource":"M",
        //                "underlyingSecurityExchange":"EQOC",
        //                "issueDate":1643256000000,
        //                "maturityDate":"2022-03-25",
        //                "maturityTime":"2022-03-25T08:00:00Z",
        //                "contractExpireTime":1648195200000
        //            }
        //            ...
        //        ]
        //    }
        //
        $assetType = $this->safe_string($market, 'assetType');
        $spot = ($assetType === 'PAIR');
        $swap = ($assetType === 'PERPETUAL_SWAP');
        $future = ($assetType === 'DATED_FUTURE');
        $contract = $swap || $future;
        $id = $this->safe_string($market, 'instrumentId');
        $baseId = $this->safe_string($market, 'currency');
        $quoteId = $this->safe_string($market, 'contAmtCurr');
        $settleId = $contract ? $this->safe_string($market, 'settlCurrency') : null;
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settle = $this->safe_currency_code($settleId);
        $symbol = $base . '/' . $quote;
        $uppercaseId = $this->safe_string($market, 'symbol');
        $type = 'spot';
        $linear = null;
        $inverse = null;
        $expiry = $this->safe_number($market, 'contractExpireTime');
        if ($contract) {
            $symbol = $symbol . ':' . $settle;
            $linear = ($quote === $settle);
            $inverse = !$linear;
            if ($swap) {
                $type = 'swap';
            } elseif ($future) {
                $symbol = $symbol . '-' . $this->yymmdd($expiry);
                $type = 'future';
            } else {
                $symbol = $uppercaseId;
                $type = $assetType;
            }
        }
        $status = $this->safe_integer($market, 'securityStatus');
        return array(
            'id' => $id,
            'uppercaseId' => $uppercaseId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $settleId,
            'type' => $type,
            'spot' => $spot,
            'margin' => false,
            'swap' => $swap,
            'future' => $future,
            'option' => false,
            'active' => ($status === 1),
            'contract' => $contract,
            'linear' => $linear,
            'inverse' => $inverse,
            'contractSize' => $this->safe_number($market, 'contractMultiplier'),
            'expiry' => $expiry,
            'expiryDatetime' => $this->iso8601($expiry),
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->safe_integer($market, 'quantity_scale'),
                'price' => $this->safe_integer($market, 'price_scale'),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'minTradeVol'),
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'info' => $market,
        );
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available $currencies on an exchange
         * @param {dict} $params extra parameters specific to the eqonex api endpoint
         * @return {dict} an associative dictionary of $currencies
         */
        $response = $this->publicGetGetInstruments ($params);
        //
        //     {
        //         "instruments" => array(
        //             array(
        //                 3,     // id
        //                 "BTC", // symbol
        //                 2,     // price_scale
        //                 6,     // amount_scale
        //                 1,     // status
        //                 0,     // withdraw_fee
        //                 "BTC", // name
        //                 true,  // withdrawal_pct
        //             ),
        //         )
        //     }
        //
        $currencies = array();
        $instruments = $this->safe_value($response, 'instruments', array());
        for ($i = 0; $i < count($instruments); $i++) {
            $currency = $this->parse_currency($instruments[$i]);
            $code = $currency['code'];
            $currencies[$code] = $currency;
        }
        return $currencies;
    }

    public function parse_currency($currency) {
        //
        //     array(
        //         3,     // 0 $id
        //         "BTC", // 1 symbol
        //         2,     // 2 price_scale
        //         6,     // 3 amount_scale
        //         1,     // 4 $status
        //         0,     // 5 withdraw_fee
        //         "BTC", // 6 $name
        //         true,  // 7 withdrawal_pct
        //     ),
        //
        $id = $this->safe_string($currency, 0);
        $uppercaseId = $this->safe_string($currency, 1);
        $code = $this->safe_currency_code($uppercaseId);
        $priceScale = $this->safe_integer($currency, 2);
        $amountScale = $this->safe_integer($currency, 3);
        $precision = max ($priceScale, $amountScale);
        $name = $this->safe_string($currency, 6);
        $status = $this->safe_integer($currency, 4);
        $active = ($status === 1);
        $fee = $this->safe_number($currency, 5); // withdraw_fee
        return array(
            'id' => $id,
            'info' => $currency,
            'uppercaseId' => $uppercaseId,
            'code' => $code,
            'name' => $name,
            'precision' => $precision,
            'fee' => $fee,
            'active' => $active,
            'deposit' => null,
            'withdraw' => null,
            'limits' => array(
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'withdraw' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the eqonex api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pairId' => intval($market['id']),
            'timespan' => $this->timeframes[$timeframe],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetGetChart (array_merge($request, $params));
        //
        //     {
        //         "pairId":57,
        //         "t":1,
        //         "s":"ETH/BTC",
        //         "lastPx":44099,
        //         "lastQty":100000,
        //         "o":0.043831000000000016,
        //         "h":0.04427100000000002,
        //         "l":0.032000000000000015,
        //         "c":0.04409900000000002,
        //         "v":0.21267333000000016,
        //         "q":4.850000000000001,
        //         "chart":[
        //             [1612519260000,44099,44099,44099,44099,0,441],
        //             [1612519200000,44099,44099,44099,44099,0,440],
        //             [1612519140000,44269,44271,44269,44271,0,439],
        //         ]
        //     }
        //
        $chart = $this->safe_value($response, 'chart', array());
        return $this->parse_ohlcvs($chart, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         1612519260000, // $timestamp
        //         44099,         // $open
        //         44099,         // $high
        //         44099,         // $low
        //         44099,         // $close
        //         0,             // base $volume
        //         441,           // seqNumber
        //     )
        //
        $timestamp = $this->safe_integer($ohlcv, 0);
        $open = $this->parse_number($this->convert_from_scale($this->safe_string($ohlcv, 1), $market['precision']['price']));
        $high = $this->parse_number($this->convert_from_scale($this->safe_string($ohlcv, 2), $market['precision']['price']));
        $low = $this->parse_number($this->convert_from_scale($this->safe_string($ohlcv, 3), $market['precision']['price']));
        $close = $this->parse_number($this->convert_from_scale($this->safe_string($ohlcv, 4), $market['precision']['price']));
        $volume = $this->parse_number($this->convert_from_scale($this->safe_string($ohlcv, 5), $market['precision']['amount']));
        return array( $timestamp, $open, $high, $low, $close, $volume );
    }

    public function parse_bid_ask($bidask, $priceKey = 0, $amountKey = 1, $market = null) {
        if ($market === null) {
            throw new ArgumentsRequired($this->id . ' parseBidAsk() requires a $market argument');
        }
        $priceString = $this->safe_string($bidask, $priceKey);
        $amountString = $this->safe_string($bidask, $amountKey);
        return [
            $this->parse_number($this->convert_from_scale($priceString, $market['precision']['price'])),
            $this->parse_number($this->convert_from_scale($amountString, $market['precision']['amount'])),
        ];
    }

    public function parse_order_book($orderbook, $symbol, $timestamp = null, $bidsKey = 'bids', $asksKey = 'asks', $priceKey = 0, $amountKey = 1, $market = null) {
        $result = array(
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'nonce' => null,
        );
        $sides = array( $bidsKey, $asksKey );
        for ($i = 0; $i < count($sides); $i++) {
            $side = $sides[$i];
            $orders = array();
            $bidasks = $this->safe_value($orderbook, $side);
            for ($k = 0; $k < count($bidasks); $k++) {
                $orders[] = $this->parse_bid_ask($bidasks[$k], $priceKey, $amountKey, $market);
            }
            $result[$side] = $orders;
        }
        $result[$bidsKey] = $this->sort_by($result[$bidsKey], 0, true);
        $result[$asksKey] = $this->sort_by($result[$asksKey], 0);
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the eqonex api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pairId' => intval($market['id']),
        );
        $response = $this->publicGetGetOrderBook (array_merge($request, $params));
        //
        //     {
        //         "bids":[
        //             [4000480,30000,1612644984667],
        //             [3999304,200000,1612644984667],
        //             [3998862,50000,1612644984667],
        //         ],
        //         "asks":[
        //             [4001962,1790000,1612644984667],
        //             [4002616,1000,1612644984667],
        //             [4003889,1000,1612644984667],
        //         ],
        //         "usdMark":40011.02,
        //         "marketStatus":0,
        //         "estFundingRate":0.0,
        //         "fundingRateTime":0,
        //         "auctionPrice":0.0,
        //         "auctionVolume":0.0
        //     }
        //
        return $this->parse_order_book($response, $symbol, null, 'bids', 'asks', 0, 1, $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {dict} $params extra parameters specific to the eqonex api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pairId' => intval($market['id']),
        );
        $response = $this->publicGetGetTradeHistory (array_merge($request, $params));
        //
        //     {
        //         "trades":[
        //             [4022800,47000,"20210206-21:39:12.886",256323,1],
        //             [4023066,1000,"20210206-21:38:55.030",256322,1],
        //             [4022406,50000,"20210206-21:36:56.334",256321,1],
        //         ]
        //     }
        //
        $trades = $this->safe_value($response, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit, $params);
    }

    public function parse_trade($trade, $market = null) {
        //
        // public fetchTrades
        //
        //     array(
        //         4022800,                 // 0 price
        //         47000,                   // 1 quantity
        //         "20210206-21:39:12.886", // 2 $timestamp
        //         256323,                  // 3 sequence number
        //         1                        // 4 taker $side 1 = buy, 2 = sell
        //     )
        //
        // private fetchMyTrades
        //
        //     {
        //         "account":3583,
        //         "commission":"-0.015805",
        //         "commCurrency":"USDC",
        //         "execId":265757,
        //         "ordType":"2",
        //         "ordStatus":"2",
        //         "execType":"F",
        //         "aggressorIndicator":true,
        //         "orderId":388953019,
        //         "price":"1842.04",
        //         "qty":"0.010000",
        //         "lastPx":"1756.22",
        //         "avgPx":"1756.22",
        //         "cumQty":"0.010000",
        //         "quoteQty":"0.010000",
        //         "side":"BUY",
        //         "symbol":"ETH/USDC",
        //         "clOrdId":"1613106766970339107",
        //         "submitterId":3583,
        //         "targetStrategy":"0",
        //         "time":1613106766971,
        //         "date":"20210212-05:12:46.971"
        //     }
        //
        $id = null;
        $timestamp = null;
        $orderId = null;
        $type = null;
        $side = null;
        $priceString = null;
        $amountString = null;
        $fee = null;
        $marketId = null;
        if (gettype($trade) === 'array' && count(array_filter(array_keys($trade), 'is_string')) == 0) {
            $id = $this->safe_string($trade, 3);
            $priceString = $this->convert_from_scale($this->safe_string($trade, 0), $market['precision']['price']);
            $amountString = $this->convert_from_scale($this->safe_string($trade, 1), $market['precision']['amount']);
            $timestamp = $this->to_milliseconds($this->safe_string($trade, 2));
            $takerSide = $this->safe_integer($trade, 4);
            if ($takerSide === 1) {
                $side = 'buy';
            } elseif ($takerSide === 2) {
                $side = 'sell';
            }
        } else {
            $id = $this->safe_string($trade, 'execId');
            $timestamp = $this->safe_integer($trade, 'time');
            $marketId = $this->safe_string($trade, 'symbol');
            $orderId = $this->safe_string($trade, 'orderId');
            $side = $this->safe_string_lower($trade, 'side');
            $type = $this->parse_order_type($this->safe_string($trade, 'ordType'));
            $priceString = $this->safe_string($trade, 'lastPx');
            $amountString = $this->safe_string($trade, 'qty');
            $feeCostString = $this->safe_string($trade, 'commission');
            if ($feeCostString !== null) {
                $feeCostString = Precise::string_neg($feeCostString);
                $feeCurrencyId = $this->safe_string($trade, 'commCurrency');
                $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
                $fee = array(
                    'cost' => $feeCostString,
                    'currency' => $feeCurrencyCode,
                );
            }
        }
        $market = $this->safe_market($marketId, $market);
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'order' => $orderId,
            'type' => $type,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function parse_balance($response) {
        $positions = $this->safe_value($response, 'positions', array());
        $result = array(
            'info' => $response,
        );
        for ($i = 0; $i < count($positions); $i++) {
            $position = $positions[$i];
            $assetType = $this->safe_string($position, 'assetType');
            if ($assetType === 'ASSET') {
                $currencyId = $this->safe_string($position, 'symbol');
                $code = $this->safe_currency_code($currencyId);
                $quantityString = $this->safe_string($position, 'quantity');
                $availableQuantityString = $this->safe_string($position, 'availableQuantity');
                $scale = $this->safe_integer($position, 'quantity_scale');
                $account = $this->account();
                $account['free'] = $this->convert_from_scale($availableQuantityString, $scale);
                $account['total'] = $this->convert_from_scale($quantityString, $scale);
                $result[$code] = $account;
            }
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the eqonex api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->privatePostGetPositions ($params);
        //     {
        //         "positions":array(
        //             array(
        //                 "instrumentId":1,
        //                 "userId":3583,
        //                 "quantity":0,
        //                 "availableQuantity":0,
        //                 "quantity_scale":6,
        //                 "symbol":"USDC",
        //                 "assetType":"ASSET",
        //                 "usdCostBasis":0.0,
        //                 "usdAvgCostBasis":0.0,
        //                 "usdValue":0.0,
        //                 "usdUnrealized":0.0,
        //                 "usdRealized":0.0,
        //                 "baseUsdMark":1.0,
        //                 "settleCoinUsdMark":0.0,
        //                 "settleCoinUnrealized":0.0,
        //                 "settleCoinRealized":0.0
        //             ),
        //         )
        //     }
        return $this->parse_balance($response);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $orderSide = ($side === 'buy') ? 1 : 2;
        $quantityScale = $this->get_scale($amount);
        $request = array(
            // 'id' => 0,
            // 'account' => 0, // required for institutional users
            'instrumentId' => intval($market['id']),
            'symbol' => $market['uppercaseId'],
            // 'clOrdId' => '',
            'side' => $orderSide, // 1 = buy, 2 = sell
            // 'ordType' => 1, // 1 = $market, 2 = limit, 3 = stop $market, 4 = stop limit
            // 'price' => $this->price_to_precision($symbol, $price), // required for limit and stop limit orders
            // 'price_scale' => $this->get_scale($price),
            'quantity' => $this->convert_to_scale($this->number_to_string($amount), $quantityScale),
            'quantity_scale' => $quantityScale,
            // 'stopPx' => $this->price_to_precision($symbol, stopPx),
            // 'stopPx_scale' => $this->get_scale(stopPx),
            // 'targetStrategy' => 0,
            // 'isHidden' => false,
            // 'timeInForce' => 1, // 1 = Good Till Cancel (GTC), 3 = Immediate or Cancel (IOC), 4 = Fill or Kill (FOK), 5 = Good Till Crossing (GTX), 6 = Good Till Date (GTD)
            // 'interval' => 0,
            // 'intervalCount' => 0,
            // 'intervalDelay' => 0,
            // 'price2' => 0,
            // 'price2_scale' => $this->get_scale(price2),
            // 'blockWaitAck' => 0, // 1 = wait for order acknowledgement, when set, $response will include the matching engine "orderId" field
        );
        if ($type === 'market') {
            $request['ordType'] = 1;
        } elseif ($type === 'limit') {
            $request['ordType'] = 2;
            $priceScale = $this->get_scale($price);
            $request['price'] = $this->convert_to_scale($this->number_to_string($price), $priceScale);
            $request['priceScale'] = $priceScale;
        } else {
            $stopPrice = $this->safe_number_2($params, 'stopPrice', 'stopPx');
            $params = $this->omit($params, array( 'stopPrice', 'stopPx' ));
            if ($stopPrice === null) {
                if ($type === 'stop') {
                    if ($price === null) {
                        throw new ArgumentsRequired($this->id . ' createOrder() requires a $price argument or a $stopPrice parameter or a stopPx parameter for ' . $type . ' orders');
                    }
                    $request['ordType'] = 3;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($price), $this->get_scale($price));
                } elseif ($type === 'stop limit') {
                    throw new ArgumentsRequired($this->id . ' createOrder() requires a $stopPrice parameter or a stopPx parameter for ' . $type . ' orders');
                }
            } else {
                if ($type === 'stop') {
                    $request['ordType'] = 3;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($stopPrice), $this->get_scale($stopPrice));
                } elseif ($type === 'stop limit') {
                    $request['ordType'] = 4;
                    $priceScale = $this->get_scale($price);
                    $stopPriceScale = $this->get_scale($stopPrice);
                    $request['price_scale'] = $priceScale;
                    $request['stopPx_scale'] = $stopPriceScale;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($stopPrice), $stopPriceScale);
                    $request['price'] = $this->convert_to_scale($this->number_to_string($price), $priceScale);
                }
            }
        }
        $response = $this->privatePostOrder (array_merge($request, $params));
        //
        //     {
        //         "status":"sent",
        //         "id":385617863,
        //         "instrumentId":53,
        //         "clOrdId":"1613037510849637345",
        //         "userId":3583,
        //         "price":2000,
        //         "quantity":200,
        //         "ordType":2
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'origOrderId' => intval($id),
            'instrumentId' => intval($market['id']),
        );
        $response = $this->privatePostCancelOrder (array_merge($request, $params));
        //
        //     {
        //         "status":"sent",
        //         "id":0,
        //         "origOrderId":385613629,
        //         "instrumentId":53,
        //         "userId":3583,
        //         "price":0,
        //         "quantity":0,
        //         "ordType":0
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $orderSide = ($side === 'buy') ? 1 : 2;
        $quantityScale = $this->get_scale($amount);
        $request = array(
            // 'id' => 0,
            'origOrderId' => $id,
            // 'account' => 0, // required for institutional users
            'instrumentId' => intval($market['id']),
            'symbol' => $market['uppercaseId'],
            // 'clOrdId' => '',
            'side' => $orderSide, // 1 = buy, 2 = sell
            // 'ordType' => 1, // 1 = $market, 2 = limit, 3 = stop $market, 4 = stop limit
            // 'price' => $this->price_to_precision($symbol, $price), // required for limit and stop limit orders
            // 'price_scale' => $this->get_scale($price),
            'quantity' => $this->convert_to_scale($this->number_to_string($amount), $quantityScale),
            'quantity_scale' => $quantityScale,
            // 'stopPx' => $this->price_to_precision($symbol, stopPx),
            // 'stopPx_scale' => $this->get_scale(stopPx),
            // 'timeInForce' => 1, // 1 = Good Till Cancel (GTC), 3 = Immediate or Cancel (IOC), 4 = Fill or Kill (FOK), 5 = Good Till Crossing (GTX), 6 = Good Till Date (GTD)
        );
        if ($type === 'market') {
            $request['ordType'] = 1;
        } elseif ($type === 'limit') {
            $request['ordType'] = 2;
            $request['price'] = $this->convert_to_scale($this->number_to_string($price), $this->get_scale($price));
        } else {
            $stopPrice = $this->safe_number_2($params, 'stopPrice', 'stopPx');
            $params = $this->omit($params, array( 'stopPrice', 'stopPx' ));
            if ($stopPrice === null) {
                if ($type === 'stop') {
                    if ($price === null) {
                        throw new ArgumentsRequired($this->id . ' editOrder() requires a $price argument or a $stopPrice parameter or a stopPx parameter for ' . $type . ' orders');
                    }
                    $request['ordType'] = 3;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($price), $this->get_scale($price));
                } elseif ($type === 'stop limit') {
                    throw new ArgumentsRequired($this->id . ' editOrder() requires a $stopPrice parameter or a stopPx parameter for ' . $type . ' orders');
                }
            } else {
                if ($type === 'stop') {
                    $request['ordType'] = 3;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($stopPrice), $this->get_scale($stopPrice));
                } elseif ($type === 'stop limit') {
                    $request['ordType'] = 4;
                    $priceScale = $this->get_scale($price);
                    $stopPriceScale = $this->get_scale($stopPrice);
                    $request['price_scale'] = $priceScale;
                    $request['stopPx_scale'] = $stopPriceScale;
                    $request['stopPx'] = $this->convert_to_scale($this->number_to_string($stopPrice), $stopPriceScale);
                    $request['price'] = $this->convert_to_scale($this->number_to_string($price), $priceScale);
                }
            }
        }
        $response = $this->privatePostOrder (array_merge($request, $params));
        //
        //     {
        //         "status":"sent",
        //         "id":385617863,
        //         "instrumentId":53,
        //         "clOrdId":"1613037510849637345",
        //         "userId":3583,
        //         "price":2000,
        //         "quantity":200,
        //         "ordType":2
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'orderId' => intval($id),
        );
        $response = $this->privatePostGetOrderStatus (array_merge($request, $params));
        //
        //     {
        //         "orderId":388953019,
        //         "clOrdId":"1613106766970339107",
        //         "symbol":"ETH/USDC",
        //         "instrumentId":53,
        //         "side":"1",
        //         "userId":3583,
        //         "account":3583,
        //         "execType":"F",
        //         "ordType":"2",
        //         "ordStatus":"2",
        //         "timeInForce":"3",
        //         "timeStamp":"20210212-05:12:46.971",
        //         "execId":265757,
        //         "targetStrategy":0,
        //         "isHidden":false,
        //         "isReduceOnly":false,
        //         "isLiquidation":false,
        //         "fee":0,
        //         "fee_scale":6,
        //         "feeInstrumentId":1,
        //         "price":184204,
        //         "price_scale":2,
        //         "quantity":10000,
        //         "quantity_scale":6,
        //         "leavesQty":0,
        //         "leavesQty_scale":6,
        //         "cumQty":10000,
        //         "cumQty_scale":6,
        //         "lastPx":175622,
        //         "lastPx_scale":2,
        //         "avgPx":175622,
        //         "avgPx_scale":2,
        //         "lastQty":10000,
        //         "lastQty_scale":6
        //     }
        //
        return $this->parse_order($response);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            'ordStatus' => '2', // '0' = New, '1' = Partially filled, '2' = Filled, '4' = Cancelled, '8' = Rejected, 'C' = Expired
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_canceled_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            'ordStatus' => '4', // '0' = New, '1' = Partially filled, '2' = Filled, '4' = Cancelled, '8' = Rejected, 'C' = Expired
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array(
            // 'account' => id, // for institutional users
            // 'symbol' => marketSymbol, // cannot be used with instrumentId
            // 'instrumentId' => $market['numericId'],
            // 'limit' => $limit,
            // 'execType' => execType, // '0' = New, '4' = Canceled, '5' = Replace, '8' = Rejected, 'C' = Expired, 'F' = Fill Status, 'I' = Order Status
            // 'ordStatus' => ordStatus, // '0' = New, '1' = Partially filled, '2' = Filled, '4' = Cancelled, '8' = Rejected, 'C' = Expired
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instrumentId'] = intval($market['id']);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privatePostGetOrders (array_merge($request, $params));
        //
        //     {
        //         "isInitialSnap":false,
        //         "orders":array(
        //             {
        //                 "orderId":385613629,
        //                 "orderUpdateSeq":1,
        //                 "clOrdId":"1613037448945798198",
        //                 "symbol":"ETH/USDC",
        //                 "instrumentId":53,
        //                 "side":"1",
        //                 "userId":3583,
        //                 "account":3583,
        //                 "execType":"4",
        //                 "ordType":"2",
        //                 "ordStatus":"C",
        //                 "timeInForce":"3",
        //                 "timeStamp":"20210211-09:57:28.944",
        //                 "execId":0,
        //                 "targetStrategy":0,
        //                 "isHidden":false,
        //                 "isReduceOnly":false,
        //                 "isLiquidation":false,
        //                 "fee":0,
        //                 "feeTotal":0,
        //                 "fee_scale":0,
        //                 "feeInstrumentId":0,
        //                 "price":999,
        //                 "price_scale":2,
        //                 "quantity":10000000,
        //                 "quantity_scale":6,
        //                 "leavesQty":10000000,
        //                 "leavesQty_scale":6,
        //                 "cumQty":0,
        //                 "cumQty_scale":0,
        //                 "lastPx":0,
        //                 "lastPx_scale":2,
        //                 "avgPx":0,
        //                 "avgPx_scale":0,
        //                 "lastQty":0,
        //                 "lastQty_scale":6
        //             }
        //         )
        //     }
        //
        $orders = $this->safe_value($response, 'orders', array());
        return $this->parse_orders($orders, $market, $since, $limit, $params);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'account' => 123, // for institutional users
            // 'instrumentId' => $market['id'],
            // 'startTime' => $since,
            // 'endTime' => $this->milliseconds(),
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instrumentId'] = $market['id'];
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privatePostUserTrades (array_merge($request, $params));
        //
        //     {
        //         "trades":array(
        //             {
        //                 "account":3583,
        //                 "commission":"-0.015805",
        //                 "commCurrency":"USDC",
        //                 "execId":265757,
        //                 "ordType":"2",
        //                 "ordStatus":"2",
        //                 "execType":"F",
        //                 "aggressorIndicator":true,
        //                 "orderId":388953019,
        //                 "price":"1842.04",
        //                 "qty":"0.010000",
        //                 "lastPx":"1756.22",
        //                 "avgPx":"1756.22",
        //                 "cumQty":"0.010000",
        //                 "quoteQty":"0.010000",
        //                 "side":"BUY",
        //                 "symbol":"ETH/USDC",
        //                 "clOrdId":"1613106766970339107",
        //                 "submitterId":3583,
        //                 "targetStrategy":"0",
        //                 "time":1613106766971,
        //                 "date":"20210212-05:12:46.971"
        //             }
        //         )
        //     }
        //
        $trades = $this->safe_value($response, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit, $params);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'instrumentId' => intval($currency['id']),
        );
        $response = $this->privatePostGetDepositAddresses (array_merge($request, $params));
        //
        //     {
        //         "addresses":array(
        //             array("instrumentId":1,"userId":3583,"symbol":"USDC","address":"0xdff47af071ea3c537e57278290516cda32a78b97","status":1)
        //         )
        //     }
        //
        $addresses = $this->safe_value($response, 'addresses', array());
        $address = $this->safe_value($addresses, 0);
        return $this->parse_deposit_address($address, $currency);
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        //
        //     {
        //         "instrumentId":1,
        //         "userId":3583,
        //         "symbol":"USDC",
        //         "address":"0xdff47af071ea3c537e57278290516cda32a78b97",
        //         "status":1
        //     }
        //
        $currencyId = $this->safe_string($depositAddress, 'symbol');
        $code = $this->safe_currency_code($currencyId, $currency);
        $address = $this->safe_string($depositAddress, 'address');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => null,
            'network' => null,
            'info' => $depositAddress,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['instrumentId'] = intval($currency['id']);
        }
        $response = $this->privatePostGetDepositHistory (array_merge($request, $params));
        //
        //     {
        //         "deposits":array(
        //             {
        //                 "id":4309,
        //                 "instrumentId":1,
        //                 "userId":3583,
        //                 "symbol":"USDC",
        //                 "address":"null",
        //                 "timestamp":"1613021112189",
        //                 "status":1,
        //                 "balance":0.0,
        //                 "balance_change":100.0,
        //                 "confirms":1,
        //                 "transactionId":"caba4500-489f-424e-abd7-b4dabc09a800"
        //             }
        //         )
        //     }
        //
        $deposits = $this->safe_value($response, 'deposits', array());
        return $this->parse_transactions($deposits, $currency, $since, $limit, array( 'type' => 'deposit' ));
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['instrumentId'] = intval($currency['id']);
        }
        $response = $this->privatePostGetWithdrawRequests (array_merge($request, $params));
        //
        //     {
        //         "addresses":array(
        //             {
        //                 "id":3841,
        //                 "instrumentId":3,
        //                 "userId":4245,
        //                 "symbol":"BTC",
        //                 "address":"XXXXXYYYYYZZZZZ",
        //                 "timestamp":"20200806-11:04:35.053",
        //                 "status":0,
        //                 "balance":1,
        //                 "balance_scale":3,
        //                 "confirms":0,
        //                 "transactionId":"null"
        //             }
        //         )
        //     }
        //
        $withdrawals = $this->safe_value($response, 'addresses', array());
        return $this->parse_transactions($withdrawals, $currency, $since, $limit, array( 'type' => 'withdrawal' ));
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits, fetchWithdrawals
        //
        //     {
        //         "id":4309,
        //         "instrumentId":1,
        //         "userId":3583,
        //         "symbol":"USDC",
        //         "address":"null",
        //         "timestamp":"1613021112189",
        //         "status":1,
        //         "balance":0.0,
        //         "balance_change":100.0,
        //         "confirms":1,
        //         "transactionId":"caba4500-489f-424e-abd7-b4dabc09a800"
        //     }
        //
        // withdraw
        //
        //     {
        //         "instrumentId" => 1,
        //         "userId" => 23750,
        //         "symbol" => "USDC",
        //         "timestamp" => "20200201-05:37:16.584",
        //         "status" => 1,
        //         "userUuid" => "b9e33713-c28f-468f-99bd-f6deab0dd854",
        //         "currencyCode" => "USDC",
        //         "address" => "2MvW97yT6E2Kq8bWc1aj1DqfbgMzjRNk2LE",
        //         "quantity" => 20,
        //         "requestUuid" => "56782b34-8a78-4f5f-b164-4b8f7d583b7f",
        //         "transactionUuid" => "1004eb0f-41e1-41e9-9d48-8eefcc6c09f2",
        //         "transactionId" => "WS23436",
        //         "destinationWalletAlias" => "Test",
        //         "quantity_scale" => 0
        //     }
        //
        $id = $this->safe_string($transaction, 'id', 'transactionId');
        $txid = $this->safe_string($transaction, 'transactionUuid');
        $timestamp = $this->safe_integer($transaction, 'timestamp');
        $address = $this->safe_string($transaction, 'address');
        if ($address === 'null') {
            $address = null;
        }
        $type = $this->safe_string($transaction, 'type');
        $amount = $this->safe_number($transaction, 'balance_change');
        if ($amount === null) {
            $amount = $this->safe_string($transaction, 'quantity');
            $amountScale = $this->safe_integer($transaction, 'quantity_scale');
            $amount = $this->parse_number($this->convert_from_scale($amount, $amountScale));
        }
        $currencyId = $this->safe_string($transaction, 'symbol');
        $code = $this->safe_currency_code($currencyId, $currency);
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'addressFrom' => null,
            'address' => $address,
            'addressTo' => null,
            'tagFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => null,
            'comment' => null,
            'fee' => null,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            '0' => 'pending',
            '1' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $scale = $this->get_scale($amount);
        $quantity = $this->convert_to_scale($amount, $scale);
        $request = array(
            'instrumentId' => intval($currency['id']),
            'symbol' => $currency['uppercaseId'],
            'quantity' => $quantity,
            'quantity_scale' => $scale,
            'address' => $address,
        );
        $response = $this->privatePostSendWithdrawRequest (array_merge($request, $params));
        //
        //     {
        //         "instrumentId" => 1,
        //         "userId" => 23750,
        //         "symbol" => "USDC",
        //         "timestamp" => "20200201-05:37:16.584",
        //         "status" => 1,
        //         "userUuid" => "b9e33713-c28f-468f-99bd-f6deab0dd854",
        //         "currencyCode" => "USDC",
        //         "address" => "2MvW97yT6E2Kq8bWc1aj1DqfbgMzjRNk2LE",
        //         "quantity" => 20,
        //         "requestUuid" => "56782b34-8a78-4f5f-b164-4b8f7d583b7f",
        //         "transactionUuid" => "1004eb0f-41e1-41e9-9d48-8eefcc6c09f2",
        //         "transactionId" => "WS23436",
        //         "destinationWalletAlias" => "Test",
        //         "quantity_scale" => 0
        //     }
        //
        return $this->parse_transaction($response, $currency);
    }

    public function fetch_trading_fees($params = array ()) {
        $this->load_markets();
        $response = $this->publicGetGetExchangeInfo ($params);
        //
        //     {
        //         tradingLimits => array(),
        //         withdrawLimits => [array( All => '0.0', Type => 'percent' )],
        //         futuresFees => array(
        //             array( tier => '0', maker => '0.000300', taker => '0.000500' ),
        //             array( tier => '1', maker => '0.000200', taker => '0.000400' ),
        //             array( tier => '2', maker => '0.000180', taker => '0.000400' ),
        //         ),
        //         $spotFees => array(
        //             array( tier => '0', maker => '0.000900', taker => '0.001500', $volume => '0' ),
        //             array( tier => '1', maker => '0.000600', taker => '0.001250', $volume => '200000' ),
        //             array( tier => '2', maker => '0.000540', taker => '0.001200', $volume => '2500000' ),
        //         ),
        //         referrals => array( earning => '0.30', discount => '0.05', duration => '180' )
        //     }
        //
        $spotFees = $this->safe_value($response, 'spotFees', array());
        $firstSpotFee = $this->safe_value($spotFees, 0, array());
        $spotMakerFee = $this->safe_number($firstSpotFee, 'maker');
        $spotTakerFee = $this->safe_number($firstSpotFee, 'taker');
        $futureFees = $this->safe_value($response, 'futuresFees', array());
        $firstFutureFee = $this->safe_value($futureFees, 0, array());
        $futureMakerFee = $this->safe_number($firstFutureFee, 'maker');
        $futureTakerFee = $this->safe_number($firstFutureFee, 'taker');
        $spotTakerTiers = array();
        $spotMakerTiers = array();
        $result = array();
        for ($i = 0; $i < count($spotFees); $i++) {
            $spotFee = $spotFees[$i];
            $volume = $this->safe_number($spotFee, 'volume');
            $spotTakerTiers[] = array( $volume, $this->safe_number($spotFee, 'taker') );
            $spotMakerTiers[] = array( $volume, $this->safe_number($spotFee, 'maker') );
        }
        $spotTiers = array(
            'taker' => $spotTakerTiers,
            'maker' => $spotMakerTiers,
        );
        $futureTakerTiers = array();
        $futureMakerTiers = array();
        for ($i = 0; $i < count($futureFees); $i++) {
            $futureFee = $futureFees[$i];
            $futureTakerTiers[] = array( null, $this->safe_number($futureFee, 'taker') );
            $futureMakerTiers[] = array( null, $this->safe_number($futureFee, 'maker') );
        }
        $futureTiers = array(
            'taker' => $futureTakerTiers,
            'maker' => $futureMakerTiers,
        );
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $market = $this->market($symbol);
            $fee = array(
                'info' => $response,
                'symbol' => $symbol,
                'percentage' => true,
                'tierBased' => true,
            );
            if ($this->safe_value($market, 'spot')) {
                $fee['maker'] = $spotMakerFee;
                $fee['taker'] = $spotTakerFee;
                $fee['tiers'] = $spotTiers;
            } elseif ($this->safe_value($market, 'contract')) {
                $fee['maker'] = $futureMakerFee;
                $fee['taker'] = $futureTakerFee;
                $fee['tiers'] = $futureTiers;
            }
            $result[$symbol] = $fee;
        }
        return $result;
    }

    public function fetch_trading_limits($symbols = null, $params = array ()) {
        $this->load_markets();
        // getExchangeInfo
        $response = $this->publicGetGetExchangeInfo ($params);
        $tradingLimits = $this->safe_value($response, 'tradingLimits', array());
        // To-do parsing $response when available
        return array(
            'info' => $tradingLimits,
            'limits' => array(
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
        );
    }

    public function fetch_funding_limits($params = array ()) {
        // getExchangeInfo
        $response = $this->publicGetGetExchangeInfo ($params);
        $withdrawLimits = $this->safe_value($response, 'withdrawLimits', array());
        // TO-DO parse $response when available
        return array(
            'info' => $withdrawLimits,
            'withdraw' => null,
        );
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder, editOrder, cancelOrder
        //
        //     {
        //         "status":"sent",
        //         "id":385617863,
        //         "instrumentId":53,
        //         "clOrdId":"1613037510849637345",
        //         "userId":3583,
        //         "price":2000,
        //         "quantity":200,
        //         "ordType":2
        //     }
        //
        // fetchOrders, fetchOrder
        //
        //     {
        //         "orderId":385613629,
        //         "orderUpdateSeq":1,
        //         "clOrdId":"1613037448945798198",
        //         "symbol":"ETH/USDC",
        //         "instrumentId":53,
        //         "side":"1",
        //         "userId":3583,
        //         "account":3583,
        //         "execType":"4",
        //         "ordType":"2",
        //         "ordStatus":"C",
        //         "timeInForce":"3",
        //         "timeStamp":"20210211-09:57:28.944",
        //         "execId":0,
        //         "targetStrategy":0,
        //         "isHidden":false,
        //         "isReduceOnly":false,
        //         "isLiquidation":false,
        //         "fee":0,
        //         "feeTotal":0,
        //         "fee_scale":0,
        //         "feeInstrumentId":0,
        //         "price":999,
        //         "price_scale":2,
        //         "quantity":10000000,
        //         "quantity_scale":6,
        //         "leavesQty":10000000,
        //         "leavesQty_scale":6,
        //         "cumQty":0,
        //         "cumQty_scale":0,
        //         "lastPx":0,
        //         "lastPx_scale":2,
        //         "avgPx":0,
        //         "avgPx_scale":0,
        //         "lastQty":0,
        //         "lastQty_scale":6
        //     }
        //
        $id = $this->safe_string_2($order, 'orderId', 'id');
        $id = $this->safe_string($order, 'origOrderId', $id);
        $clientOrderId = $this->safe_string($order, 'clOrdId');
        $type = $this->parse_order_type($this->safe_string($order, 'ordType'));
        $side = $this->parse_order_side($this->safe_string($order, 'side'));
        $status = $this->parse_order_status($this->safe_string($order, 'ordStatus'));
        $marketId = $this->safe_string($order, 'instrumentId');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->to_milliseconds($this->safe_string($order, 'timeStamp'));
        $lastTradeTimestamp = null;
        $priceString = $this->safe_string($order, 'price');
        $priceScale = $this->safe_integer($order, 'price_scale');
        $priceString = $this->convert_from_scale($priceString, $priceScale);
        $amountString = $this->safe_string($order, 'quantity');
        $amountScale = $this->safe_integer($order, 'quantity_scale');
        $amountString = $this->convert_from_scale($amountString, $amountScale);
        $filledString = $this->safe_string($order, 'cumQty');
        $filledScale = $this->safe_integer($order, 'cumQty_scale');
        $filledString = $this->convert_from_scale($filledString, $filledScale);
        $remainingString = $this->safe_string($order, 'leavesQty');
        $remainingScale = $this->safe_integer($order, 'leavesQty_scale');
        $remainingString = $this->convert_from_scale($remainingString, $remainingScale);
        $fee = null;
        $currencyId = $this->safe_integer($order, 'feeInstrumentId');
        $feeCurrencyCode = $this->safe_currency_code($currencyId);
        $feeCostString = null;
        $feeCost = $this->safe_string($order, 'feeTotal');
        $feeScale = $this->safe_integer($order, 'fee_scale');
        if ($feeCost !== null) {
            $feeCost = Precise::string_neg($feeCost);
            $feeCostString = $this->convert_from_scale($feeCost, $feeScale);
        }
        if ($feeCost !== null) {
            $fee = array(
                'currency' => $feeCurrencyCode,
                'cost' => $feeCostString,
                'rate' => null,
            );
        }
        $timeInForce = $this->parse_time_in_force($this->safe_string($order, 'timeInForce'));
        if ($timeInForce === '0') {
            $timeInForce = null;
        }
        $stopPriceScale = $this->safe_integer($order, 'stopPx_scale', 0);
        $stopPrice = $this->parse_number($this->convert_from_scale($this->safe_string($order, 'stopPx'), $stopPriceScale));
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => null,
            'side' => $side,
            'price' => $priceString,
            'stopPrice' => $stopPrice,
            'amount' => $amountString,
            'cost' => null,
            'average' => null,
            'filled' => $filledString,
            'remaining' => $remainingString,
            'status' => $status,
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            '0' => 'open',
            '1' => 'open', // 'partially filled',
            '2' => 'closed', // 'filled',
            '3' => 'open', // 'done for day',
            '4' => 'canceled',
            '5' => 'canceled', // 'replaced',
            '6' => 'canceling', // 'pending cancel',
            '7' => 'canceled', // 'stopped',
            '8' => 'rejected', // 'rejected',
            '9' => 'canceled', // 'suspended',
            'A' => 'open', // 'pending new',
            'B' => 'open', // 'calculated',
            'C' => 'expired',
            'D' => 'open', // 'accepted for bidding',
            'E' => 'canceling', // 'pending replace',
            'F' => 'open', // 'partial fill or fill',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_side($side) {
        $sides = array(
            '1' => 'buy',
            '2' => 'sell',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function parse_order_type($type) {
        $types = array(
            '1' => 'market',
            '2' => 'limit',
            '3' => 'stop',
            '4' => 'stop limit',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_time_in_force($timeInForce) {
        $timeInForces = array(
            '1' => 'GTC', // Good Till Canceled
            '3' => 'IOC', // Immediate or Cancel
            '4' => 'FOK', // Fill or Kill
            '5' => 'GTX', // Good Till Crossing (GTX)
            '6' => 'GTD', // Good Till Date
        );
        return $this->safe_string($timeInForces, $timeInForce, $timeInForce);
    }

    public function to_milliseconds($dateString) {
        if ($dateString === null) {
            return $dateString;
        }
        // '20200328-10:31:01.575' -> '2020-03-28 12:42:48.000'
        $splits = explode('-', $dateString);
        $partOne = $this->safe_string($splits, 0);
        $partTwo = $this->safe_string($splits, 1);
        if ($partOne === null || $partTwo === null) {
            return null;
        }
        if (strlen($partOne) !== 8) {
            return null;
        }
        $date = mb_substr($partOne, 0, 4 - 0) . '-' . mb_substr($partOne, 4, 6 - 4) . '-' . mb_substr($partOne, 6, 8 - 6);
        return $this->parse8601($date . ' ' . $partTwo);
    }

    public function convert_from_scale($number, $scale) {
        if (($number === null) || ($scale === null)) {
            return null;
        }
        $precise = new Precise ($number);
        $precise->decimals = $precise->decimals . $scale;
        $precise->reduce ();
        return (string) $precise;
    }

    public function get_scale($num) {
        $s = $this->number_to_string($num);
        return $this->precision_from_string($s);
    }

    public function convert_to_scale($number, $scale) {
        if (($number === null) || ($scale === null)) {
            return null;
        }
        $precise = new Precise ($number);
        $precise->decimals = $precise->decimals - $scale;
        $precise->reduce ();
        $preciseString = (string) $precise;
        return intval($preciseString);
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default $error handler
        }
        $error = $this->safe_string($response, 'error');
        if ($error !== null) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions, $error, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions, $body, $feedback);
            throw new ExchangeError($this->id . ' ' . $body);
        }
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } elseif ($api === 'private') {
            // special case for getUserHistory
            $format = $this->safe_value($params, 'format');
            $type = $this->safe_value($params, 'type');
            $extension = array();
            if ($format !== null) {
                $extension['format'] = $format;
            }
            if ($type !== null) {
                $extension['type'] = $type;
            }
            if ($extension) {
                $url .= '?' . $this->urlencode($extension);
            }
            $params = $this->omit($params, array( 'format', 'type' ));
            $this->check_required_credentials();
            $nonce = $this->nonce();
            $query = array_merge($query, array(
                'userId' => $this->uid,
                'nonce' => $nonce,
            ));
            $params['nonce'] = $this->nonce();
            $body = $this->json($query);
            $signature = $this->hmac($this->encode($body), $this->encode($this->secret), 'sha384');
            $headers = array(
                'Content-Type' => 'application/json',
                'requestToken' => $this->apiKey,
                'signature' => $signature,
            );
        }
        $url = $this->urls['api'][$api] . '/' . $url;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
