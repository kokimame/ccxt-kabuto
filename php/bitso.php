<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\OrderNotFound;

class bitso extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'bitso',
            'name' => 'Bitso',
            'countries' => array( 'MX' ), // Mexico
            'rateLimit' => 2000, // 30 requests per minute
            'version' => 'v3',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchDepositAddress' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderTrades' => true,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTransactionFee' => false,
                'fetchTransactionFees' => true,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg',
                'api' => 'https://api.bitso.com',
                'www' => 'https://bitso.com',
                'doc' => 'https://bitso.com/api_info',
                'fees' => 'https://bitso.com/fees',
                'referral' => 'https://bitso.com/?ref=itej',
            ),
            'precisionMode' => TICK_SIZE,
            'options' => array(
                'precision' => array(
                    'XRP' => 0.000001,
                    'MXN' => 0.01,
                    'TUSD' => 0.01,
                ),
                'defaultPrecision' => 0.00000001,
            ),
            'timeframes' => array(
                '1m' => '60',
                '5m' => '300',
                '15m' => '900',
                '30m' => '1800',
                '1h' => '3600',
                '4h' => '14400',
                '12h' => '43200',
                '1d' => '86400',
                '1w' => '604800',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'available_books',
                        'ticker',
                        'order_book',
                        'trades',
                        'ohlc',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account_status',
                        'balance',
                        'fees',
                        'fundings',
                        'fundings/{fid}',
                        'funding_destination',
                        'kyc_documents',
                        'ledger',
                        'ledger/trades',
                        'ledger/fees',
                        'ledger/fundings',
                        'ledger/withdrawals',
                        'mx_bank_codes',
                        'open_orders',
                        'order_trades/{oid}',
                        'orders/{oid}',
                        'user_trades',
                        'user_trades/{tid}',
                        'withdrawals/',
                        'withdrawals/{wid}',
                    ),
                    'post' => array(
                        'bitcoin_withdrawal',
                        'debit_card_withdrawal',
                        'ether_withdrawal',
                        'ripple_withdrawal',
                        'bcash_withdrawal',
                        'litecoin_withdrawal',
                        'orders',
                        'phone_number',
                        'phone_verification',
                        'phone_withdrawal',
                        'spei_withdrawal',
                        'ripple_withdrawal',
                        'bcash_withdrawal',
                        'litecoin_withdrawal',
                    ),
                    'delete' => array(
                        'orders/{oid}',
                        'orders/all',
                    ),
                ),
            ),
            'exceptions' => array(
                '0201' => '\\ccxt\\AuthenticationError', // Invalid Nonce or Invalid Credentials
                '104' => '\\ccxt\\InvalidNonce', // Cannot perform request - nonce must be higher than 1520307203724237
                '0304' => '\\ccxt\\BadRequest', // array("success":false,"error":array("code":"0304","message":"The field time_bucket () is either invalid or missing"))
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all $markets for bitso
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing $market data
         */
        $response = $this->publicGetAvailableBooks ($params);
        //
        //     {
        //         "success":true,
        //         "payload":array(
        //             {
        //                 "book":"btc_mxn",
        //                 "minimum_price":"500",
        //                 "maximum_price":"10000000",
        //                 "minimum_amount":"0.00005",
        //                 "maximum_amount":"500",
        //                 "minimum_value":"5",
        //                 "maximum_value":"10000000",
        //                 "tick_size":"0.01",
        //                 "fees":array(
        //                     "flat_rate":array("maker":"0.500","taker":"0.650"),
        //                     "structure":array(
        //                         array("volume":"1500000","maker":"0.00500","taker":"0.00650"),
        //                         array("volume":"2000000","maker":"0.00490","taker":"0.00637"),
        //                         array("volume":"5000000","maker":"0.00480","taker":"0.00624"),
        //                         array("volume":"7000000","maker":"0.00440","taker":"0.00572"),
        //                         array("volume":"10000000","maker":"0.00420","taker":"0.00546"),
        //                         array("volume":"15000000","maker":"0.00400","taker":"0.00520"),
        //                         array("volume":"35000000","maker":"0.00370","taker":"0.00481"),
        //                         array("volume":"50000000","maker":"0.00300","taker":"0.00390"),
        //                         array("volume":"150000000","maker":"0.00200","taker":"0.00260"),
        //                         array("volume":"250000000","maker":"0.00100","taker":"0.00130"),
        //                         array("volume":"9999999999","maker":"0.00000","taker":"0.00130"),
        //                     )
        //                 }
        //             ),
        //         )
        //     }
        $markets = $this->safe_value($response, 'payload', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'book');
            list($baseId, $quoteId) = explode('_', $id);
            $base = strtoupper($baseId);
            $quote = strtoupper($quoteId);
            $base = $this->safe_currency_code($base);
            $quote = $this->safe_currency_code($quote);
            $fees = $this->safe_value($market, 'fees', array());
            $flatRate = $this->safe_value($fees, 'flat_rate', array());
            $takerString = $this->safe_string($flatRate, 'taker');
            $makerString = $this->safe_string($flatRate, 'maker');
            $taker = $this->parse_number(Precise::string_div($takerString, '100'));
            $maker = $this->parse_number(Precise::string_div($makerString, '100'));
            $feeTiers = $this->safe_value($fees, 'structure', array());
            $fee = array(
                'taker' => $taker,
                'maker' => $maker,
                'percentage' => true,
                'tierBased' => true,
            );
            $takerFees = array();
            $makerFees = array();
            for ($j = 0; $j < count($feeTiers); $j++) {
                $tier = $feeTiers[$j];
                $volume = $this->safe_number($tier, 'volume');
                $takerFee = $this->safe_number($tier, 'taker');
                $makerFee = $this->safe_number($tier, 'maker');
                $takerFees[] = array( $volume, $takerFee );
                $makerFees[] = array( $volume, $makerFee );
                if ($j === 0) {
                    $fee['taker'] = $takerFee;
                    $fee['maker'] = $makerFee;
                }
            }
            $tiers = array(
                'taker' => $takerFees,
                'maker' => $makerFees,
            );
            $fee['tiers'] = $tiers;
            $defaultPricePrecision = $this->safe_number($this->options['precision'], $quote, $this->options['defaultPrecision']);
            $result[] = array_merge(array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => null,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => $taker,
                'maker' => $maker,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_number($this->options['precision'], $base, $this->options['defaultPrecision']),
                    'price' => $this->safe_number($market, 'tick_size', $defaultPricePrecision),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'minimum_amount'),
                        'max' => $this->safe_number($market, 'maximum_amount'),
                    ),
                    'price' => array(
                        'min' => $this->safe_number($market, 'minimum_price'),
                        'max' => $this->safe_number($market, 'maximum_price'),
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'minimum_value'),
                        'max' => $this->safe_number($market, 'maximum_value'),
                    ),
                ),
                'info' => $market,
            ), $fee);
        }
        return $result;
    }

    public function parse_balance($response) {
        $payload = $this->safe_value($response, 'payload', array());
        $balances = $this->safe_value($payload, 'balances', array());
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'locked');
            $account['total'] = $this->safe_string($balance, 'total');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the bitso api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->privateGetBalance ($params);
        //
        //     {
        //       "success" => true,
        //       "payload" => array(
        //         "balances" => array(
        //           array(
        //             "currency" => "bat",
        //             "available" => "0.00000000",
        //             "locked" => "0.00000000",
        //             "total" => "0.00000000",
        //             "pending_deposit" => "0.00000000",
        //             "pending_withdrawal" => "0.00000000"
        //           ),
        //           array(
        //             "currency" => "bch",
        //             "available" => "0.00000000",
        //             "locked" => "0.00000000",
        //             "total" => "0.00000000",
        //             "pending_deposit" => "0.00000000",
        //             "pending_withdrawal" => "0.00000000"
        //           ),
        //         ),
        //       ),
        //     }
        //
        return $this->parse_balance($response);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the bitso api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by market symbols
         */
        $this->load_markets();
        $request = array(
            'book' => $this->market_id($symbol),
        );
        $response = $this->publicGetOrderBook (array_merge($request, $params));
        $orderbook = $this->safe_value($response, 'payload');
        $timestamp = $this->parse8601($this->safe_string($orderbook, 'updated_at'));
        return $this->parse_order_book($orderbook, $symbol, $timestamp, 'bids', 'asks', 'price', 'amount');
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "high":"37446.85",
        //         "last":"36599.54",
        //         "created_at":"2022-01-28T12:06:11+00:00",
        //         "book":"btc_usdt",
        //         "volume":"7.29075419",
        //         "vwap":"36579.1564400307",
        //         "low":"35578.52",
        //         "ask":"36574.76",
        //         "bid":"36538.22",
        //         "change_24":"-105.64"
        //     }
        //
        $symbol = $this->safe_symbol(null, $market);
        $timestamp = $this->parse8601($this->safe_string($ticker, 'created_at'));
        $vwap = $this->safe_string($ticker, 'vwap');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $quoteVolume = Precise::string_mul($baseVolume, $vwap);
        $last = $this->safe_string($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => $vwap,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {str} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {dict} $params extra parameters specific to the bitso api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'book' => $market['id'],
        );
        $response = $this->publicGetTicker (array_merge($request, $params));
        $ticker = $this->safe_value($response, 'payload');
        //
        //     {
        //         "success":true,
        //         "payload":{
        //             "high":"37446.85",
        //             "last":"37051.96",
        //             "created_at":"2022-01-28T17:03:29+00:00",
        //             "book":"btc_usdt",
        //             "volume":"6.16176186",
        //             "vwap":"36582.6293169472",
        //             "low":"35578.52",
        //             "ask":"37083.62",
        //             "bid":"37039.66",
        //             "change_24":"478.45"
        //         }
        //     }
        //
        return $this->parse_ticker($ticker, $market);
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the bitso api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'book' => $market['id'],
            'time_bucket' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['start'] = $since;
            if ($limit !== null) {
                $duration = $this->parse_timeframe($timeframe);
                $request['end'] = $this->sum($since, $duration * $limit * 1000);
            }
        } elseif ($limit !== null) {
            $now = $this->milliseconds();
            $request['end'] = $now;
            $request['start'] = $now - $this->parse_timeframe($timeframe) * 1000 * $limit;
        }
        $response = $this->publicGetOhlc (array_merge($request, $params));
        //
        //     {
        //         "success":true,
        //         "payload" => array(
        //             array(
        //                 "bucket_start_time":1648219140000,
        //                 "first_trade_time":1648219154990,
        //                 "last_trade_time":1648219189441,
        //                 "first_rate":"44958.60",
        //                 "last_rate":"44979.88",
        //                 "min_rate":"44957.33",
        //                 "max_rate":"44979.88",
        //                 "trade_count":8,
        //                 "volume":"0.00082814",
        //                 "vwap":"44965.02"
        //             ),
        //         )
        //     }
        //
        $payload = $this->safe_value($response, 'payload', array());
        return $this->parse_ohlcvs($payload, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null, $timeframe = '1m') {
        //
        //     array(
        //         "bucket_start_time":1648219140000,
        //         "first_trade_time":1648219154990,
        //         "last_trade_time":1648219189441,
        //         "first_rate":"44958.60",
        //         "last_rate":"44979.88",
        //         "min_rate":"44957.33",
        //         "max_rate":"44979.88",
        //         "trade_count":8,
        //         "volume":"0.00082814",
        //         "vwap":"44965.02"
        //     ),
        //
        return array(
            $this->safe_integer($ohlcv, 'bucket_start_time'),
            $this->safe_number($ohlcv, 'first_rate'),
            $this->safe_number($ohlcv, 'max_rate'),
            $this->safe_number($ohlcv, 'min_rate'),
            $this->safe_number($ohlcv, 'last_rate'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades (public)
        //
        //      {
        //          "book" => "btc_usdt",
        //          "created_at" => "2021-11-24T12:14:53+0000",
        //          "amount" => "0.00026562",
        //          "maker_side" => "sell",
        //          "price" => "56471.55",
        //          "tid" => "52557338"
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //          "book" => "btc_usdt",
        //          "created_at" => "2021-11-24T12:31:03+0000",
        //          "minor" => "11.30356000",
        //          "major" => "-0.00020000",
        //          "fees_amount" => "0.01119052",
        //          "fees_currency" => "usdt",
        //          "minor_currency" => "usdt",
        //          "major_currency" => "btc",
        //          "oid" => "djTzMIWx2Vi3iMjl",
        //          "tid" => "52559051",
        //          "price" => "56517.80",
        //          "side" => "sell",
        //          "maker_side" => "buy"
        //      }
        //
        // fetchOrderTrades (private)
        //
        //      {
        //          "book" => "btc_usdt",
        //          "created_at" => "2021-11-24T12:30:52+0000",
        //          "minor" => "-11.33047916",
        //          "major" => "0.00020020",
        //          "fees_amount" => "0.00000020",
        //          "fees_currency" => "btc",
        //          "minor_currency" => "usdt",
        //          "major_currency" => "btc",
        //          "oid" => "O0D2zcljjjQF5xlG",
        //          "tid" => "52559030",
        //          "price" => "56595.80",
        //          "side" => "buy",
        //          "maker_side" => "sell"
        //      }
        //
        $timestamp = $this->parse8601($this->safe_string($trade, 'created_at'));
        $marketId = $this->safe_string($trade, 'book');
        $symbol = $this->safe_symbol($marketId, $market, '_');
        $side = $this->safe_string_2($trade, 'side', 'maker_side');
        $makerSide = $this->safe_string($trade, 'maker_side');
        $takerOrMaker = null;
        if ($side === $makerSide) {
            $takerOrMaker = 'maker';
        } else {
            $takerOrMaker = 'taker';
        }
        $amount = $this->safe_string_2($trade, 'amount', 'major');
        if ($amount !== null) {
            $amount = Precise::string_abs($amount);
        }
        $fee = null;
        $feeCost = $this->safe_string($trade, 'fees_amount');
        if ($feeCost !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fees_currency');
            $feeCurrency = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrency,
            );
        }
        $cost = $this->safe_string($trade, 'minor');
        if ($cost !== null) {
            $cost = Precise::string_abs($cost);
        }
        $price = $this->safe_string($trade, 'price');
        $orderId = $this->safe_string($trade, 'oid');
        $id = $this->safe_string($trade, 'tid');
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of trades to fetch
         * @param {dict} $params extra parameters specific to the bitso api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'book' => $market['id'],
        );
        $response = $this->publicGetTrades (array_merge($request, $params));
        return $this->parse_trades($response['payload'], $market, $since, $limit);
    }

    public function fetch_trading_fees($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetFees ($params);
        //
        //    {
        //        success => true,
        //        $payload => {
        //            $fees => array(
        //                array(
        //                    book => 'btc_mxn',
        //                    fee_percent => '0.6500',
        //                    fee_decimal => '0.00650000',
        //                    taker_fee_percent => '0.6500',
        //                    taker_fee_decimal => '0.00650000',
        //                    maker_fee_percent => '0.5000',
        //                    maker_fee_decimal => '0.00500000',
        //                    volume_currency => 'mxn',
        //                    current_volume => '0.00',
        //                    next_volume => '1500000.00',
        //                    next_maker_fee_percent => '0.490',
        //                    next_taker_fee_percent => '0.637',
        //                    nextVolume => '1500000.00',
        //                    nextFee => '0.490',
        //                    nextTakerFee => '0.637'
        //                ),
        //                ...
        //            ),
        //            deposit_fees => array(
        //                array(
        //                    currency => 'btc',
        //                    method => 'rewards',
        //                    $fee => '0.00',
        //                    is_fixed => false
        //                ),
        //                ...
        //            ),
        //            withdrawal_fees => {
        //                ada => '0.20958100',
        //                bch => '0.00009437',
        //                ars => '0',
        //                btc => '0.00001209',
        //                ...
        //            }
        //        }
        //    }
        //
        $payload = $this->safe_value($response, 'payload', array());
        $fees = $this->safe_value($payload, 'fees', array());
        $result = array();
        for ($i = 0; $i < count($fees); $i++) {
            $fee = $fees[$i];
            $marketId = $this->safe_string($fee, 'book');
            $symbol = $this->safe_symbol($marketId, null, '_');
            $result[$symbol] = array(
                'info' => $fee,
                'symbol' => $symbol,
                'maker' => $this->safe_number($fee, 'maker_fee_decimal'),
                'taker' => $this->safe_number($fee, 'taker_fee_decimal'),
                'percentage' => true,
                'tierBased' => true,
            );
        }
        return $result;
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = 25, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        // the don't support fetching trades starting from a date yet
        // use the `marker` extra param for that
        // this is not a typo, the variable name is 'marker' (don't confuse with 'market')
        $markerInParams = (is_array($params) && array_key_exists('marker', $params));
        // warn the user with an exception if the user wants to filter
        // starting from $since timestamp, but does not set the trade id with an extra 'marker' param
        if (($since !== null) && !$markerInParams) {
            throw new ExchangeError($this->id . ' fetchMyTrades() does not support fetching trades starting from a timestamp with the `$since` argument, use the `marker` extra param to filter starting from an integer trade id');
        }
        // convert it to an integer unconditionally
        if ($markerInParams) {
            $params = array_merge($params, array(
                'marker' => intval($params['marker']),
            ));
        }
        $request = array(
            'book' => $market['id'],
            'limit' => $limit, // default = 25, max = 100
            // 'sort' => 'desc', // default = desc
            // 'marker' => id, // integer id to start from
        );
        $response = $this->privateGetUserTrades (array_merge($request, $params));
        return $this->parse_trades($response['payload'], $market, $since, $limit);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'book' => $this->market_id($symbol),
            'side' => $side,
            'type' => $type,
            'major' => $this->amount_to_precision($symbol, $amount),
        );
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostOrders (array_merge($request, $params));
        $id = $this->safe_string($response['payload'], 'oid');
        return array(
            'info' => $response,
            'id' => $id,
        );
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'oid' => $id,
        );
        return $this->privateDeleteOrdersOid (array_merge($request, $params));
    }

    public function parse_order_status($status) {
        $statuses = array(
            'partial-fill' => 'open', // this is a common substitution in ccxt
            'completed' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        $id = $this->safe_string($order, 'oid');
        $side = $this->safe_string($order, 'side');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'book');
        $symbol = $this->safe_symbol($marketId, $market, '_');
        $orderType = $this->safe_string($order, 'type');
        $timestamp = $this->parse8601($this->safe_string($order, 'created_at'));
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'original_amount');
        $remaining = $this->safe_string($order, 'unfilled_amount');
        $clientOrderId = $this->safe_string($order, 'client_id');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $orderType,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'amount' => $amount,
            'cost' => null,
            'remaining' => $remaining,
            'filled' => null,
            'status' => $status,
            'fee' => null,
            'average' => null,
            'trades' => null,
        ), $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = 25, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        // the don't support fetching trades starting from a date yet
        // use the `marker` extra param for that
        // this is not a typo, the variable name is 'marker' (don't confuse with 'market')
        $markerInParams = (is_array($params) && array_key_exists('marker', $params));
        // warn the user with an exception if the user wants to filter
        // starting from $since timestamp, but does not set the trade id with an extra 'marker' param
        if (($since !== null) && !$markerInParams) {
            throw new ExchangeError($this->id . ' fetchOpenOrders() does not support fetching $orders starting from a timestamp with the `$since` argument, use the `marker` extra param to filter starting from an integer trade id');
        }
        // convert it to an integer unconditionally
        if ($markerInParams) {
            $params = array_merge($params, array(
                'marker' => intval($params['marker']),
            ));
        }
        $request = array(
            'book' => $market['id'],
            'limit' => $limit, // default = 25, max = 100
            // 'sort' => 'desc', // default = desc
            // 'marker' => id, // integer id to start from
        );
        $response = $this->privateGetOpenOrders (array_merge($request, $params));
        $orders = $this->parse_orders($response['payload'], $market, $since, $limit);
        return $orders;
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $response = $this->privateGetOrdersOid (array(
            'oid' => $id,
        ));
        $payload = $this->safe_value($response, 'payload');
        if (gettype($payload) === 'array' && count(array_filter(array_keys($payload), 'is_string')) == 0) {
            $numOrders = is_array($response['payload']) ? count($response['payload']) : 0;
            if ($numOrders === 1) {
                return $this->parse_order($payload[0]);
            }
        }
        throw new OrderNotFound($this->id . ' => The order ' . $id . ' not found.');
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'oid' => $id,
        );
        $response = $this->privateGetOrderTradesOid (array_merge($request, $params));
        return $this->parse_trades($response['payload'], $market);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'fund_currency' => $currency['id'],
        );
        $response = $this->privateGetFundingDestination (array_merge($request, $params));
        $address = $this->safe_string($response['payload'], 'account_identifier');
        $tag = null;
        if (mb_strpos($address, '?dt=') !== false) {
            $parts = explode('?dt=', $address);
            $address = $this->safe_string($parts, 0);
            $tag = $this->safe_string($parts, 1);
        }
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => null,
            'info' => $response,
        );
    }

    public function fetch_transaction_fees($codes = null, $params = array ()) {
        $this->load_markets();
        $response = $this->privateGetFees ($params);
        //
        //    {
        //        success => true,
        //        $payload => {
        //            fees => array(
        //                array(
        //                    book => 'btc_mxn',
        //                    fee_percent => '0.6500',
        //                    fee_decimal => '0.00650000',
        //                    taker_fee_percent => '0.6500',
        //                    taker_fee_decimal => '0.00650000',
        //                    maker_fee_percent => '0.5000',
        //                    maker_fee_decimal => '0.00500000',
        //                    volume_currency => 'mxn',
        //                    current_volume => '0.00',
        //                    next_volume => '1500000.00',
        //                    next_maker_fee_percent => '0.490',
        //                    next_taker_fee_percent => '0.637',
        //                    nextVolume => '1500000.00',
        //                    nextFee => '0.490',
        //                    nextTakerFee => '0.637'
        //                ),
        //                ...
        //            ),
        //            deposit_fees => array(
        //                array(
        //                    currency => 'btc',
        //                    method => 'rewards',
        //                    fee => '0.00',
        //                    is_fixed => false
        //                ),
        //                ...
        //            ),
        //            withdrawal_fees => {
        //                ada => '0.20958100',
        //                bch => '0.00009437',
        //                ars => '0',
        //                btc => '0.00001209',
        //                ...
        //            }
        //        }
        //    }
        //
        $payload = $this->safe_value($response, 'payload', array());
        $depositFees = $this->safe_value($payload, 'deposit_fees', array());
        $deposit = array();
        for ($i = 0; $i < count($depositFees); $i++) {
            $depositFee = $depositFees[$i];
            $currencyId = $this->safe_string($depositFee, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $deposit[$code] = $this->safe_number($depositFee, 'fee');
        }
        $withdraw = array();
        $withdrawalFees = $this->safe_value($payload, 'withdrawal_fees', array());
        $currencyIds = is_array($withdrawalFees) ? array_keys($withdrawalFees) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $code = $this->safe_currency_code($currencyId);
            $withdraw[$code] = $this->safe_number($withdrawalFees, $currencyId);
        }
        return array(
            'info' => $response,
            'deposit' => $deposit,
            'withdraw' => $withdraw,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $methods = array(
            'BTC' => 'Bitcoin',
            'ETH' => 'Ether',
            'XRP' => 'Ripple',
            'BCH' => 'Bcash',
            'LTC' => 'Litecoin',
        );
        $currency = $this->currency($code);
        $method = (is_array($methods) && array_key_exists($code, $methods)) ? $methods[$code] : null;
        if ($method === null) {
            throw new ExchangeError($this->id . ' not valid withdraw coin => ' . $code);
        }
        $request = array(
            'amount' => $amount,
            'address' => $address,
            'destination_tag' => $tag,
        );
        $classMethod = 'privatePost' . $method . 'Withdrawal';
        $response = $this->$classMethod (array_merge($request, $params));
        //
        //     {
        //         "success" => true,
        //         "payload" => array(
        //             {
        //                 "wid" => "c5b8d7f0768ee91d3b33bee648318688",
        //                 "status" => "pending",
        //                 "created_at" => "2016-04-08T17:52:31.000+00:00",
        //                 "currency" => "btc",
        //                 "method" => "Bitcoin",
        //                 "amount" => "0.48650929",
        //                 "details" => array(
        //                     "withdrawal_address" => "18MsnATiNiKLqUHDTRKjurwMg7inCrdNEp",
        //                     "tx_hash" => "d4f28394693e9fb5fffcaf730c11f32d1922e5837f76ca82189d3bfe30ded433"
        //                 }
        //             ),
        //         )
        //     }
        //
        $payload = $this->safe_value($response, 'payload', array());
        $first = $this->safe_value($payload, 0);
        return $this->parse_transaction($first, $currency);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // withdraw
        //
        //     {
        //         "wid" => "c5b8d7f0768ee91d3b33bee648318688",
        //         "status" => "pending",
        //         "created_at" => "2016-04-08T17:52:31.000+00:00",
        //         "currency" => "btc",
        //         "method" => "Bitcoin",
        //         "amount" => "0.48650929",
        //         "details" => {
        //             "withdrawal_address" => "18MsnATiNiKLqUHDTRKjurwMg7inCrdNEp",
        //             "tx_hash" => "d4f28394693e9fb5fffcaf730c11f32d1922e5837f76ca82189d3bfe30ded433"
        //         }
        //     }
        //
        $currency = $this->safe_currency(null, $currency);
        return array(
            'id' => $this->safe_string($transaction, 'wid'),
            'txid' => null,
            'timestamp' => null,
            'datetime' => null,
            'network' => null,
            'addressFrom' => null,
            'address' => null,
            'addressTo' => null,
            'amount' => null,
            'type' => null,
            'currency' => $currency['code'],
            'status' => null,
            'updated' => null,
            'tagFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'comment' => null,
            'fee' => null,
            'info' => $transaction,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $endpoint = '/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($method === 'GET') {
            if ($query) {
                $endpoint .= '?' . $this->urlencode($query);
            }
        }
        $url = $this->urls['api'] . $endpoint;
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = (string) $this->nonce();
            $request = implode('', array($nonce, $method, $endpoint));
            if ($method !== 'GET') {
                if ($query) {
                    $body = $this->json($query);
                    $request .= $body;
                }
            }
            $signature = $this->hmac($this->encode($request), $this->encode($this->secret));
            $auth = $this->apiKey . ':' . $nonce . ':' . $signature;
            $headers = array(
                'Authorization' => 'Bitso ' . $auth,
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default $error handler
        }
        if (is_array($response) && array_key_exists('success', $response)) {
            //
            //     array("success":false,"error":array("code":104,"message":"Cannot perform request - nonce must be higher than 1520307203724237"))
            //
            $success = $this->safe_value($response, 'success', false);
            if (gettype($success) === 'string') {
                if (($success === 'true') || ($success === '1')) {
                    $success = true;
                } else {
                    $success = false;
                }
            }
            if (!$success) {
                $feedback = $this->id . ' ' . $this->json($response);
                $error = $this->safe_value($response, 'error');
                if ($error === null) {
                    throw new ExchangeError($feedback);
                }
                $code = $this->safe_string($error, 'code');
                $this->throw_exactly_matched_exception($this->exceptions, $code, $feedback);
                throw new ExchangeError($feedback);
            }
        }
    }
}
