<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\AuthenticationError;
use \ccxt\ArgumentsRequired;
use \ccxt\NotSupported;
use \ccxt\Precise;

class gemini extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'gemini',
            'name' => 'Gemini',
            'countries' => array( 'US' ),
            // 600 requests a minute = 10 requests per second => 1000ms / 10 = 100ms between requests (private endpoints)
            // 120 requests a minute = 2 requests per second => ( 1000ms / rateLimit ) / 2 = 5 (public endpoints)
            'rateLimit' => 100,
            'version' => 'v1',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'createDepositAddress' => true,
                'createMarketOrder' => null,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchClosedOrders' => null,
                'fetchDepositAddress' => null, // TODO
                'fetchDepositAddressesByNetwork' => true,
                'fetchDeposits' => null,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => null,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTransactions' => true,
                'fetchWithdrawals' => null,
                'postOnly' => true,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
                'api' => array(
                    'public' => 'https://api.gemini.com',
                    'private' => 'https://api.gemini.com',
                    'web' => 'https://docs.gemini.com',
                ),
                'www' => 'https://gemini.com/',
                'doc' => array(
                    'https://docs.gemini.com/rest-api',
                    'https://docs.sandbox.gemini.com',
                ),
                'test' => array(
                    'public' => 'https://api.sandbox.gemini.com',
                    'private' => 'https://api.sandbox.gemini.com',
                    // use the true doc instead of the sandbox doc
                    // since they differ in parsing
                    // https://github.com/ccxt/ccxt/issues/7874
                    // https://github.com/ccxt/ccxt/issues/7894
                    'web' => 'https://docs.gemini.com',
                ),
                'fees' => array(
                    'https://gemini.com/api-fee-schedule',
                    'https://gemini.com/trading-fees',
                    'https://gemini.com/transfer-fees',
                ),
            ),
            'api' => array(
                'web' => array(
                    'get' => array(
                        'rest-api',
                    ),
                ),
                'public' => array(
                    'get' => array(
                        'v1/symbols' => 5,
                        'v1/symbols/details/{symbol}' => 5,
                        'v1/pubticker/{symbol}' => 5,
                        'v2/ticker/{symbol}' => 5,
                        'v2/candles/{symbol}/{timeframe}' => 5,
                        'v1/trades/{symbol}' => 5,
                        'v1/auction/{symbol}' => 5,
                        'v1/auction/{symbol}/history' => 5,
                        'v1/pricefeed' => 5,
                        'v1/book/{symbol}' => 5,
                        'v1/earn/rates' => 5,
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'v1/order/new' => 1,
                        'v1/order/cancel' => 1,
                        'v1/wrap/{symbol}' => 1,
                        'v1/order/cancel/session' => 1,
                        'v1/order/cancel/all' => 1,
                        'v1/order/status' => 1,
                        'v1/orders' => 1,
                        'v1/mytrades' => 1,
                        'v1/notionalvolume' => 1,
                        'v1/tradevolume' => 1,
                        'v1/clearing/new' => 1,
                        'v1/clearing/status' => 1,
                        'v1/clearing/cancel' => 1,
                        'v1/clearing/confirm' => 1,
                        'v1/balances' => 1,
                        'v1/notionalbalances/{currency}' => 1,
                        'v1/transfers' => 1,
                        'v1/addresses/{network}' => 1,
                        'v1/deposit/{network}/newAddress' => 1,
                        'v1/deposit/{currency}/newAddress' => 1,
                        'v1/withdraw/{currency}' => 1,
                        'v1/account/transfer/{currency}' => 1,
                        'v1/payments/addbank' => 1,
                        'v1/payments/methods' => 1,
                        'v1/payments/sen/withdraw' => 1,
                        'v1/balances/earn' => 1,
                        'v1/earn/interest' => 1,
                        'v1/approvedAddresses/{network}/request' => 1,
                        'v1/approvedAddresses/account/{network}' => 1,
                        'v1/approvedAddresses/{network}/remove' => 1,
                        'v1/account' => 1,
                        'v1/account/create' => 1,
                        'v1/account/list' => 1,
                        'v1/heartbeat' => 1,
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'fees' => array(
                'trading' => array(
                    'taker' => 0.004,
                    'maker' => 0.002,
                ),
            ),
            'httpExceptions' => array(
                '400' => '\\ccxt\\BadRequest', // Auction not open or paused, ineligible timing, market not open, or the request was malformed, in the case of a private API request, missing or malformed Gemini private API authentication headers
                '403' => '\\ccxt\\PermissionDenied', // The API key is missing the role necessary to access this private API endpoint
                '404' => '\\ccxt\\OrderNotFound', // Unknown API entry point or Order not found
                '406' => '\\ccxt\\InsufficientFunds', // Insufficient Funds
                '429' => '\\ccxt\\RateLimitExceeded', // Rate Limiting was applied
                '500' => '\\ccxt\\ExchangeError', // The server encountered an error
                '502' => '\\ccxt\\ExchangeNotAvailable', // Technical issues are preventing the request from being satisfied
                '503' => '\\ccxt\\OnMaintenance', // The exchange is down for maintenance
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1hr',
                '6h' => '6hr',
                '1d' => '1day',
            ),
            'exceptions' => array(
                'exact' => array(
                    'AuctionNotOpen' => '\\ccxt\\BadRequest', // Failed to place an auction-only order because there is no current auction open for this symbol
                    'ClientOrderIdTooLong' => '\\ccxt\\BadRequest', // The Client Order ID must be under 100 characters
                    'ClientOrderIdMustBeString' => '\\ccxt\\BadRequest', // The Client Order ID must be a string
                    'ConflictingOptions' => '\\ccxt\\BadRequest', // New orders using a combination of order execution options are not supported
                    'EndpointMismatch' => '\\ccxt\\BadRequest', // The request was submitted to an endpoint different than the one in the payload
                    'EndpointNotFound' => '\\ccxt\\BadRequest', // No endpoint was specified
                    'IneligibleTiming' => '\\ccxt\\BadRequest', // Failed to place an auction order for the current auction on this symbol because the timing is not eligible, new orders may only be placed before the auction begins.
                    'InsufficientFunds' => '\\ccxt\\InsufficientFunds', // The order was rejected because of insufficient funds
                    'InvalidJson' => '\\ccxt\\BadRequest', // The JSON provided is invalid
                    'InvalidNonce' => '\\ccxt\\InvalidNonce', // The nonce was not greater than the previously used nonce, or was not present
                    'InvalidOrderType' => '\\ccxt\\InvalidOrder', // An unknown order type was provided
                    'InvalidPrice' => '\\ccxt\\InvalidOrder', // For new orders, the price was invalid
                    'InvalidQuantity' => '\\ccxt\\InvalidOrder', // A negative or otherwise invalid quantity was specified
                    'InvalidSide' => '\\ccxt\\InvalidOrder', // For new orders, and invalid side was specified
                    'InvalidSignature' => '\\ccxt\\AuthenticationError', // The signature did not match the expected signature
                    'InvalidSymbol' => '\\ccxt\\BadRequest', // An invalid symbol was specified
                    'InvalidTimestampInPayload' => '\\ccxt\\BadRequest', // The JSON payload contained a timestamp parameter with an unsupported value.
                    'Maintenance' => '\\ccxt\\OnMaintenance', // The system is down for maintenance
                    'MarketNotOpen' => '\\ccxt\\InvalidOrder', // The order was rejected because the market is not accepting new orders
                    'MissingApikeyHeader' => '\\ccxt\\AuthenticationError', // The X-GEMINI-APIKEY header was missing
                    'MissingOrderField' => '\\ccxt\\InvalidOrder', // A required order_id field was not specified
                    'MissingRole' => '\\ccxt\\AuthenticationError', // The API key used to access this endpoint does not have the required role assigned to it
                    'MissingPayloadHeader' => '\\ccxt\\AuthenticationError', // The X-GEMINI-PAYLOAD header was missing
                    'MissingSignatureHeader' => '\\ccxt\\AuthenticationError', // The X-GEMINI-SIGNATURE header was missing
                    'NoSSL' => '\\ccxt\\AuthenticationError', // You must use HTTPS to access the API
                    'OptionsMustBeArray' => '\\ccxt\\BadRequest', // The options parameter must be an array.
                    'OrderNotFound' => '\\ccxt\\OrderNotFound', // The order specified was not found
                    'RateLimit' => '\\ccxt\\RateLimitExceeded', // Requests were made too frequently. See Rate Limits below.
                    'System' => '\\ccxt\\ExchangeError', // We are experiencing technical issues
                    'UnsupportedOption' => '\\ccxt\\BadRequest', // This order execution option is not supported.
                ),
                'broad' => array(
                    'The Gemini Exchange is currently undergoing maintenance.' => '\\ccxt\\OnMaintenance', // The Gemini Exchange is currently undergoing maintenance. Please check https://status.gemini.com/ for more information.
                    'We are investigating technical issues with the Gemini Exchange.' => '\\ccxt\\ExchangeNotAvailable', // We are investigating technical issues with the Gemini Exchange. Please check https://status.gemini.com/ for more information.
                ),
            ),
            'options' => array(
                'fetchMarketsMethod' => 'fetch_markets_from_web',
                'fetchTickerMethod' => 'fetchTickerV1', // fetchTickerV1, fetchTickerV2, fetchTickerV1AndV2
                'networkIds' => array(
                    'bitcoin' => 'BTC',
                    'ethereum' => 'ERC20',
                    'bitcoincash' => 'BCH',
                    'litecoin' => 'LTC',
                    'zcash' => 'ZEC',
                    'filecoin' => 'FIL',
                    'dogecoin' => 'DOGE',
                    'tezos' => 'XTZ',
                ),
                'networks' => array(
                    'BTC' => 'bitcoin',
                    'ERC20' => 'ethereum',
                    'BCH' => 'bitcoincash',
                    'LTC' => 'litecoin',
                    'ZEC' => 'zcash',
                    'FIL' => 'filecoin',
                    'DOGE' => 'dogecoin',
                    'XTZ' => 'tezos',
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for gemini
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing market data
         */
        $method = $this->safe_value($this->options, 'fetchMarketsMethod', 'fetch_markets_from_api');
        return yield $this->$method ($params);
    }

    public function fetch_markets_from_web($params = array ()) {
        $response = yield $this->webGetRestApi ($params);
        $sections = explode('<h1 id="symbols-and-minimums">Symbols and minimums</h1>', $response);
        $numSections = is_array($sections) ? count($sections) : 0;
        $error = $this->id . ' fetchMarketsFromWeb() the ' . $this->name . ' API doc HTML markup has changed, breaking the parser of order limits and precision info for ' . $this->name . ' markets.';
        if ($numSections !== 2) {
            throw new NotSupported($error);
        }
        $tables = explode('tbody>', $sections[1]);
        $numTables = is_array($tables) ? count($tables) : 0;
        if ($numTables < 2) {
            throw new NotSupported($error);
        }
        $rows = explode("\n<tr>\n", $tables[1]); // eslint-disable-line quotes
        $numRows = is_array($rows) ? count($rows) : 0;
        if ($numRows < 2) {
            throw new NotSupported($error);
        }
        $result = array();
        // skip the first element (empty string)
        for ($i = 1; $i < $numRows; $i++) {
            $row = $rows[$i];
            $cells = explode("</td>\n", $row); // eslint-disable-line quotes
            $numCells = is_array($cells) ? count($cells) : 0;
            if ($numCells < 5) {
                throw new NotSupported($error);
            }
            //     array(
            //         '<td>btcusd', // currency
            //         '<td>0.00001 BTC (1e-5)', // min order size
            //         '<td>0.00000001 BTC (1e-8)', // tick size
            //         '<td>0.01 USD', // $quote currency price increment
            //         '</tr>'
            //     )
            $marketId = str_replace('<td>', '', $cells[0]);
            // $base = $this->safe_currency_code($baseId);
            $minAmountString = str_replace('<td>', '', $cells[1]);
            $minAmountParts = explode(' ', $minAmountString);
            $minAmount = $this->safe_number($minAmountParts, 0);
            $amountPrecisionString = str_replace('<td>', '', $cells[2]);
            $amountPrecisionParts = explode(' ', $amountPrecisionString);
            $idLength = strlen($marketId) - 0;
            $startingIndex = $idLength - 3;
            $pricePrecisionString = str_replace('<td>', '', $cells[3]);
            $pricePrecisionParts = explode(' ', $pricePrecisionString);
            $quoteId = $this->safe_string_lower($pricePrecisionParts, 1, mb_substr($marketId, $startingIndex, $idLength - $startingIndex));
            $baseId = $this->safe_string_lower($amountPrecisionParts, 1, str_replace($quoteId, '', $marketId));
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $result[] = array(
                'id' => $marketId,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => null,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_number($amountPrecisionParts, 0),
                    'price' => $this->safe_number($pricePrecisionParts, 0),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $minAmount,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $row,
            );
        }
        return $result;
    }

    public function fetch_markets_from_api($params = array ()) {
        $response = yield $this->publicGetV1Symbols ($params);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $marketId = $response[$i];
            $market = $marketId;
            $idLength = strlen($marketId) - 0;
            $baseId = mb_substr($marketId, 0, $idLength - 3 - 0);
            $quoteId = mb_substr($marketId, $idLength - 3, $idLength - $idLength - 3);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $result[] = array(
                'id' => $marketId,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => null,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'price' => null,
                    'amount' => null,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by market symbols
         */
        yield $this->load_markets();
        $request = array(
            'symbol' => $this->market_id($symbol),
        );
        if ($limit !== null) {
            $request['limit_bids'] = $limit;
            $request['limit_asks'] = $limit;
        }
        $response = yield $this->publicGetV1BookSymbol (array_merge($request, $params));
        return $this->parse_order_book($response, $symbol, null, 'bids', 'asks', 'price', 'amount');
    }

    public function fetch_ticker_v1($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetV1PubtickerSymbol (array_merge($request, $params));
        //
        //     {
        //         "bid":"9117.95",
        //         "ask":"9117.96",
        //         "volume":array(
        //             "BTC":"1615.46861748",
        //             "USD":"14727307.57545006088",
        //             "timestamp":1594982700000
        //         ),
        //         "last":"9115.23"
        //     }
        //
        return $this->parse_ticker($response, $market);
    }

    public function fetch_ticker_v2($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetV2TickerSymbol (array_merge($request, $params));
        //
        //     {
        //         "symbol":"BTCUSD",
        //         "open":"9080.58",
        //         "high":"9184.53",
        //         "low":"9063.56",
        //         "close":"9116.08",
        //         // Hourly prices descending for past 24 hours
        //         "changes":["9117.33","9105.69","9106.23","9120.35","9098.57","9114.53","9113.55","9128.01","9113.63","9133.49","9133.49","9137.75","9126.73","9103.91","9119.33","9123.04","9124.44","9117.57","9114.22","9102.33","9076.67","9074.72","9074.97","9092.05"],
        //         "bid":"9115.86",
        //         "ask":"9115.87"
        //     }
        //
        return $this->parse_ticker($response, $market);
    }

    public function fetch_ticker_v1_and_v2($symbol, $params = array ()) {
        $tickerA = yield $this->fetch_ticker_v1($symbol, $params);
        $tickerB = yield $this->fetch_ticker_v2($symbol, $params);
        return $this->deep_extend($tickerA, array(
            'open' => $tickerB['open'],
            'high' => $tickerB['high'],
            'low' => $tickerB['low'],
            'change' => $tickerB['change'],
            'percentage' => $tickerB['percentage'],
            'average' => $tickerB['average'],
            'info' => $tickerB['info'],
        ));
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {str} $symbol unified $symbol of the market to fetch the ticker for
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        $method = $this->safe_value($this->options, 'fetchTickerMethod', 'fetchTickerV1');
        return yield $this->$method ($symbol, $params);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // fetchTickers
        //
        //     {
        //         "pair" => "BATUSD",
        //         "price" => "0.20687",
        //         "percentChange24h" => "0.0146"
        //     }
        //
        // fetchTickerV1
        //
        //     {
        //         "bid":"9117.95",
        //         "ask":"9117.96",
        //         "volume":array(
        //             "BTC":"1615.46861748",
        //             "USD":"14727307.57545006088",
        //             "timestamp":1594982700000
        //         ),
        //         "last":"9115.23"
        //     }
        //
        // fetchTickerV2
        //
        //     {
        //         "symbol":"BTCUSD",
        //         "open":"9080.58",
        //         "high":"9184.53",
        //         "low":"9063.56",
        //         "close":"9116.08",
        //         // Hourly prices descending for past 24 hours
        //         "changes":["9117.33","9105.69","9106.23","9120.35","9098.57","9114.53","9113.55","9128.01","9113.63","9133.49","9133.49","9137.75","9126.73","9103.91","9119.33","9123.04","9124.44","9117.57","9114.22","9102.33","9076.67","9074.72","9074.97","9092.05"],
        //         "bid":"9115.86",
        //         "ask":"9115.87"
        //     }
        //
        $volume = $this->safe_value($ticker, 'volume', array());
        $timestamp = $this->safe_integer($volume, 'timestamp');
        $symbol = null;
        $marketId = $this->safe_string_lower($ticker, 'pair');
        $market = $this->safe_market($marketId, $market);
        $baseId = null;
        $quoteId = null;
        $base = null;
        $quote = null;
        if (($marketId !== null) && ($market === null)) {
            $idLength = strlen($marketId) - 0;
            if ($idLength === 7) {
                $baseId = mb_substr($marketId, 0, 4 - 0);
                $quoteId = mb_substr($marketId, 4, 7 - 4);
            } else {
                $baseId = mb_substr($marketId, 0, 3 - 0);
                $quoteId = mb_substr($marketId, 3, 6 - 3);
            }
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
        }
        if (($symbol === null) && ($market !== null)) {
            $symbol = $market['symbol'];
            $baseId = $this->safe_string_upper($market, 'baseId');
            $quoteId = $this->safe_string_upper($market, 'quoteId');
        }
        $price = $this->safe_string($ticker, 'price');
        $last = $this->safe_string_2($ticker, 'last', 'close', $price);
        $percentage = $this->safe_string($ticker, 'percentChange24h');
        $open = $this->safe_string($ticker, 'open');
        $baseVolume = $this->safe_string($volume, $baseId);
        $quoteVolume = $this->safe_string($volume, $quoteId);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null, // previous day close
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structures}
         */
        yield $this->load_markets();
        $response = yield $this->publicGetV1Pricefeed ($params);
        //
        //     array(
        //         array(
        //             "pair" => "BATUSD",
        //             "price" => "0.20687",
        //             "percentChange24h" => "0.0146"
        //         ),
        //         array(
        //             "pair" => "LINKETH",
        //             "price" => "0.018",
        //             "percentChange24h" => "0.0000"
        //         ),
        //     )
        //
        return $this->parse_tickers($response, $symbols);
    }

    public function parse_trade($trade, $market = null) {
        //
        // public fetchTrades
        //
        //     {
        //         "timestamp":1601617445,
        //         "timestampms":1601617445144,
        //         "tid":14122489752,
        //         "price":"0.46476",
        //         "amount":"28.407209",
        //         "exchange":"gemini",
        //         "type":"buy"
        //     }
        //
        // private fetchTrades
        //
        //      {
        //          "price":"3900.00",
        //          "amount":"0.00996",
        //          "timestamp":1638891173,
        //          "timestampms":1638891173518,
        //          "type":"Sell",
        //          "aggressor":false,
        //          "fee_currency":"EUR",
        //          "fee_amount":"0.00",
        //          "tid":73621746145,
        //          "order_id":"73621746059",
        //          "exchange":"gemini",
        //          "is_auction_fill":false,
        //          "is_clearing_fill":false,
        //          "symbol":"ETHEUR",
        //          "client_order_id":"1638891171610"
        //      }
        //
        $timestamp = $this->safe_integer($trade, 'timestampms');
        $id = $this->safe_string($trade, 'tid');
        $orderId = $this->safe_string($trade, 'order_id');
        $feeCurrencyId = $this->safe_string($trade, 'fee_currency');
        $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
        $fee = array(
            'cost' => $this->safe_string($trade, 'fee_amount'),
            'currency' => $feeCurrencyCode,
        );
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $side = $this->safe_string_lower($trade, 'type');
        $symbol = $this->safe_symbol(null, $market);
        return $this->safe_trade(array(
            'id' => $id,
            'order' => $orderId,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $priceString,
            'cost' => null,
            'amount' => $amountString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of trades to fetch
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetV1TradesSymbol (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "timestamp":1601617445,
        //             "timestampms":1601617445144,
        //             "tid":14122489752,
        //             "price":"0.46476",
        //             "amount":"28.407209",
        //             "exchange":"gemini",
        //             "type":"buy"
        //         ),
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_balance($response) {
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['total'] = $this->safe_string($balance, 'amount');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_trading_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privatePostV1Notionalvolume ($params);
        //
        //      {
        //          "web_maker_fee_bps" => 25,
        //          "web_taker_fee_bps" => 35,
        //          "web_auction_fee_bps" => 25,
        //          "api_maker_fee_bps" => 10,
        //          "api_taker_fee_bps" => 35,
        //          "api_auction_fee_bps" => 20,
        //          "fix_maker_fee_bps" => 10,
        //          "fix_taker_fee_bps" => 35,
        //          "fix_auction_fee_bps" => 20,
        //          "block_maker_fee_bps" => 0,
        //          "block_taker_fee_bps" => 50,
        //          "notional_30d_volume" => 150.00,
        //          "last_updated_ms" => 1551371446000,
        //          "date" => "2019-02-28",
        //          "notional_1d_volume" => array(
        //              array(
        //                  "date" => "2019-02-22",
        //                  "notional_volume" => 75.00
        //              ),
        //              {
        //                  "date" => "2019-02-14",
        //                  "notional_volume" => 75.00
        //              }
        //          )
        //     }
        //
        $makerBps = $this->safe_string($response, 'api_maker_fee_bps');
        $takerBps = $this->safe_string($response, 'api_taker_fee_bps');
        $makerString = Precise::string_div($makerBps, '10000');
        $takerString = Precise::string_div($takerBps, '10000');
        $maker = $this->parse_number($makerString);
        $taker = $this->parse_number($takerString);
        $result = array();
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $result[$symbol] = array(
                'info' => $response,
                'symbol' => $symbol,
                'maker' => $maker,
                'taker' => $taker,
                'percentage' => true,
                'tierBased' => true,
            );
        }
        return $result;
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        yield $this->load_markets();
        $response = yield $this->privatePostV1Balances ($params);
        return $this->parse_balance($response);
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder (private)
        //
        //      {
        //          "order_id":"106027397702",
        //          "id":"106027397702",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"2877.48",
        //          "side":"sell",
        //          "type":"exchange limit",
        //          "timestamp":"1650398122",
        //          "timestampms":1650398122308,
        //          "is_live":false,
        //          "is_cancelled":false,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0.014434",
        //          "client_order_id":"1650398121695",
        //          "options":array(),
        //          "price":"2800.00",
        //          "original_amount":"0.014434",
        //          "remaining_amount":"0"
        //      }
        //
        // fetchOrder (private)
        //
        //      {
        //          "order_id":"106028543717",
        //          "id":"106028543717",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"0.00",
        //          "side":"buy",
        //          "type":"exchange limit",
        //          "timestamp":"1650398446",
        //          "timestampms":1650398446375,
        //          "is_live":true,
        //          "is_cancelled":false,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0",
        //          "client_order_id":"1650398445709",
        //          "options":array(),
        //          "price":"2000.00",
        //          "original_amount":"0.01",
        //          "remaining_amount":"0.01"
        //      }
        //
        // fetchOpenOrders (private)
        //
        //      {
        //          "order_id":"106028543717",
        //          "id":"106028543717",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"0.00",
        //          "side":"buy",
        //          "type":"exchange limit",
        //          "timestamp":"1650398446",
        //          "timestampms":1650398446375,
        //          "is_live":true,
        //          "is_cancelled":false,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0",
        //          "client_order_id":"1650398445709",
        //          "options":array(),
        //          "price":"2000.00",
        //          "original_amount":"0.01",
        //          "remaining_amount":"0.01"
        //      }
        //
        // cancelOrder (private)
        //
        //      {
        //          "order_id":"106028543717",
        //          "id":"106028543717",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"0.00",
        //          "side":"buy",
        //          "type":"exchange limit",
        //          "timestamp":"1650398446",
        //          "timestampms":1650398446375,
        //          "is_live":false,
        //          "is_cancelled":true,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0",
        //          "client_order_id":"1650398445709",
        //          "reason":"Requested",
        //          "options":array(),
        //          "price":"2000.00",
        //          "original_amount":"0.01",
        //          "remaining_amount":"0.01"
        //      }
        //
        $timestamp = $this->safe_integer($order, 'timestampms');
        $amount = $this->safe_string($order, 'original_amount');
        $remaining = $this->safe_string($order, 'remaining_amount');
        $filled = $this->safe_string($order, 'executed_amount');
        $status = 'closed';
        if ($order['is_live']) {
            $status = 'open';
        }
        if ($order['is_cancelled']) {
            $status = 'canceled';
        }
        $price = $this->safe_string($order, 'price');
        $average = $this->safe_string($order, 'avg_execution_price');
        $type = $this->safe_string($order, 'type');
        if ($type === 'exchange limit') {
            $type = 'limit';
        } elseif ($type === 'market buy' || $type === 'market sell') {
            $type = 'market';
        } else {
            $type = $order['type'];
        }
        $fee = null;
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $id = $this->safe_string($order, 'order_id');
        $side = $this->safe_string_lower($order, 'side');
        $clientOrderId = $this->safe_string($order, 'client_order_id');
        $optionsArray = $this->safe_value($order, 'options', array());
        $option = $this->safe_string($optionsArray, 0);
        $timeInForce = 'GTC';
        $postOnly = false;
        if ($option !== null) {
            if ($option === 'immediate-or-cancel') {
                $timeInForce = 'IOC';
            } elseif ($option === 'fill-or-kill') {
                $timeInForce = 'FOK';
            } elseif ($option === 'maker-or-cancel') {
                $timeInForce = 'PO';
                $postOnly = true;
            }
        }
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'info' => $order,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce, // default set to GTC
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'average' => $average,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        $response = yield $this->privatePostV1OrderStatus (array_merge($request, $params));
        //
        //      {
        //          "order_id":"106028543717",
        //          "id":"106028543717",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"0.00",
        //          "side":"buy",
        //          "type":"exchange limit",
        //          "timestamp":"1650398446",
        //          "timestampms":1650398446375,
        //          "is_live":true,
        //          "is_cancelled":false,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0",
        //          "client_order_id":"1650398445709",
        //          "options":array(),
        //          "price":"2000.00",
        //          "original_amount":"0.01",
        //          "remaining_amount":"0.01"
        //      }
        //
        return $this->parse_order($response);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privatePostV1Orders ($params);
        //
        //      array(
        //          {
        //              "order_id":"106028543717",
        //              "id":"106028543717",
        //              "symbol":"etheur",
        //              "exchange":"gemini",
        //              "avg_execution_price":"0.00",
        //              "side":"buy",
        //              "type":"exchange $limit",
        //              "timestamp":"1650398446",
        //              "timestampms":1650398446375,
        //              "is_live":true,
        //              "is_cancelled":false,
        //              "is_hidden":false,
        //              "was_forced":false,
        //              "executed_amount":"0",
        //              "client_order_id":"1650398445709",
        //              "options":array(),
        //              "price":"2000.00",
        //              "original_amount":"0.01",
        //              "remaining_amount":"0.01"
        //          }
        //      )
        //
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol); // throws on non-existent $symbol
        }
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        if ($type === 'market') {
            throw new ExchangeError($this->id . ' createOrder() allows limit orders only');
        }
        $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'client_order_id');
        $params = $this->omit($params, array( 'clientOrderId', 'client_order_id' ));
        if ($clientOrderId === null) {
            $clientOrderId = $this->nonce();
        }
        $amountString = $this->amount_to_precision($symbol, $amount);
        $priceString = $this->price_to_precision($symbol, $price);
        $request = array(
            'client_order_id' => (string) $clientOrderId,
            'symbol' => $this->market_id($symbol),
            'amount' => $amountString,
            'price' => $priceString,
            'side' => $side,
            'type' => 'exchange limit', // gemini allows limit orders only
            // 'options' => array(), one of =>  maker-or-cancel, immediate-or-cancel, fill-or-kill, auction-only, indication-of-interest
        );
        $type = $this->safe_string($params, 'type', $type);
        $params = $this->omit($params, 'type');
        $rawStopPrice = $this->safe_string_2($params, 'stop_price', 'stopPrice');
        $params = $this->omit($params, array( 'stop_price', 'stopPrice', 'type' ));
        if ($type === 'stopLimit') {
            throw new ArgumentsRequired($this->id . ' createOrder() requires a stopPrice parameter or a stop_price parameter for ' . $type . ' orders');
        }
        if ($rawStopPrice !== null) {
            $request['stop_price'] = $this->price_to_precision($symbol, $rawStopPrice);
            $request['type'] = 'exchange stop limit';
        } else {
            // No $options can be applied to stop-limit orders at this time.
            $timeInForce = $this->safe_string($params, 'timeInForce');
            $params = $this->omit($params, 'timeInForce');
            if ($timeInForce !== null) {
                if (($timeInForce === 'IOC') || ($timeInForce === 'immediate-or-cancel')) {
                    $request['options'] = array( 'immediate-or-cancel' );
                } elseif (($timeInForce === 'FOK') || ($timeInForce === 'fill-or-kill')) {
                    $request['options'] = array( 'fill-or-kill' );
                } elseif ($timeInForce === 'PO') {
                    $request['options'] = array( 'maker-or-cancel' );
                }
            }
            $postOnly = $this->safe_value($params, 'postOnly', false);
            $params = $this->omit($params, 'postOnly');
            if ($postOnly) {
                $request['options'] = array( 'maker-or-cancel' );
            }
            // allowing override for auction-only and indication-of-interest order $options
            $options = $this->safe_string($params, 'options');
            if ($options !== null) {
                $request['options'] = array( $options );
            }
        }
        $response = yield $this->privatePostV1OrderNew (array_merge($request, $params));
        //
        //      {
        //          "order_id":"106027397702",
        //          "id":"106027397702",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"2877.48",
        //          "side":"sell",
        //          "type":"exchange limit",
        //          "timestamp":"1650398122",
        //          "timestampms":1650398122308,
        //          "is_live":false,
        //          "is_cancelled":false,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0.014434",
        //          "client_order_id":"1650398121695",
        //          "options":array(),
        //          "price":"2800.00",
        //          "original_amount":"0.014434",
        //          "remaining_amount":"0"
        //      }
        //
        return $this->parse_order($response);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        $response = yield $this->privatePostV1OrderCancel (array_merge($request, $params));
        //
        //      {
        //          "order_id":"106028543717",
        //          "id":"106028543717",
        //          "symbol":"etheur",
        //          "exchange":"gemini",
        //          "avg_execution_price":"0.00",
        //          "side":"buy",
        //          "type":"exchange limit",
        //          "timestamp":"1650398446",
        //          "timestampms":1650398446375,
        //          "is_live":false,
        //          "is_cancelled":true,
        //          "is_hidden":false,
        //          "was_forced":false,
        //          "executed_amount":"0",
        //          "client_order_id":"1650398445709",
        //          "reason":"Requested",
        //          "options":array(),
        //          "price":"2000.00",
        //          "original_amount":"0.01",
        //          "remaining_amount":"0.01"
        //      }
        //
        return $this->parse_order($response);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit_trades'] = $limit;
        }
        if ($since !== null) {
            $request['timestamp'] = intval($since / 1000);
        }
        $response = yield $this->privatePostV1Mytrades (array_merge($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address,
        );
        $response = yield $this->privatePostV1WithdrawCurrency (array_merge($request, $params));
        //
        //   for BTC
        //     {
        //         "address":"mi98Z9brJ3TgaKsmvXatuRahbFRUFKRUdR",
        //         "amount":"1",
        //         "withdrawalId":"02176a83-a6b1-4202-9b85-1c1c92dd25c4",
        //         "message":"You have requested a transfer of 1 BTC to mi98Z9brJ3TgaKsmvXatuRahbFRUFKRUdR. This withdrawal will be sent to the blockchain within the next 60 seconds."
        //     }
        //
        //   for ETH
        //     {
        //         "address":"0xA63123350Acc8F5ee1b1fBd1A6717135e82dBd28",
        //         "amount":"2.34567",
        //         "txHash":"0x28267179f92926d85c5516bqc063b2631935573d8915258e95d9572eedcc8cc"
        //     }
        //
        //   for error (other variations of error messages are also expected)
        //     {
        //         "result":"error",
        //         "reason":"CryptoAddressWhitelistsNotEnabled",
        //         "message":"Cryptocurrency withdrawal $address whitelists are not enabled for account 24. Please contact support@gemini.com for information on setting up a withdrawal $address whitelist."
        //     }
        //
        $result = $this->safe_string($response, 'result');
        if ($result === 'error') {
            throw new ExchangeError($this->id . ' withdraw() failed => ' . $this->json($response));
        }
        return $this->parse_transaction($response, $currency);
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function fetch_transactions($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        if ($limit !== null) {
            $request['limit_transfers'] = $limit;
        }
        if ($since !== null) {
            $request['timestamp'] = $since;
        }
        $response = yield $this->privatePostV1Transfers (array_merge($request, $params));
        return $this->parse_transactions($response);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // withdraw
        //
        //   for BTC
        //     {
        //         "address":"mi98Z9brJ3TgaKsmvXatuRahbFRUFKRUdR",
        //         "amount":"1",
        //         "withdrawalId":"02176a83-a6b1-4202-9b85-1c1c92dd25c4",
        //         "message":"You have requested a transfer of 1 BTC to mi98Z9brJ3TgaKsmvXatuRahbFRUFKRUdR. This withdrawal will be sent to the blockchain within the next 60 seconds."
        //     }
        //
        //   for ETH
        //     {
        //         "address":"0xA63123350Acc8F5ee1b1fBd1A6717135e82dBd28",
        //         "amount":"2.34567",
        //         "txHash":"0x28267179f92926d85c5516bqc063b2631935573d8915258e95d9572eedcc8cc"
        //     }
        //
        $timestamp = $this->safe_integer($transaction, 'timestampms');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $address = $this->safe_string($transaction, 'destination');
        $type = $this->safe_string_lower($transaction, 'type');
        // if status field is available, then it's complete
        $statusRaw = $this->safe_string($transaction, 'status');
        $fee = null;
        $feeAmount = $this->safe_number($transaction, 'feeAmount');
        if ($feeAmount !== null) {
            $fee = array(
                'cost' => $feeAmount,
                'currency' => $code,
            );
        }
        return array(
            'info' => $transaction,
            'id' => $this->safe_string_2($transaction, 'eid', 'withdrawalId'),
            'txid' => $this->safe_string($transaction, 'txHash'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => null, // or is it defined?
            'tagTo' => null,
            'tagFrom' => null,
            'type' => $type, // direction of the $transaction, ('deposit' | 'withdraw')
            'amount' => $this->safe_number($transaction, 'amount'),
            'currency' => $code,
            'status' => $this->parse_transaction_status($statusRaw),
            'updated' => null,
            'fee' => $fee,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'Advanced' => 'ok',
            'Complete' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        //
        //      {
        //          $address => "0xed6494Fe7c1E56d1bd6136e89268C51E32d9708B",
        //          timestamp => "1636813923098",
        //          addressVersion => "eV1"                                         }
        //      }
        //
        $address = $this->safe_string($depositAddress, 'address');
        $code = $this->safe_currency_code(null, $currency);
        return array(
            'currency' => $code,
            'network' => null,
            'address' => $address,
            'tag' => null,
            'info' => $depositAddress,
        );
    }

    public function fetch_deposit_addresses_by_network($code, $params = array ()) {
        yield $this->load_markets();
        $network = $this->safe_string($params, 'network');
        if ($network === null) {
            throw new ArgumentsRequired($this->id . ' fetchDepositAddressesByNetwork() requires a $network parameter');
        }
        $params = $this->omit($params, 'network');
        $networks = $this->safe_value($this->options, 'networks', array());
        $networkId = $this->safe_string($networks, $network, $network);
        $networkIds = $this->safe_value($this->options, 'networkIds', array());
        $networkCode = $this->safe_string($networkIds, $networkId, $network);
        $request = array(
            'network' => $networkId,
        );
        $response = yield $this->privatePostV1AddressesNetwork (array_merge($request, $params));
        $results = $this->parse_deposit_addresses($response, array( $code ), false, array( 'network' => $networkCode, 'currency' => $code ));
        return $this->group_by($results, 'network');
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'private') {
            $this->check_required_credentials();
            $apiKey = $this->apiKey;
            if (mb_strpos($apiKey, 'account') === false) {
                throw new AuthenticationError($this->id . ' sign() requires an account-key, master-keys are not-supported');
            }
            $nonce = $this->nonce();
            $request = array_merge(array(
                'request' => $url,
                'nonce' => $nonce,
            ), $query);
            $payload = $this->json($request);
            $payload = base64_encode($payload);
            $signature = $this->hmac($payload, $this->encode($this->secret), 'sha384');
            $headers = array(
                'Content-Type' => 'text/plain',
                'X-GEMINI-APIKEY' => $this->apiKey,
                'X-GEMINI-PAYLOAD' => $this->decode($payload),
                'X-GEMINI-SIGNATURE' => $signature,
            );
        } else {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        }
        $url = $this->urls['api'][$api] . $url;
        if (($method === 'POST') || ($method === 'DELETE')) {
            $body = $this->json($query);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            if (gettype($body) === 'string') {
                $feedback = $this->id . ' ' . $body;
                $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
            }
            return; // fallback to default error handler
        }
        //
        //     {
        //         "result" => "error",
        //         "reason" => "BadNonce",
        //         "message" => "Out-of-sequence nonce <1234> precedes previously used nonce <2345>"
        //     }
        //
        $result = $this->safe_string($response, 'result');
        if ($result === 'error') {
            $reason = $this->safe_string($response, 'reason');
            $message = $this->safe_string($response, 'message');
            $feedback = $this->id . ' ' . $message;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $reason, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }

    public function create_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privatePostV1DepositCurrencyNewAddress (array_merge($request, $params));
        $address = $this->safe_string($response, 'address');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => null,
            'info' => $response,
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '5m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the gemini api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'timeframe' => $this->timeframes[$timeframe],
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetV2CandlesSymbolTimeframe (array_merge($request, $params));
        //
        //     [
        //         [1591515000000,0.02509,0.02509,0.02509,0.02509,0],
        //         [1591514700000,0.02503,0.02509,0.02503,0.02509,44.6405],
        //         [1591514400000,0.02503,0.02503,0.02503,0.02503,0],
        //     ]
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }
}
