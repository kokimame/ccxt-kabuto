<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\BadSymbol;
use \ccxt\InvalidOrder;
use \ccxt\NotSupported;
use \ccxt\Precise;

class gateio extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'gateio',
            'name' => 'Gate.io',
            'countries' => array( 'KR' ),
            'rateLimit' => 10 / 3, // 300 requests per second or 3.33ms
            'version' => 'v4',
            'certified' => true,
            'pro' => true,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',
                'doc' => 'https://www.gate.io/docs/apiv4/en/index.html',
                'www' => 'https://gate.io/',
                'api' => array(
                    'public' => array(
                        'wallet' => 'https://api.gateio.ws/api/v4',
                        'futures' => 'https://api.gateio.ws/api/v4',
                        'margin' => 'https://api.gateio.ws/api/v4',
                        'delivery' => 'https://api.gateio.ws/api/v4',
                        'spot' => 'https://api.gateio.ws/api/v4',
                        'options' => 'https://api.gateio.ws/api/v4',
                    ),
                    'private' => array(
                        'withdrawals' => 'https://api.gateio.ws/api/v4',
                        'wallet' => 'https://api.gateio.ws/api/v4',
                        'futures' => 'https://api.gateio.ws/api/v4',
                        'margin' => 'https://api.gateio.ws/api/v4',
                        'delivery' => 'https://api.gateio.ws/api/v4',
                        'spot' => 'https://api.gateio.ws/api/v4',
                        'options' => 'https://api.gateio.ws/api/v4',
                    ),
                ),
                'test' => array(
                    'public' => array(
                        'futures' => 'https://fx-api-testnet.gateio.ws/api/v4',
                        'delivery' => 'https://fx-api-testnet.gateio.ws/api/v4',
                    ),
                    'private' => array(
                        'futures' => 'https://fx-api-testnet.gateio.ws/api/v4',
                        'delivery' => 'https://fx-api-testnet.gateio.ws/api/v4',
                    ),
                ),
                'referral' => array(
                    'url' => 'https://www.gate.io/ref/2436035',
                    'discount' => 0.2,
                ),
            ),
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => null,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createMarketOrder' => false,
                'createOrder' => true,
                'createPostOnlyOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => false,
                'createStopOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => true,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => true,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyTrades' => true,
                'fetchNetworkDepositAddress' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactionFees' => true,
                'fetchWithdrawals' => true,
                'setLeverage' => true,
                'setMarginMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'api' => array(
                'public' => array(
                    'wallet' => array(
                        'get' => array(
                            'wallet/currency_chains' => 1.5,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'currencies' => 1,
                            'currencies/{currency}' => 1,
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'tickers' => 1,
                            'order_book' => 1,
                            'trades' => 1,
                            'candlesticks' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'cross/currencies' => 1,
                            'cross/currencies/{currency}' => 1,
                            'funding_book' => 1,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/funding_rate' => 1.5,
                            '{settle}/insurance' => 1.5,
                            '{settle}/contract_stats' => 1.5,
                            '{settle}/liq_orders' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/insurance' => 1.5,
                        ),
                    ),
                    'options' => array(
                        'get' => array(
                            'underlyings' => 1.5,
                            'expirations' => 1.5,
                            'contracts' => 1.5,
                            'contracts/{contract}' => 1.5,
                            'settlements' => 1.5,
                            'settlements/{contract}' => 1.5,
                            'order_book' => 1.5,
                            'tickers' => 1.5,
                            'underlying/tickers/{underlying}' => 1.5,
                            'candlesticks' => 1.5,
                            'underlying/candlesticks' => 1.5,
                            'trades' => 1.5,
                        ),
                    ),
                ),
                'private' => array(
                    'withdrawals' => array(
                        'post' => array(
                            '' => 3000, // 3000 = 10 seconds
                        ),
                        'delete' => array(
                            '{withdrawal_id}' => 300,
                        ),
                    ),
                    'wallet' => array(
                        'get' => array(
                            'deposit_address' => 300,
                            'withdrawals' => 300,
                            'deposits' => 300,
                            'sub_account_transfers' => 300,
                            'withdraw_status' => 300,
                            'sub_account_balances' => 300,
                            'fee' => 300,
                            'total_balance' => 300,
                        ),
                        'post' => array(
                            'transfers' => 300,
                            'sub_account_transfers' => 300,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'accounts' => 1,
                            'open_orders' => 1,
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'my_trades' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                        'post' => array(
                            'batch_orders' => 1,
                            'orders' => 1,
                            'cancel_batch_orders' => 1,
                            'price_orders' => 1,
                        ),
                        'delete' => array(
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'accounts' => 1.5,
                            'account_book' => 1.5,
                            'funding_accounts' => 1.5,
                            'loans' => 1.5,
                            'loans/{loan_id}' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'loan_records' => 1.5,
                            'loan_records/{load_record_id}' => 1.5,
                            'auto_repay' => 1.5,
                            'transferable' => 1.5,
                            'cross/accounts' => 1.5,
                            'cross/account_book' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/{loan_id}' => 1.5,
                            'cross/loans/repayments' => 1.5,
                            'cross/transferable' => 1.5,
                            'loan_records/{loan_record_id}' => 1.5,
                            'borrowable' => 1.5,
                            'cross/repayments' => 1.5,
                            'cross/borrowable' => 1.5,
                        ),
                        'post' => array(
                            'loans' => 1.5,
                            'merged_loans' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'auto_repay' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/repayments' => 1.5,
                            'cross/repayments' => 1.5,
                        ),
                        'patch' => array(
                            'loans/{loan_id}' => 1.5,
                            'loan_records/{loan_record_id}' => 1.5,
                        ),
                        'delete' => array(
                            'loans/{loan_id}' => 1.5,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                            '{settle}/dual_comp/positions/{contract}' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/dual_mode' => 1.5,
                            '{settle}/dual_comp/positions/{contract}' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/margin' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/leverage' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/price_orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                            '{settle}/settlements' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/price_orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                    'options' => array(
                        'get' => array(
                            'accounts' => 1.5,
                            'account_book' => 1.5,
                            'positions' => 1.5,
                            'positions/{contract}' => 1.5,
                            'position_close' => 1.5,
                            'orders' => 1.5,
                            'orders/{order_id}' => 1.5,
                            'my_trades' => 1.5,
                        ),
                        'post' => array(
                            'orders' => 1.5,
                        ),
                        'delete' => array(
                            'orders' => 1.5,
                            'orders/{order_id}' => 1.5,
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '10s' => '10s',
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '8h' => '8h',
                '1d' => '1d',
                '7d' => '7d',
                '1w' => '7d',
            ),
            // copied from gateiov2
            'commonCurrencies' => array(
                '88MPH' => 'MPH',
                'AXIS' => 'Axis DeFi',
                'BIFI' => 'Bitcoin File',
                'BOX' => 'DefiBox',
                'BTCBEAR' => 'BEAR',
                'BTCBULL' => 'BULL',
                'BYN' => 'BeyondFi',
                'EGG' => 'Goose Finance',
                'GTC' => 'Game.com', // conflict with Gitcoin and Gastrocoin
                'GTC_HT' => 'Game.com HT',
                'GTC_BSC' => 'Game.com BSC',
                'HIT' => 'HitChain',
                'MM' => 'Million', // conflict with MilliMeter
                'MPH' => 'Morpher', // conflict with 88MPH
                'RAI' => 'Rai Reflex Index', // conflict with RAI Finance
                'SBTC' => 'Super Bitcoin',
                'TNC' => 'Trinity Network Credit',
                'TON' => 'TONToken',
                'VAI' => 'VAIOT',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'headers' => array(
                'X-Gate-Channel-Id' => 'ccxt',
            ),
            'options' => array(
                'createOrder' => array(
                    'expiration' => 86400, // for conditional orders
                ),
                'networks' => array(
                    'TRC20' => 'TRX',
                    'ERC20' => 'ETH',
                    'BEP20' => 'BSC',
                ),
                'accountsByType' => array(
                    'funding' => 'spot',
                    'spot' => 'spot',
                    'margin' => 'margin',
                    'cross_margin' => 'cross_margin',
                    'cross' => 'cross_margin',
                    'isolated' => 'margin',
                    'swap' => 'futures',
                    'future' => 'delivery',
                    'futures' => 'futures',
                    'delivery' => 'delivery',
                ),
                'defaultType' => 'spot',
                'swap' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
                'future' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'feeSide' => 'get',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                    'tiers' => array(
                        // volume is in BTC
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00055') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00195') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00065') ),
                        ),
                    ),
                ),
                'swap' => array(
                    'tierBased' => true,
                    'feeSide' => 'base',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0'),
                    'taker' => $this->parse_number('0.0005'),
                    'tiers' => array(
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0000') ),
                            array( $this->parse_number('1.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('6'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('12.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('25'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('75'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('200'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('1250'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('2500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3000'), $this->parse_number('-0.00008') ),
                            array( $this->parse_number('6000'), $this->parse_number('-0.01000') ),
                            array( $this->parse_number('11000'), $this->parse_number('-0.01002') ),
                            array( $this->parse_number('20000'), $this->parse_number('-0.01005') ),
                            array( $this->parse_number('40000'), $this->parse_number('-0.02000') ),
                            array( $this->parse_number('75000'), $this->parse_number('-0.02005') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.00050') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00048') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00046') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00044') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00042') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00040') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00038') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00036') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00034') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00032') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00030') ),
                        ),
                    ),
                ),
            ),
            // https://www.gate.io/docs/apiv4/en/index.html#label-list
            'exceptions' => array(
                'exact' => array(
                    'INVALID_PARAM_VALUE' => '\\ccxt\\BadRequest',
                    'INVALID_PROTOCOL' => '\\ccxt\\BadRequest',
                    'INVALID_ARGUMENT' => '\\ccxt\\BadRequest',
                    'INVALID_REQUEST_BODY' => '\\ccxt\\BadRequest',
                    'MISSING_REQUIRED_PARAM' => '\\ccxt\\ArgumentsRequired',
                    'BAD_REQUEST' => '\\ccxt\\BadRequest',
                    'INVALID_CONTENT_TYPE' => '\\ccxt\\BadRequest',
                    'NOT_ACCEPTABLE' => '\\ccxt\\BadRequest',
                    'METHOD_NOT_ALLOWED' => '\\ccxt\\BadRequest',
                    'NOT_FOUND' => '\\ccxt\\ExchangeError',
                    'INVALID_CREDENTIALS' => '\\ccxt\\AuthenticationError',
                    'INVALID_KEY' => '\\ccxt\\AuthenticationError',
                    'IP_FORBIDDEN' => '\\ccxt\\AuthenticationError',
                    'READ_ONLY' => '\\ccxt\\PermissionDenied',
                    'INVALID_SIGNATURE' => '\\ccxt\\AuthenticationError',
                    'MISSING_REQUIRED_HEADER' => '\\ccxt\\AuthenticationError',
                    'REQUEST_EXPIRED' => '\\ccxt\\AuthenticationError',
                    'ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                    'FORBIDDEN' => '\\ccxt\\PermissionDenied',
                    'SUB_ACCOUNT_NOT_FOUND' => '\\ccxt\\ExchangeError',
                    'SUB_ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                    'MARGIN_BALANCE_EXCEPTION' => '\\ccxt\\ExchangeError',
                    'MARGIN_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                    'TOO_MUCH_FUTURES_AVAILABLE' => '\\ccxt\\ExchangeError',
                    'FUTURES_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'ACCOUNT_EXCEPTION' => '\\ccxt\\ExchangeError',
                    'SUB_ACCOUNT_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                    'ADDRESS_NOT_USED' => '\\ccxt\\ExchangeError',
                    'TOO_FAST' => '\\ccxt\\RateLimitExceeded',
                    'WITHDRAWAL_OVER_LIMIT' => '\\ccxt\\ExchangeError',
                    'API_WITHDRAW_DISABLED' => '\\ccxt\\ExchangeNotAvailable',
                    'INVALID_WITHDRAW_ID' => '\\ccxt\\ExchangeError',
                    'INVALID_WITHDRAW_CANCEL_STATUS' => '\\ccxt\\ExchangeError',
                    'INVALID_PRECISION' => '\\ccxt\\InvalidOrder',
                    'INVALID_CURRENCY' => '\\ccxt\\BadSymbol',
                    'INVALID_CURRENCY_PAIR' => '\\ccxt\\BadSymbol',
                    'POC_FILL_IMMEDIATELY' => '\\ccxt\\OrderImmediatelyFillable', // array("label":"POC_FILL_IMMEDIATELY","message":"Order would match and take immediately so its cancelled")
                    'ORDER_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'CLIENT_ID_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'ORDER_CLOSED' => '\\ccxt\\InvalidOrder',
                    'ORDER_CANCELLED' => '\\ccxt\\InvalidOrder',
                    'QUANTITY_NOT_ENOUGH' => '\\ccxt\\InvalidOrder',
                    'BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'MARGIN_NOT_SUPPORTED' => '\\ccxt\\InvalidOrder',
                    'MARGIN_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                    'AMOUNT_TOO_LITTLE' => '\\ccxt\\InvalidOrder',
                    'AMOUNT_TOO_MUCH' => '\\ccxt\\InvalidOrder',
                    'REPEATED_CREATION' => '\\ccxt\\InvalidOrder',
                    'LOAN_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'LOAN_RECORD_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                    'NO_MATCHED_LOAN' => '\\ccxt\\ExchangeError',
                    'NOT_MERGEABLE' => '\\ccxt\\ExchangeError',
                    'NO_CHANGE' => '\\ccxt\\ExchangeError',
                    'REPAY_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'TOO_MANY_CURRENCY_PAIRS' => '\\ccxt\\InvalidOrder',
                    'TOO_MANY_ORDERS' => '\\ccxt\\InvalidOrder',
                    'MIXED_ACCOUNT_TYPE' => '\\ccxt\\InvalidOrder',
                    'AUTO_BORROW_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'TRADE_RESTRICTED' => '\\ccxt\\InsufficientFunds',
                    'USER_NOT_FOUND' => '\\ccxt\\AccountNotEnabled',
                    'CONTRACT_NO_COUNTER' => '\\ccxt\\ExchangeError',
                    'CONTRACT_NOT_FOUND' => '\\ccxt\\BadSymbol',
                    'RISK_LIMIT_EXCEEDED' => '\\ccxt\\ExchangeError',
                    'INSUFFICIENT_AVAILABLE' => '\\ccxt\\InsufficientFunds',
                    'LIQUIDATE_IMMEDIATELY' => '\\ccxt\\InvalidOrder',
                    'LEVERAGE_TOO_HIGH' => '\\ccxt\\InvalidOrder',
                    'LEVERAGE_TOO_LOW' => '\\ccxt\\InvalidOrder',
                    'ORDER_NOT_OWNED' => '\\ccxt\\ExchangeError',
                    'ORDER_FINISHED' => '\\ccxt\\ExchangeError',
                    'POSITION_CROSS_MARGIN' => '\\ccxt\\ExchangeError',
                    'POSITION_IN_LIQUIDATION' => '\\ccxt\\ExchangeError',
                    'POSITION_IN_CLOSE' => '\\ccxt\\ExchangeError',
                    'POSITION_EMPTY' => '\\ccxt\\InvalidOrder',
                    'REMOVE_TOO_MUCH' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_NOT_MULTIPLE' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_TOO_HIGH' => '\\ccxt\\ExchangeError',
                    'RISK_LIMIT_TOO_lOW' => '\\ccxt\\ExchangeError',
                    'PRICE_TOO_DEVIATED' => '\\ccxt\\InvalidOrder',
                    'SIZE_TOO_LARGE' => '\\ccxt\\InvalidOrder',
                    'SIZE_TOO_SMALL' => '\\ccxt\\InvalidOrder',
                    'PRICE_OVER_LIQUIDATION' => '\\ccxt\\InvalidOrder',
                    'PRICE_OVER_BANKRUPT' => '\\ccxt\\InvalidOrder',
                    'ORDER_POC_IMMEDIATE' => '\\ccxt\\OrderImmediatelyFillable', // array("label":"ORDER_POC_IMMEDIATE","detail":"order price 1700 while counter price 1793.55")
                    'INCREASE_POSITION' => '\\ccxt\\InvalidOrder',
                    'CONTRACT_IN_DELISTING' => '\\ccxt\\ExchangeError',
                    'INTERNAL' => '\\ccxt\\ExchangeNotAvailable',
                    'SERVER_ERROR' => '\\ccxt\\ExchangeNotAvailable',
                    'TOO_BUSY' => '\\ccxt\\ExchangeNotAvailable',
                    'CROSS_ACCOUNT_NOT_FOUND' => '\\ccxt\\ExchangeError',
                ),
            ),
            'broad' => array(),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for gateio
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing market data
         */
        $result = array();
        list($type, $query) = $this->handle_market_type_and_params('fetchMarkets', null, $params);
        if ($type === 'spot' || $type === 'margin') {
            $result = yield $this->fetch_spot_markets($query);
        }
        if ($type === 'swap' || $type === 'future') {
            $result = yield $this->fetch_contract_markets($query); // futures and swaps
        }
        if ($type === 'option') {
            $result = yield $this->fetch_option_markets($query);
        }
        $resultLength = is_array($result) ? count($result) : 0;
        if ($resultLength === 0) {
            throw new ExchangeError($this->id . " does not support '" . $type . "' $type, set exchange.options['defaultType'] to " . "'spot', 'margin', 'swap', 'future' or 'option'"); // eslint-disable-line quotes
        }
        return $result;
    }

    public function fetch_spot_markets($params) {
        $marginResponse = yield $this->publicMarginGetCurrencyPairs ($params);
        $spotMarketsResponse = yield $this->publicSpotGetCurrencyPairs ($params);
        $marginMarkets = $this->index_by($marginResponse, 'id');
        //
        //  Spot
        //
        //     array(
        //         {
        //             "id" => "QTUM_ETH",
        //             "base" => "QTUM",
        //             "quote" => "ETH",
        //             "fee" => "0.2",
        //             "min_base_amount" => "0.01",
        //             "min_quote_amount" => "0.001",
        //             "amount_precision" => 3,
        //             "precision" => 6,
        //             "trade_status" => "tradable",
        //             "sell_start" => 0,
        //             "buy_start" => 0
        //         }
        //     )
        //
        //  Margin
        //
        //     array(
        //         {
        //             "id" => "ETH_USDT",
        //             "base" => "ETH",
        //             "quote" => "USDT",
        //             "leverage" => 3,
        //             "min_base_amount" => "0.01",
        //             "min_quote_amount" => "100",
        //             "max_quote_amount" => "1000000"
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($spotMarketsResponse); $i++) {
            $spotMarket = $spotMarketsResponse[$i];
            $id = $this->safe_string($spotMarket, 'id');
            $marginMarket = $this->safe_value($marginMarkets, $id);
            $market = $this->deep_extend($marginMarket, $spotMarket);
            list($baseId, $quoteId) = explode('_', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $takerPercent = $this->safe_string($market, 'fee');
            $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
            $amountPrecisionString = $this->safe_string($market, 'amount_precision');
            $pricePrecisionString = $this->safe_string($market, 'precision');
            $tradeStatus = $this->safe_string($market, 'trade_status');
            $leverage = $this->safe_number($market, 'leverage');
            $defaultMinAmountLimit = $this->parse_number($this->parse_precision($amountPrecisionString));
            $margin = $leverage !== null;
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => $margin,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => ($tradeStatus === 'tradable'),
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                // Fee is in %, so divide by 100
                'taker' => $this->parse_number(Precise::string_div($takerPercent, '100')),
                'maker' => $this->parse_number(Precise::string_div($makerPercent, '100')),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->parse_number($this->parse_precision($amountPrecisionString)),
                    'price' => $this->parse_number($this->parse_precision($pricePrecisionString)),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => $this->parse_number('1'),
                        'max' => $this->safe_number($market, 'leverage', 1),
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($spotMarket, 'min_base_amount', $defaultMinAmountLimit),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'min_quote_amount'),
                        'max' => $this->safe_number($market, 'max_quote_amount'),
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_contract_markets($params) {
        $result = array();
        $swapSettlementCurrencies = $this->get_settlement_currencies('swap', 'fetchMarkets');
        $futureSettlementCurrencies = $this->get_settlement_currencies('future', 'fetchMarkets');
        for ($c = 0; $c < count($swapSettlementCurrencies); $c++) {
            $settleId = $swapSettlementCurrencies[$c];
            $query = $params;
            $query['settle'] = $settleId;
            $response = yield $this->publicFuturesGetSettleContracts ($query);
            for ($i = 0; $i < count($response); $i++) {
                $parsedMarket = $this->parse_contract_market($response[$i], $settleId);
                $result[] = $parsedMarket;
            }
        }
        for ($c = 0; $c < count($futureSettlementCurrencies); $c++) {
            $settleId = $futureSettlementCurrencies[$c];
            $query = $params;
            $query['settle'] = $settleId;
            $response = yield $this->publicDeliveryGetSettleContracts ($query);
            for ($i = 0; $i < count($response); $i++) {
                $parsedMarket = $this->parse_contract_market($response[$i], $settleId);
                $result[] = $parsedMarket;
            }
        }
        return $result;
    }

    public function parse_contract_market($market, $settleId) {
        //
        //  Perpetual swap
        //
        //    {
        //        "name" => "BTC_USDT",
        //        "type" => "direct",
        //        "quanto_multiplier" => "0.0001",
        //        "ref_discount_rate" => "0",
        //        "order_price_deviate" => "0.5",
        //        "maintenance_rate" => "0.005",
        //        "mark_type" => "index",
        //        "last_price" => "38026",
        //        "mark_price" => "37985.6",
        //        "index_price" => "37954.92",
        //        "funding_rate_indicative" => "0.000219",
        //        "mark_price_round" => "0.01",
        //        "funding_offset" => 0,
        //        "in_delisting" => false,
        //        "risk_limit_base" => "1000000",
        //        "interest_rate" => "0.0003",
        //        "order_price_round" => "0.1",
        //        "order_size_min" => 1,
        //        "ref_rebate_rate" => "0.2",
        //        "funding_interval" => 28800,
        //        "risk_limit_step" => "1000000",
        //        "leverage_min" => "1",
        //        "leverage_max" => "100",
        //        "risk_limit_max" => "8000000",
        //        "maker_fee_rate" => "-0.00025",
        //        "taker_fee_rate" => "0.00075",
        //        "funding_rate" => "0.002053",
        //        "order_size_max" => 1000000,
        //        "funding_next_apply" => 1610035200,
        //        "short_users" => 977,
        //        "config_change_time" => 1609899548,
        //        "trade_size" => 28530850594,
        //        "position_size" => 5223816,
        //        "long_users" => 455,
        //        "funding_impact_value" => "60000",
        //        "orders_limit" => 50,
        //        "trade_id" => 10851092,
        //        "orderbook_id" => 2129638396
        //    }
        //
        //  Delivery Futures
        //
        //    {
        //        "name" => "BTC_USDT_20200814",
        //        "underlying" => "BTC_USDT",
        //        "cycle" => "WEEKLY",
        //        "type" => "direct",
        //        "quanto_multiplier" => "0.0001",
        //        "mark_type" => "index",
        //        "last_price" => "9017",
        //        "mark_price" => "9019",
        //        "index_price" => "9005.3",
        //        "basis_rate" => "0.185095",
        //        "basis_value" => "13.7",
        //        "basis_impact_value" => "100000",
        //        "settle_price" => "0",
        //        "settle_price_interval" => 60,
        //        "settle_price_duration" => 1800,
        //        "settle_fee_rate" => "0.0015",
        //        "expire_time" => 1593763200,
        //        "order_price_round" => "0.1",
        //        "mark_price_round" => "0.1",
        //        "leverage_min" => "1",
        //        "leverage_max" => "100",
        //        "maintenance_rate" => "1000000",
        //        "risk_limit_base" => "140.726652109199",
        //        "risk_limit_step" => "1000000",
        //        "risk_limit_max" => "8000000",
        //        "maker_fee_rate" => "-0.00025",
        //        "taker_fee_rate" => "0.00075",
        //        "ref_discount_rate" => "0",
        //        "ref_rebate_rate" => "0.2",
        //        "order_price_deviate" => "0.5",
        //        "order_size_min" => 1,
        //        "order_size_max" => 1000000,
        //        "orders_limit" => 50,
        //        "orderbook_id" => 63,
        //        "trade_id" => 26,
        //        "trade_size" => 435,
        //        "position_size" => 130,
        //        "config_change_time" => 1593158867,
        //        "in_delisting" => false
        //    }
        //
        $id = $this->safe_string($market, 'name');
        $parts = explode('_', $id);
        $baseId = $this->safe_string($parts, 0);
        $quoteId = $this->safe_string($parts, 1);
        $date = $this->safe_string($parts, 2);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settle = $this->safe_currency_code($settleId);
        $expiry = $this->safe_timestamp($market, 'expire_time');
        $symbol = '';
        $marketType = 'swap';
        if ($date !== null) {
            $symbol = $base . '/' . $quote . ':' . $settle . '-' . $this->yymmdd($expiry, '');
            $marketType = 'future';
        } else {
            $symbol = $base . '/' . $quote . ':' . $settle;
        }
        $priceDeviate = $this->safe_string($market, 'order_price_deviate');
        $markPrice = $this->safe_string($market, 'mark_price');
        $minMultiplier = Precise::string_sub('1', $priceDeviate);
        $maxMultiplier = Precise::string_add('1', $priceDeviate);
        $minPrice = Precise::string_mul($minMultiplier, $markPrice);
        $maxPrice = Precise::string_mul($maxMultiplier, $markPrice);
        $takerPercent = $this->safe_string($market, 'taker_fee_rate');
        $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
        $isLinear = $quote === $settle;
        return array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $settleId,
            'type' => $marketType,
            'spot' => false,
            'margin' => false,
            'swap' => $marketType === 'swap',
            'future' => $marketType === 'future',
            'option' => $marketType === 'option',
            'active' => true,
            'contract' => true,
            'linear' => $isLinear,
            'inverse' => !$isLinear,
            'taker' => $this->parse_number(Precise::string_div($takerPercent, '100')), // Fee is in %, so divide by 100
            'maker' => $this->parse_number(Precise::string_div($makerPercent, '100')),
            'contractSize' => $this->safe_number($market, 'quanto_multiplier'),
            'expiry' => $expiry,
            'expiryDatetime' => $this->iso8601($expiry),
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->parse_number('1'),
                'price' => $this->safe_number($market, 'order_price_round'),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->safe_number($market, 'leverage_min'),
                    'max' => $this->safe_number($market, 'leverage_max'),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'order_size_min'),
                    'max' => $this->safe_number($market, 'order_size_max'),
                ),
                'price' => array(
                    'min' => $this->parse_number($minPrice),
                    'max' => $this->parse_number($maxPrice),
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'info' => $market,
        );
    }

    public function fetch_option_markets($params = array ()) {
        $result = array();
        $underlyings = yield $this->fetch_option_underlyings();
        for ($i = 0; $i < count($underlyings); $i++) {
            $underlying = $underlyings[$i];
            $query = $params;
            $query['underlying'] = $underlying;
            $response = yield $this->publicOptionsGetContracts ($query);
            //
            //    array(
            //        {
            //            "orders_limit" => "50",
            //            "order_size_max" => "100000",
            //            "mark_price_round" => "0.1",
            //            "order_size_min" => "1",
            //            "position_limit" => "1000000",
            //            "orderbook_id" => "575967",
            //            "order_price_deviate" => "0.9",
            //            "is_call" => true, // true means Call false means Put
            //            "last_price" => "93.9",
            //            "bid1_size" => "0",
            //            "bid1_price" => "0",
            //            "taker_fee_rate" => "0.0004",
            //            "underlying" => "BTC_USDT",
            //            "create_time" => "1646381188",
            //            "price_limit_fee_rate" => "0.1",
            //            "maker_fee_rate" => "0.0004",
            //            "trade_id" => "727",
            //            "order_price_round" => "0.1",
            //            "settle_fee_rate" => "0.0001",
            //            "trade_size" => "1982",
            //            "ref_rebate_rate" => "0",
            //            "name" => "BTC_USDT-20220311-44000-C",
            //            "underlying_price" => "39194.26",
            //            "strike_price" => "44000",
            //            "multiplier" => "0.0001",
            //            "ask1_price" => "0",
            //            "ref_discount_rate" => "0",
            //            "expiration_time" => "1646985600",
            //            "mark_price" => "12.15",
            //            "position_size" => "4",
            //            "ask1_size" => "0",
            //            "tag" => "WEEK"
            //        }
            //    )
            //
            for ($i = 0; $i < count($response); $i++) {
                $market = $response[$i];
                $id = $this->safe_string($market, 'name');
                $parts = explode('_', $underlying);
                $baseId = $this->safe_string($parts, 0);
                $quoteId = $this->safe_string($parts, 1);
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $expiry = $this->safe_timestamp($market, 'expiration_time');
                $strike = $this->safe_string($market, 'strike_price');
                $isCall = $this->safe_value($market, 'is_call');
                $optionLetter = $isCall ? 'C' : 'P';
                $optionType = $isCall ? 'call' : 'put';
                $symbol = $symbol . ':' . $quote . '-' . $this->yymmdd($expiry) . ':' . $strike . ':' . $optionLetter;
                $priceDeviate = $this->safe_string($market, 'order_price_deviate');
                $markPrice = $this->safe_string($market, 'mark_price');
                $minMultiplier = Precise::string_sub('1', $priceDeviate);
                $maxMultiplier = Precise::string_add('1', $priceDeviate);
                $minPrice = Precise::string_mul($minMultiplier, $markPrice);
                $maxPrice = Precise::string_mul($maxMultiplier, $markPrice);
                $takerPercent = $this->safe_string($market, 'taker_fee_rate');
                $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => $quote,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => $quoteId,
                    'type' => 'option',
                    'spot' => false,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => true,
                    'active' => true,
                    'contract' => true,
                    'linear' => true,
                    'inverse' => false,
                    'taker' => $this->parse_number(Precise::string_div($takerPercent, '100')), // Fee is in %, so divide by 100
                    'maker' => $this->parse_number(Precise::string_div($makerPercent, '100')),
                    'contractSize' => $this->parse_number('1'),
                    'expiry' => $expiry,
                    'expiryDatetime' => $this->iso8601($expiry),
                    'strike' => $strike,
                    'optionType' => $optionType,
                    'precision' => array(
                        'amount' => $this->parse_number('1'),
                        'price' => $this->safe_number($market, 'order_price_round'),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'order_size_min'),
                            'max' => $this->safe_number($market, 'order_size_max'),
                        ),
                        'price' => array(
                            'min' => $this->parse_number($minPrice),
                            'max' => $this->parse_number($maxPrice),
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'info' => $market,
                );
            }
        }
        return $result;
    }

    public function fetch_option_underlyings() {
        $underlyingsResponse = yield $this->publicOptionsGetUnderlyings ();
        //
        //    array(
        //        {
        //            "index_time" => "1646915796",
        //            "name" => "BTC_USDT",
        //            "index_price" => "39142.73"
        //        }
        //    )
        //
        $underlyings = array();
        for ($i = 0; $i < count($underlyingsResponse); $i++) {
            $underlying = $underlyingsResponse[$i];
            $name = $this->safe_string($underlying, 'name');
            if ($name !== null) {
                $underlyings[] = $name;
            }
        }
        return $underlyings;
    }

    public function prepare_request($market = null, $type = null, $params = array ()) {
        /**
         * @ignore
         * Fills $request $params contract, $settle, currency_pair, $market and account where applicable
         * @param {dict} $market CCXT $market, required when $type is null
         * @param {str} $type 'spot', 'swap', or 'future', required when $market is null
         * @param {dict} $params $request parameters
         * @return the api $request object, and the new $params object with non-needed parameters removed
         */
        // * Do not call for multi spot order methods like cancelAllOrders and fetchOpenOrders. Use multiOrderSpotPrepareRequest instead
        $request = array();
        if ($market !== null) {
            if ($market['contract']) {
                $request['contract'] = $market['id'];
                $request['settle'] = $market['settleId'];
            } else {
                $request['currency_pair'] = $market['id'];
            }
        } else {
            $swap = $type === 'swap';
            $future = $type === 'future';
            if ($swap || $future) {
                $defaultSettle = $swap ? 'usdt' : 'btc';
                $settle = $this->safe_string_lower($params, 'settle', $defaultSettle);
                $params = $this->omit($params, 'settle');
                $request['settle'] = $settle;
            }
        }
        return array( $request, $params );
    }

    public function spot_order_prepare_request($market = null, $stop = false, $params = array ()) {
        /**
         * @ignore
         * Fills $request $params currency_pair, $market and account where applicable for spot order methods like fetchOpenOrders, cancelAllOrders
         * @param {dict} $market CCXT $market
         * @param {bool} $stop true if for a $stop order
         * @param {dict} $params $request parameters
         * @return the api $request object, and the new $params object with non-needed parameters removed
         */
        list($marginMode, $query) = $this->get_margin_mode($stop, $params);
        $request = array();
        if (!$stop) {
            if ($market === null) {
                throw new ArgumentsRequired($this->id . ' spotOrderPrepareRequest() requires a $market argument for non-$stop orders');
            }
            $request['account'] = $marginMode;
            $request['currency_pair'] = $market['id']; // Should always be set for non-$stop
        }
        return array( $request, $query );
    }

    public function multi_order_spot_prepare_request($market = null, $stop = false, $params = array ()) {
        /**
         * @ignore
         * Fills $request $params currency_pair, $market and account where applicable for spot order methods like fetchOpenOrders, cancelAllOrders
         * @param {dict} $market CCXT $market
         * @param {bool} $stop true if for a $stop order
         * @param {dict} $params $request parameters
         * @return the api $request object, and the new $params object with non-needed parameters removed
         */
        list($marginMode, $query) = $this->get_margin_mode($stop, $params);
        $request = array(
            'account' => $marginMode,
        );
        if ($market !== null) {
            if ($stop) {
                // gateio spot and margin $stop orders use the term $market instead of currency_pair, and normal instead of spot. Neither parameter is used when fetching/cancelling a single order. They are used for creating a single $stop order, but createOrder does not call this method
                $request['market'] = $market['id'];
            } else {
                $request['currency_pair'] = $market['id'];
            }
        }
        return array( $request, $query );
    }

    public function get_margin_mode($stop, $params) {
        /**
         * @ignore
         * Gets the margin type for this api call
         * @param {bool} $stop True if for a $stop order
         * @param {dict} $params Request $params
         * @return The $marginMode and the updated request $params with $marginMode removed, $marginMode value is the value that can be read by the "account" property specified in gateios api docs
         */
        $defaultMarginMode = $this->safe_string_lower_2($this->options, 'defaultMarginMode', 'marginMode', 'spot'); // 'margin' is isolated margin on gateio's api
        $marginMode = $this->safe_string_lower_2($params, 'marginMode', 'account', $defaultMarginMode);
        $params = $this->omit($params, array( 'marginMode', 'account' ));
        if ($marginMode === 'cross') {
            $marginMode = 'cross_margin';
        } elseif ($marginMode === 'isolated') {
            $marginMode = 'margin';
        } elseif ($marginMode === '') {
            $marginMode = 'spot';
        }
        if ($stop) {
            if ($marginMode === 'spot') {
                // gateio spot $stop orders use the term normal instead of spot
                $marginMode = 'normal';
            }
            if ($marginMode === 'cross_margin') {
                throw new BadRequest($this->id . ' getMarginMode() does not support $stop orders for cross margin');
            }
        }
        return array( $marginMode, $params );
    }

    public function get_settlement_currencies($type, $method) {
        $options = $this->safe_value($this->options, $type, array()); // array( 'BTC', 'USDT' ) unified codes
        $fetchMarketsContractOptions = $this->safe_value($options, $method, array());
        $defaultSettle = ($type === 'swap') ? array( 'usdt' ) : array( 'btc' );
        return $this->safe_value($fetchMarketsContractOptions, 'settlementCurrencies', $defaultSettle);
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {dict} an associative dictionary of currencies
         */
        // sandbox/testnet only supports future markets
        $apiBackup = $this->safe_value($this->urls, 'apiBackup');
        if ($apiBackup !== null) {
            return null;
        }
        $response = yield $this->publicSpotGetCurrencies ($params);
        //
        //    {
        //        "currency" => "BCN",
        //        "delisted" => false,
        //        "withdraw_disabled" => true,
        //        "withdraw_delayed" => false,
        //        "deposit_disabled" => true,
        //        "trade_disabled" => false
        //    }
        //
        $result = array();
        // TODO => remove magic constants
        $amountPrecision = $this->parse_number('1e-6');
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $currencyIdLower = $this->safe_string_lower($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $delisted = $this->safe_value($entry, 'delisted');
            $withdrawDisabled = $this->safe_value($entry, 'withdraw_disabled', false);
            $depositDisabled = $this->safe_value($entry, 'deposit_disabled', false);
            $tradeDisabled = $this->safe_value($entry, 'trade_disabled', false);
            $withdrawEnabled = !$withdrawDisabled;
            $depositEnabled = !$depositDisabled;
            $tradeEnabled = !$tradeDisabled;
            $listed = !$delisted;
            $active = $listed && $tradeEnabled && $withdrawEnabled && $depositEnabled;
            $result[$code] = array(
                'id' => $currencyId,
                'lowerCaseId' => $currencyIdLower,
                'name' => null,
                'code' => $code,
                'precision' => $amountPrecision,
                'info' => $entry,
                'active' => $active,
                'deposit' => $depositEnabled,
                'withdraw' => $withdrawEnabled,
                'fee' => null,
                'fees' => array(),
                'limits' => $this->limits,
            );
        }
        return $result;
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
        }
        list($request, $query) = $this->prepare_request($market, null, $params);
        $response = yield $this->publicFuturesGetSettleContractsContract (array_merge($request, $query));
        //
        //    array(
        //        {
        //            "name" => "BTC_USDT",
        //            "type" => "direct",
        //            "quanto_multiplier" => "0.0001",
        //            "ref_discount_rate" => "0",
        //            "order_price_deviate" => "0.5",
        //            "maintenance_rate" => "0.005",
        //            "mark_type" => "index",
        //            "last_price" => "38026",
        //            "mark_price" => "37985.6",
        //            "index_price" => "37954.92",
        //            "funding_rate_indicative" => "0.000219",
        //            "mark_price_round" => "0.01",
        //            "funding_offset" => 0,
        //            "in_delisting" => false,
        //            "risk_limit_base" => "1000000",
        //            "interest_rate" => "0.0003",
        //            "order_price_round" => "0.1",
        //            "order_size_min" => 1,
        //            "ref_rebate_rate" => "0.2",
        //            "funding_interval" => 28800,
        //            "risk_limit_step" => "1000000",
        //            "leverage_min" => "1",
        //            "leverage_max" => "100",
        //            "risk_limit_max" => "8000000",
        //            "maker_fee_rate" => "-0.00025",
        //            "taker_fee_rate" => "0.00075",
        //            "funding_rate" => "0.002053",
        //            "order_size_max" => 1000000,
        //            "funding_next_apply" => 1610035200,
        //            "short_users" => 977,
        //            "config_change_time" => 1609899548,
        //            "trade_size" => 28530850594,
        //            "position_size" => 5223816,
        //            "long_users" => 455,
        //            "funding_impact_value" => "60000",
        //            "orders_limit" => 50,
        //            "trade_id" => 10851092,
        //            "orderbook_id" => 2129638396
        //        }
        //    )
        //
        return $this->parse_funding_rate($response);
    }

    public function fetch_funding_rates($symbols = null, $params = array ()) {
        yield $this->load_markets();
        list($request, $query) = $this->prepare_request(null, 'swap', $params);
        $response = yield $this->publicFuturesGetSettleContracts (array_merge($request, $query));
        //
        //    array(
        //        {
        //            "name" => "BTC_USDT",
        //            "type" => "direct",
        //            "quanto_multiplier" => "0.0001",
        //            "ref_discount_rate" => "0",
        //            "order_price_deviate" => "0.5",
        //            "maintenance_rate" => "0.005",
        //            "mark_type" => "index",
        //            "last_price" => "38026",
        //            "mark_price" => "37985.6",
        //            "index_price" => "37954.92",
        //            "funding_rate_indicative" => "0.000219",
        //            "mark_price_round" => "0.01",
        //            "funding_offset" => 0,
        //            "in_delisting" => false,
        //            "risk_limit_base" => "1000000",
        //            "interest_rate" => "0.0003",
        //            "order_price_round" => "0.1",
        //            "order_size_min" => 1,
        //            "ref_rebate_rate" => "0.2",
        //            "funding_interval" => 28800,
        //            "risk_limit_step" => "1000000",
        //            "leverage_min" => "1",
        //            "leverage_max" => "100",
        //            "risk_limit_max" => "8000000",
        //            "maker_fee_rate" => "-0.00025",
        //            "taker_fee_rate" => "0.00075",
        //            "funding_rate" => "0.002053",
        //            "order_size_max" => 1000000,
        //            "funding_next_apply" => 1610035200,
        //            "short_users" => 977,
        //            "config_change_time" => 1609899548,
        //            "trade_size" => 28530850594,
        //            "position_size" => 5223816,
        //            "long_users" => 455,
        //            "funding_impact_value" => "60000",
        //            "orders_limit" => 50,
        //            "trade_id" => 10851092,
        //            "orderbook_id" => 2129638396
        //        }
        //    )
        //
        $result = $this->parse_funding_rates($response);
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        //    {
        //        "name" => "BTC_USDT",
        //        "type" => "direct",
        //        "quanto_multiplier" => "0.0001",
        //        "ref_discount_rate" => "0",
        //        "order_price_deviate" => "0.5",
        //        "maintenance_rate" => "0.005",
        //        "mark_type" => "index",
        //        "last_price" => "38026",
        //        "mark_price" => "37985.6",
        //        "index_price" => "37954.92",
        //        "funding_rate_indicative" => "0.000219",
        //        "mark_price_round" => "0.01",
        //        "funding_offset" => 0,
        //        "in_delisting" => false,
        //        "risk_limit_base" => "1000000",
        //        "interest_rate" => "0.0003",
        //        "order_price_round" => "0.1",
        //        "order_size_min" => 1,
        //        "ref_rebate_rate" => "0.2",
        //        "funding_interval" => 28800,
        //        "risk_limit_step" => "1000000",
        //        "leverage_min" => "1",
        //        "leverage_max" => "100",
        //        "risk_limit_max" => "8000000",
        //        "maker_fee_rate" => "-0.00025",
        //        "taker_fee_rate" => "0.00075",
        //        "funding_rate" => "0.002053",
        //        "order_size_max" => 1000000,
        //        "funding_next_apply" => 1610035200,
        //        "short_users" => 977,
        //        "config_change_time" => 1609899548,
        //        "trade_size" => 28530850594,
        //        "position_size" => 5223816,
        //        "long_users" => 455,
        //        "funding_impact_value" => "60000",
        //        "orders_limit" => 50,
        //        "trade_id" => 10851092,
        //        "orderbook_id" => 2129638396
        //    }
        //
        $marketId = $this->safe_string($contract, 'name');
        $symbol = $this->safe_symbol($marketId, $market);
        $markPrice = $this->safe_number($contract, 'mark_price');
        $indexPrice = $this->safe_number($contract, 'index_price');
        $interestRate = $this->safe_number($contract, 'interest_rate');
        $fundingRate = $this->safe_number($contract, 'funding_rate');
        $fundingTime = $this->safe_integer($contract, 'funding_next_apply') * 1000;
        $fundingRateIndicative = $this->safe_number($contract, 'funding_rate_indicative');
        return array(
            'info' => $contract,
            'symbol' => $symbol,
            'markPrice' => $markPrice,
            'indexPrice' => $indexPrice,
            'interestRate' => $interestRate,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $fundingRate,
            'fundingTimestamp' => $fundingTime,
            'fundingDatetime' => $this->iso8601($fundingTime),
            'nextFundingRate' => $fundingRateIndicative,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_network_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privateWalletGetDepositAddress (array_merge($request, $params));
        $addresses = $this->safe_value($response, 'multichain_addresses');
        $currencyId = $this->safe_string($response, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $result = array();
        for ($i = 0; $i < count($addresses); $i++) {
            $entry = $addresses[$i];
            //
            //    {
            //        "chain" => "ETH",
            //        "address" => "0x359a697945E79C7e17b634675BD73B33324E9408",
            //        "payment_id" => "",
            //        "payment_name" => "",
            //        "obtain_failed" => "0"
            //    }
            //
            $obtainFailed = $this->safe_integer($entry, 'obtain_failed');
            if ($obtainFailed) {
                continue;
            }
            $network = $this->safe_string($entry, 'chain');
            $address = $this->safe_string($entry, 'address');
            $tag = $this->safe_string($entry, 'payment_id');
            $tagLength = is_array($tag) ? count($tag) : 0;
            $tag = $tagLength ? $tag : null;
            $result[$network] = array(
                'info' => $entry,
                'code' => $code,
                'address' => $address,
                'tag' => $tag,
            );
        }
        return $result;
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privateWalletGetDepositAddress (array_merge($request, $params));
        //
        //    {
        //        "currency" => "XRP",
        //        "address" => "rHcFoo6a9qT5NHiVn1THQRhsEGcxtYCV4d 391331007",
        //        "multichain_addresses" => array(
        //            {
        //                "chain" => "XRP",
        //                "address" => "rHcFoo6a9qT5NHiVn1THQRhsEGcxtYCV4d",
        //                "payment_id" => "391331007",
        //                "payment_name" => "Tag",
        //                "obtain_failed" => 0
        //            }
        //        )
        //    }
        //
        $currencyId = $this->safe_string($response, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $addressField = $this->safe_string($response, 'address');
        $tag = null;
        $address = null;
        if ($addressField !== null) {
            if (mb_strpos($addressField, ' ') !== false) {
                $splitted = explode(' ', $addressField);
                $address = $splitted[0];
                $tag = $splitted[1];
            } else {
                $address = $addressField;
            }
        }
        $this->check_address($address);
        return array(
            'info' => $response,
            'code' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => null,
        );
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'currency_pair' => $market['id'],
        );
        $response = yield $this->privateWalletGetFee (array_merge($request, $params));
        //
        //    {
        //        "user_id" => 1486602,
        //        "taker_fee" => "0.002",
        //        "maker_fee" => "0.002",
        //        "gt_discount" => true,
        //        "gt_taker_fee" => "0.0015",
        //        "gt_maker_fee" => "0.0015",
        //        "loan_fee" => "0.18",
        //        "point_type" => "0",
        //        "futures_taker_fee" => "0.0005",
        //        "futures_maker_fee" => "0"
        //    }
        //
        return $this->parse_trading_fee($response, $market);
    }

    public function fetch_trading_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateWalletGetFee ($params);
        //
        //    {
        //        "user_id" => 1486602,
        //        "taker_fee" => "0.002",
        //        "maker_fee" => "0.002",
        //        "gt_discount" => true,
        //        "gt_taker_fee" => "0.0015",
        //        "gt_maker_fee" => "0.0015",
        //        "loan_fee" => "0.18",
        //        "point_type" => "0",
        //        "futures_taker_fee" => "0.0005",
        //        "futures_maker_fee" => "0"
        //    }
        //
        return $this->parse_trading_fees($response);
    }

    public function parse_trading_fees($response) {
        $result = array();
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $market = $this->market($symbol);
            $result[$symbol] = $this->parse_trading_fee($response, $market);
        }
        return $result;
    }

    public function parse_trading_fee($info, $market = null) {
        //
        //    {
        //        "user_id" => 1486602,
        //        "taker_fee" => "0.002",
        //        "maker_fee" => "0.002",
        //        "gt_discount" => true,
        //        "gt_taker_fee" => "0.0015",
        //        "gt_maker_fee" => "0.0015",
        //        "loan_fee" => "0.18",
        //        "point_type" => "0",
        //        "futures_taker_fee" => "0.0005",
        //        "futures_maker_fee" => "0"
        //    }
        //
        $contract = $this->safe_value($market, 'contract');
        $takerKey = $contract ? 'futures_taker_fee' : 'taker_fee';
        $makerKey = $contract ? 'futures_maker_fee' : 'maker_fee';
        return array(
            'info' => $info,
            'symbol' => $this->safe_string($market, 'symbol'),
            'maker' => $this->safe_number($info, $makerKey),
            'taker' => $this->safe_number($info, $takerKey),
        );
    }

    public function fetch_transaction_fees($codes = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateWalletGetWithdrawStatus ($params);
        //
        //    {
        //        "currency" => "MTN",
        //        "name" => "Medicalchain",
        //        "name_cn" => "Medicalchain",
        //        "deposit" => "0",
        //        "withdraw_percent" => "0%",
        //        "withdraw_fix" => "900",
        //        "withdraw_day_limit" => "500000",
        //        "withdraw_day_limit_remain" => "500000",
        //        "withdraw_amount_mini" => "900.1",
        //        "withdraw_eachtime_limit" => "90000000000",
        //        "withdraw_fix_on_chains" => {
        //            "ETH" => "900"
        //        }
        //    }
        //
        $withdrawFees = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $withdrawFees[$code] = array();
            $withdrawFix = $this->safe_value($entry, 'withdraw_fix_on_chains');
            if ($withdrawFix === null) {
                $withdrawFix = array();
                $withdrawFix[$code] = $this->safe_number($entry, 'withdraw_fix');
            }
            $keys = is_array($withdrawFix) ? array_keys($withdrawFix) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $key = $keys[$i];
                $withdrawFees[$code][$key] = $this->parse_number($withdrawFix[$key]);
            }
        }
        return array(
            'info' => $response,
            'withdraw' => $withdrawFees,
            'deposit' => array(),
        );
    }

    public function fetch_funding_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        // $defaultType = 'future';
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($type, $query) = $this->handle_market_type_and_params('fetchFundingHistory', $market, $params);
        list($request, $requestParams) = $this->prepare_request($market, $type, $query);
        $request['type'] = 'fund';  // 'dnw' 'pnl' 'fee' 'refr' 'fund' 'point_dnw' 'point_fee' 'point_refr'
        if ($since !== null) {
            $request['from'] = $since / 1000;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $method = $this->get_supported_mapping($type, array(
            'swap' => 'privateFuturesGetSettleAccountBook',
            'future' => 'privateDeliveryGetSettleAccountBook',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        //    array(
        //        array(
        //            "time" => 1646899200,
        //            "change" => "-0.027722",
        //            "balance" => "11.653120591841",
        //            "text" => "XRP_USDT",
        //            "type" => "fund"
        //        ),
        //        ...
        //    )
        //
        return $this->parse_funding_histories($response, $symbol, $since, $limit);
    }

    public function parse_funding_histories($response, $symbol, $since, $limit) {
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $funding = $this->parse_funding_history($entry);
            $result[] = $funding;
        }
        $sorted = $this->sort_by($result, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $symbol, $since, $limit);
    }

    public function parse_funding_history($info, $market = null) {
        //
        //    {
        //        "time" => 1646899200,
        //        "change" => "-0.027722",
        //        "balance" => "11.653120591841",
        //        "text" => "XRP_USDT",
        //        "type" => "fund"
        //    }
        //
        $timestamp = $this->safe_timestamp($info, 'time');
        $marketId = $this->safe_string($info, 'text');
        $market = $this->safe_market($marketId, $market);
        return array(
            'info' => $info,
            'symbol' => $this->safe_string($market, 'symbol'),
            'code' => $this->safe_string($market, 'settle'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => null,
            'amount' => $this->safe_number($info, 'change'),
        );
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        //
        //     $request = array(
        //         'currency_pair' => $market['id'],
        //         'interval' => '0', // depth, 0 means no aggregation is applied, default to 0
        //         'limit' => $limit, // maximum number of order depth data in asks or bids
        //         'with_id' => true, // return order book ID
        //     );
        //
        list($request, $query) = $this->prepare_request($market, null, $params);
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetOrderBook',
            'margin' => 'publicSpotGetOrderBook',
            'swap' => 'publicFuturesGetSettleOrderBook',
            'future' => 'publicDeliveryGetSettleOrderBook',
        ));
        if ($limit !== null) {
            $request['limit'] = $limit; // default 10, max 100
        }
        $request['with_id'] = true;
        $response = yield $this->$method (array_merge($request, $query));
        //
        // SPOT
        //
        //     {
        //         "id" => 6358770031
        //         "current" => 1634345973275,
        //         "update" => 1634345973271,
        //         "asks" => [
        //             ["2.2241","12449.827"],
        //             ["2.2242","200"],
        //             ["2.2244","826.931"],
        //             ["2.2248","3876.107"],
        //             ["2.225","2377.252"],
        //             ["2.22509","439.484"],
        //             ["2.2251","1489.313"],
        //             ["2.2253","714.582"],
        //             ["2.2254","1349.784"],
        //             ["2.2256","234.701"]],
        //          "bids" => [
        //             ["2.2236","32.465"],
        //             ["2.2232","243.983"],
        //             ["2.2231","32.207"],
        //             ["2.223","449.827"],
        //             ["2.2228","7.918"],
        //             ["2.2227","12703.482"],
        //             ["2.2226","143.033"],
        //             ["2.2225","143.027"],
        //             ["2.2224","1369.352"],
        //             ["2.2223","756.063"]
        //         ]
        //     }
        //
        // Perpetual Swap
        //
        //     {
        //         "id" => 6358770031
        //         "current" => 1634350208.745,
        //         "asks" => array(
        //             array("s" => 24909, "p" => "61264.8"),
        //             array("s" => 81, "p" => "61266.6"),
        //             array("s" => 2000, "p" => "61267.6"),
        //             array("s" => 490, "p" => "61270.2"),
        //             array("s" => 12, "p" => "61270.4"),
        //             array("s" => 11782, "p" => "61273.2"),
        //             array("s" => 14666, "p" => "61273.3"),
        //             array("s" => 22541, "p" => "61273.4"),
        //             array("s" => 33, "p" => "61273.6"),
        //             array("s" => 11980, "p" => "61274.5")
        //         ),
        //         "bids" => array(
        //             array("s" => 41844, "p" => "61264.7"),
        //             array("s" => 13783, "p" => "61263.3"),
        //             array("s" => 1143, "p" => "61259.8"),
        //             array("s" => 81, "p" => "61258.7"),
        //             array("s" => 2471, "p" => "61257.8"),
        //             array("s" => 2471, "p" => "61257.7"),
        //             array("s" => 2471, "p" => "61256.5"),
        //             array("s" => 3, "p" => "61254.2"),
        //             array("s" => 114, "p" => "61252.4"),
        //             array("s" => 14372, "p" => "61248.6")
        //         ),
        //         "update" => 1634350208.724
        //     }
        //
        $timestamp = $this->safe_integer($response, 'current');
        if (!$market['spot']) {
            $timestamp = $timestamp * 1000;
        }
        $priceKey = $market['spot'] ? 0 : 'p';
        $amountKey = $market['spot'] ? 1 : 's';
        $nonce = $this->safe_integer($response, 'id');
        $result = $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks', $priceKey, $amountKey);
        $result['nonce'] = $nonce;
        return $result;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {str} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structure}
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        list($request, $query) = $this->prepare_request($market, null, $params);
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetTickers',
            'margin' => 'publicSpotGetTickers',
            'swap' => 'publicFuturesGetSettleTickers',
            'future' => 'publicDeliveryGetSettleTickers',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        $ticker = $this->safe_value($response, 0);
        return $this->parse_ticker($ticker, $market);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // SPOT
        //
        //     {
        //         "currency_pair" => "KFC_USDT",
        //         "last" => "7.255",
        //         "lowest_ask" => "7.298",
        //         "highest_bid" => "7.218",
        //         "change_percentage" => "-1.18",
        //         "base_volume" => "1219.053687865",
        //         "quote_volume" => "8807.40299875455",
        //         "high_24h" => "7.262",
        //         "low_24h" => "7.095"
        //     }
        //
        // LINEAR/DELIVERY
        //
        //     {
        //         "contract" => "BTC_USDT",
        //         "last" => "6432",
        //         "low_24h" => "6278",
        //         "high_24h" => "6790",
        //         "change_percentage" => "4.43",
        //         "total_size" => "32323904",
        //         "volume_24h" => "184040233284",
        //         "volume_24h_btc" => "28613220",
        //         "volume_24h_usd" => "184040233284",
        //         "volume_24h_base" => "28613220",
        //         "volume_24h_quote" => "184040233284",
        //         "volume_24h_settle" => "28613220",
        //         "mark_price" => "6534",
        //         "funding_rate" => "0.0001",
        //         "funding_rate_indicative" => "0.0001",
        //         "index_price" => "6531"
        //     }
        //
        $marketId = $this->safe_string_2($ticker, 'currency_pair', 'contract');
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_string($ticker, 'last');
        $ask = $this->safe_string($ticker, 'lowest_ask');
        $bid = $this->safe_string($ticker, 'highest_bid');
        $high = $this->safe_string($ticker, 'high_24h');
        $low = $this->safe_string($ticker, 'low_24h');
        $baseVolume = $this->safe_string_2($ticker, 'base_volume', 'volume_24h_base');
        $quoteVolume = $this->safe_string_2($ticker, 'quote_volume', 'volume_24h_quote');
        $percentage = $this->safe_string($ticker, 'change_percentage');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structures}
         */
        yield $this->load_markets();
        list($type, $query) = $this->handle_market_type_and_params('fetchTickers', null, $params);
        list($request, $requestParams) = $this->prepare_request(null, $type, $query);
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'publicSpotGetTickers',
            'margin' => 'publicSpotGetTickers',
            'swap' => 'publicFuturesGetSettleTickers',
            'future' => 'publicDeliveryGetSettleTickers',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_balance_helper($entry) {
        $account = $this->account();
        $account['used'] = $this->safe_string_2($entry, 'freeze', 'locked');
        $account['free'] = $this->safe_string($entry, 'available');
        $account['total'] = $this->safe_string($entry, 'total');
        return $account;
    }

    public function fetch_balance($params = array ()) {
        /**
         * @param {dict} $params exchange specific parameters
         * @param {str} $params->type spot, $margin, swap or future, if not provided $this->options['defaultType'] is used
         * @param {str} $params->settle 'btc' or 'usdt' - settle currency for perpetual swap and future - default="usdt" for swap and "btc" for future
         * @param {str} $params->marginMode 'cross' or 'isolated' - $marginMode for $margin trading if not provided $this->options['defaultMarginMode'] is used
         * @param {str} $params->symbol $margin only - unified ccxt $symbol
         */
        yield $this->load_markets();
        $symbol = $this->safe_string($params, 'symbol');
        $params = $this->omit($params, 'symbol');
        list($type, $query) = $this->handle_market_type_and_params('fetchBalance', null, $params);
        list($request, $requestParams) = $this->prepare_request(null, $type, $query);
        list($marginMode, $requestQuery) = $this->get_margin_mode(false, $requestParams);
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['currency_pair'] = $market['id'];
        }
        $method = $this->get_supported_mapping($type, array(
            'spot' => $this->get_supported_mapping($marginMode, array(
                'spot' => 'privateSpotGetAccounts',
                'margin' => 'privateMarginGetAccounts',
                'cross_margin' => 'privateMarginGetCrossAccounts',
            )),
            'funding' => 'privateMarginGetFundingAccounts',
            'swap' => 'privateFuturesGetSettleAccounts',
            'future' => 'privateDeliveryGetSettleAccounts',
        ));
        $response = yield $this->$method (array_merge($request, $requestQuery));
        $contract = ($type === 'swap' || $type === 'future');
        if ($contract) {
            $response = array( $response );
        }
        //
        // Spot / $margin funding
        //
        //     array(
        //         array(
        //             "currency" => "DBC",
        //             "available" => "0",
        //             "locked" => "0"
        //             "lent" => "0", // $margin funding only
        //             "total_lent" => "0" // $margin funding only
        //         ),
        //         ...
        //     )
        //
        //  Margin
        //
        //    array(
        //        {
        //            "currency_pair" => "DOGE_USDT",
        //            "locked" => false,
        //            "risk" => "9999.99",
        //            "base" => array(
        //                "currency" => "DOGE",
        //                "available" => "0",
        //                "locked" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            ),
        //            "quote" => array(
        //                "currency" => "USDT",
        //                "available" => "0.73402",
        //                "locked" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            }
        //        ),
        //        ...
        //    )
        //
        // Cross $margin
        //
        //    {
        //        "user_id" => 10406147,
        //        "locked" => false,
        //        "balances" => {
        //            "USDT" => array(
        //                "available" => "1",
        //                "freeze" => "0",
        //                "borrowed" => "0",
        //                "interest" => "0"
        //            }
        //        ),
        //        "total" => "1",
        //        "borrowed" => "0",
        //        "interest" => "0",
        //        "risk" => "9999.99"
        //    }
        //
        //  Perpetual Swap
        //
        //    {
        //        order_margin => "0",
        //        point => "0",
        //        bonus => "0",
        //        history => array(
        //            dnw => "2.1321",
        //            pnl => "11.5351",
        //            refr => "0",
        //            point_fee => "0",
        //            fund => "-0.32340576684",
        //            bonus_dnw => "0",
        //            point_refr => "0",
        //            bonus_offset => "0",
        //            fee => "-0.20132775",
        //            point_dnw => "0",
        //        ),
        //        unrealised_pnl => "13.315100000006",
        //        total => "12.51345151332",
        //        available => "0",
        //        in_dual_mode => false,
        //        currency => "USDT",
        //        position_margin => "12.51345151332",
        //        user => "6333333",
        //    }
        //
        // Delivery Future
        //
        //    {
        //        order_margin => "0",
        //        point => "0",
        //        history => array(
        //            dnw => "1",
        //            pnl => "0",
        //            refr => "0",
        //            point_fee => "0",
        //            point_dnw => "0",
        //            settle => "0",
        //            settle_fee => "0",
        //            point_refr => "0",
        //            fee => "0",
        //        ),
        //        unrealised_pnl => "0",
        //        total => "1",
        //        available => "1",
        //        currency => "USDT",
        //        position_margin => "0",
        //        user => "6333333",
        //    }
        //
        $result = array(
            'info' => $response,
        );
        $crossMargin = $marginMode === 'cross_margin';
        $margin = $marginMode === 'margin';
        $data = $response;
        if (is_array($data) && array_key_exists('balances', $data)) { // True for cross_margin
            $flatBalances = array();
            $balances = $this->safe_value($data, 'balances', array());
            // inject currency and create an artificial balance object
            // so it can follow the existent flow
            $keys = is_array($balances) ? array_keys($balances) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $currencyId = $keys[$i];
                $content = $balances[$currencyId];
                $content['currency'] = $currencyId;
                $flatBalances[] = $content;
            }
            $data = $flatBalances;
        }
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            if ($margin && !$crossMargin) {
                $marketId = $this->safe_string($entry, 'currency_pair');
                $symbol = $this->safe_symbol($marketId, null, '_');
                $base = $this->safe_value($entry, 'base', array());
                $quote = $this->safe_value($entry, 'quote', array());
                $baseCode = $this->safe_currency_code($this->safe_string($base, 'currency', array()));
                $quoteCode = $this->safe_currency_code($this->safe_string($quote, 'currency', array()));
                $subResult = array();
                $subResult[$baseCode] = $this->fetch_balance_helper($base);
                $subResult[$quoteCode] = $this->fetch_balance_helper($quote);
                $result[$symbol] = $this->safe_balance($subResult);
            } else {
                $code = $this->safe_currency_code($this->safe_string($entry, 'currency', array()));
                $result[$code] = $this->fetch_balance_helper($entry);
            }
        }
        return ($margin && !$crossMargin) ? $result : $this->safe_balance($result);
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close $price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $price = $this->safe_string($params, 'price');
        $request = array();
        list($request, $params) = $this->prepare_request($market, null, $params);
        $request['interval'] = $this->timeframes[$timeframe];
        $method = 'publicSpotGetCandlesticks';
        $maxLimit = 1000;
        if ($market['contract']) {
            $maxLimit = 1999;
            $limit = ($limit === null) ? $maxLimit : min ($limit, $maxLimit);
            if ($market['future']) {
                $method = 'publicDeliveryGetSettleCandlesticks';
            } elseif ($market['swap']) {
                $method = 'publicFuturesGetSettleCandlesticks';
            }
            $isMark = ($price === 'mark');
            $isIndex = ($price === 'index');
            if ($isMark || $isIndex) {
                $request['contract'] = $price . '_' . $market['id'];
                $params = $this->omit($params, 'price');
            }
        }
        $limit = ($limit === null) ? $maxLimit : min ($limit, $maxLimit);
        if ($since !== null) {
            $duration = $this->parse_timeframe($timeframe);
            $request['from'] = intval($since / 1000);
            $toTimestamp = $this->sum($request['from'], $limit * $duration - 1);
            $currentTimestamp = $this->seconds();
            $request['to'] = min ($toTimestamp, $currentTimestamp);
        } else {
            $request['limit'] = $limit;
        }
        $response = yield $this->$method (array_merge($request, $params));
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_funding_rate_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical funding rate prices
         * @param {str|null} $symbol unified $symbol of the $market to fetch the funding rate history for
         * @param {int|null} $since $timestamp in ms of the earliest funding rate to fetch
         * @param {int|null} $limit the maximum amount of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~ to fetch
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRateHistory() supports swap contracts only');
        }
        list($request, $query) = $this->prepare_request($market, null, $params);
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $method = 'publicFuturesGetSettleFundingRate';
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     {
        //         "r" => "0.00063521",
        //         "t" => "1621267200000",
        //     }
        //
        $rates = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $timestamp = $this->safe_timestamp($entry, 't');
            $rates[] = array(
                'info' => $entry,
                'symbol' => $symbol,
                'fundingRate' => $this->safe_number($entry, 'r'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
            );
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        // Spot $market candles
        //
        //     array(
        //         "1626163200",           // Unix timestamp in seconds
        //         "346711.933138181617",  // Trading volume
        //         "33165.23",             // Close price
        //         "33260",                // Highest price
        //         "33117.6",              // Lowest price
        //         "33184.47"              // Open price
        //     )
        //
        // Mark and Index price candles
        //
        //     {
        //          "t":1632873600,         // Unix timestamp in seconds
        //          "o" => "41025",           // Open price
        //          "h" => "41882.17",        // Highest price
        //          "c" => "41776.92",        // Close price
        //          "l" => "40783.94"         // Lowest price
        //     }
        //
        if (gettype($ohlcv) === 'array' && count(array_filter(array_keys($ohlcv), 'is_string')) == 0) {
            return array(
                $this->safe_timestamp($ohlcv, 0),   // unix timestamp in seconds
                $this->safe_number($ohlcv, 5),      // open price
                $this->safe_number($ohlcv, 3),      // highest price
                $this->safe_number($ohlcv, 4),      // lowest price
                $this->safe_number($ohlcv, 2),      // close price
                $this->safe_number($ohlcv, 1),      // trading volume
            );
        } else {
            // Mark and Index price candles
            return array(
                $this->safe_timestamp($ohlcv, 't'), // unix timestamp in seconds
                $this->safe_number($ohlcv, 'o'),    // open price
                $this->safe_number($ohlcv, 'h'),    // highest price
                $this->safe_number($ohlcv, 'l'),    // lowest price
                $this->safe_number($ohlcv, 'c'),    // close price
                $this->safe_number($ohlcv, 'v'),    // trading volume, null for mark or index price
            );
        }
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of trades to fetch
         * @param {dict} $params extra parameters specific to the gateio api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        //
        // spot
        //
        //     $request = array(
        //         'currency_pair' => $market['id'],
        //         'limit' => $limit, // maximum number of records to be returned in a single list
        //         'last_id' => 'id', // specify list staring point using the id of last record in previous list-$query results
        //         'reverse' => false, // true to retrieve records where id is smaller than the specified last_id, false to retrieve records where id is larger than the specified last_id
        //     );
        //
        // swap, future
        //
        //     $request = array(
        //         'settle' => $market['settleId'],
        //         'contract' => $market['id'],
        //         'limit' => $limit, // maximum number of records to be returned in a single list
        //         'last_id' => 'id', // specify list staring point using the id of last record in previous list-$query results
        //         'from' => $since / 1000), // starting time in seconds, if not specified, to and $limit will be used to $limit $response items
        //         'to' => $this->seconds(), // end time in seconds, default to current time
        //     );
        //
        list($request, $query) = $this->prepare_request($market, null, $params);
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetTrades',
            'margin' => 'publicSpotGetTrades',
            'swap' => 'publicFuturesGetSettleTrades',
            'future' => 'publicDeliveryGetSettleTrades',
        ));
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        if ($since !== null && ($market['contract'])) {
            $request['from'] = intval($since / 1000);
        }
        $response = yield $this->$method (array_merge($request, $query));
        //
        // spot
        //
        //     array(
        //         {
        //             id => "1852958144",
        //             create_time => "1634673259",
        //             create_time_ms => "1634673259378.105000",
        //             currency_pair => "ADA_USDT",
        //             side => "sell",
        //             amount => "307.078",
        //             price => "2.104",
        //         }
        //     )
        //
        // perpetual swap
        //
        //     array(
        //         {
        //              size => "2",
        //              id => "2522911",
        //              create_time_ms => "1634673380.182",
        //              create_time => "1634673380.182",
        //              contract => "ADA_USDT",
        //              price => "2.10486",
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * Fetch personal trading history
         * @param {str} $symbol The $symbol for the $market to fetch trades for
         * @param {int} $since The earliest timestamp, in ms, that fetched trades were made
         * @param {int} $limit The max number of trades to fetch
         * @param {dict} $params Exchange specific parameters
         * @param {str} $params->marginMode 'cross' or 'isolated' - $marginMode for margin trading if not provided $this->options['defaultMarginMode'] is used
         * @param {str} $params->type 'spot', 'swap', or 'future', if not provided $this->options['defaultMarginMode'] is used
         * @param {int} $params->till The latest timestamp, in ms, that fetched trades were made
         * @param {int} $params->page *spot only* Page number
         * @param {str} $params->order_id *spot only* Filter trades with specified order ID. $symbol is also required if this field is present
         * @param {str} $params->order *$contract only* Futures order ID, return related data only if specified
         * @param {int} $params->offset *$contract only* list offset, starting from 0
         * @param {str} $params->last_id *$contract only* specify list staring point using the id of last record in previous list-query results
         * @param {int} $params->count_total *$contract only* whether to return total number matched, default to 0(no return)
         * @return a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        yield $this->load_markets();
        $type = null;
        $marginMode = null;
        $request = array();
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        $till = $this->safe_number($params, 'till');
        $params = $this->omit($params, 'till');
        list($type, $params) = $this->handle_market_type_and_params('fetchMyTrades', $market, $params);
        $contract = ($type === 'swap') || ($type === 'future');
        if ($contract) {
            list($request, $params) = $this->prepare_request($market, $type, $params);
        } else {
            if ($market !== null) {
                $request['currency_pair'] = $market['id']; // Should always be set for non-stop
            }
            list($marginMode, $params) = $this->get_margin_mode(false, $params);
            $request['account'] = $marginMode;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        if ($since !== null) {
            $request['from'] = intval($since / 1000);
        }
        if ($till !== null) {
            $request['to'] = intval($till / 1000);
        }
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotGetMyTrades',
            'margin' => 'privateSpotGetMyTrades',
            'swap' => 'privateFuturesGetSettleMyTrades',
            'future' => 'privateDeliveryGetSettleMyTrades',
        ));
        $response = yield $this->$method (array_merge($request, $params));
        //
        // spot
        //
        //     array(
        //         {
        //             "id" => "2876130500",
        //             "create_time" => "1645464610",
        //             "create_time_ms" => "1645464610777.399200",
        //             "currency_pair" => "DOGE_USDT",
        //             "side" => "sell",
        //             "role" => "taker",
        //             "amount" => "10.97",
        //             "price" => "0.137384",
        //             "order_id" => "125924049993",
        //             "fee" => "0.00301420496",
        //             "fee_currency" => "USDT",
        //             "point_fee" => "0",
        //             "gt_fee" => "0"
        //         }
        //     )
        //
        // perpetual swap
        //
        //     array(
        //         {
        //             "size" => -5,
        //             "order_id" => "130264979823",
        //             "id" => 26884791,
        //             "role" => "taker",
        //             "create_time" => 1645465199.5472,
        //             "contract" => "DOGE_USDT",
        //             "price" => "0.136888"
        //         }
        //     )
        //
        // future
        //
        //     array(
        //         {
        //             "id" => 121234231,
        //             "create_time" => 1514764800.123,
        //             "contract" => "BTC_USDT",
        //             "order_id" => "21893289839",
        //             "size" => 100,
        //             "price" => "100.123",
        //             "role" => "taker"
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // public
        //
        //     {
        //         "id" => "1334253759",
        //         "create_time" => "1626342738",
        //         "create_time_ms" => "1626342738331.497000",
        //         "currency_pair" => "BTC_USDT",
        //         "side" => "sell",
        //         "amount" => "0.0022",
        //         "price" => "32452.16"
        //     }
        //
        // public ws
        //
        //     {
        //         $id => 221994511,
        //         time => 1580311438.618647,
        //         price => '9309',
        //         amount => '0.0019',
        //         type => 'sell'
        //     }
        //
        // spot rest
        //
        //     {
        //         "id" => "2876130500",
        //         "create_time" => "1645464610",
        //         "create_time_ms" => "1645464610777.399200",
        //         "currency_pair" => "DOGE_USDT",
        //         "side" => "sell",
        //         "role" => "taker",
        //         "amount" => "10.97",
        //         "price" => "0.137384",
        //         "order_id" => "125924049993",
        //         "fee" => "0.00301420496",
        //         "fee_currency" => "USDT",
        //         "point_fee" => "0","gt_fee":"0"
        //     }
        //
        // perpetual swap rest
        //
        //     {
        //         "size" => -5,
        //         "order_id" => "130264979823",
        //         "id" => 26884791,
        //         "role" => "taker",
        //         "create_time" => 1645465199.5472,
        //         "contract" => "DOGE_USDT",
        //         "price" => "0.136888"
        //     }
        //
        // future rest
        //
        //     {
        //         "id" => 121234231,
        //         "create_time" => 1514764800.123,
        //         "contract" => "BTC_USDT",
        //         "order_id" => "21893289839",
        //         "size" => 100,
        //         "price" => "100.123",
        //         "role" => "taker"
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $timestamp = $this->safe_timestamp_2($trade, 'time', 'create_time');
        $timestamp = $this->safe_integer($trade, 'create_time_ms', $timestamp);
        $marketId = $this->safe_string_2($trade, 'currency_pair', 'contract');
        $symbol = $this->safe_symbol($marketId, $market);
        $amountString = $this->safe_string_2($trade, 'amount', 'size');
        $priceString = $this->safe_string($trade, 'price');
        $contractSide = Precise::string_lt($amountString, '0') ? 'sell' : 'buy';
        $amountString = Precise::string_abs($amountString);
        $side = $this->safe_string_2($trade, 'side', 'type', $contractSide);
        $orderId = $this->safe_string($trade, 'order_id');
        $gtFee = $this->safe_string($trade, 'gt_fee');
        $feeCurrency = null;
        $feeCostString = null;
        if ($gtFee === '0') {
            $feeCurrency = $this->safe_string($trade, 'fee_currency');
            $feeCostString = $this->safe_string($trade, 'fee');
        } else {
            $feeCurrency = 'GT';
            $feeCostString = $gtFee;
        }
        $fee = array(
            'cost' => $feeCostString,
            'currency' => $feeCurrency,
        );
        $takerOrMaker = $this->safe_string($trade, 'role');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $start = intval($since / 1000);
            $request['from'] = $start;
            $request['to'] = $this->sum($start, 30 * 24 * 60 * 60);
        }
        $response = yield $this->privateWalletGetDeposits (array_merge($request, $params));
        return $this->parse_transactions($response, $currency);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $start = intval($since / 1000);
            $request['from'] = $start;
            $request['to'] = $this->sum($start, 30 * 24 * 60 * 60);
        }
        $response = yield $this->privateWalletGetWithdrawals (array_merge($request, $params));
        return $this->parse_transactions($response, $currency);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'address' => $address,
            'amount' => $this->currency_to_precision($code, $amount),
        );
        if ($tag !== null) {
            $request['memo'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string_lower($networks, $network, $network); // handle ETH>ERC20 alias
        if ($network !== null) {
            $request['chain'] = $network;
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privateWithdrawalsPost (array_merge($request, $params));
        //
        //    {
        //        "id" => "w13389675",
        //        "currency" => "USDT",
        //        "amount" => "50",
        //        "address" => "TUu2rLFrmzUodiWfYki7QCNtv1akL682p1",
        //        "memo" => null
        //    }
        //
        return $this->parse_transaction($response, $currency);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'PEND' => 'pending',
            'REQUEST' => 'pending',
            'DMOVE' => 'pending',
            'CANCEL' => 'failed',
            'DONE' => 'ok',
            'BCODE' => 'ok', // GateCode withdrawal
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'd' => 'deposit',
            'w' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // deposits
        //
        //    {
        //        "id" => "d33361395",
        //        "currency" => "USDT_TRX",
        //        "address" => "TErdnxenuLtXfnMafLbfappYdHtnXQ5U4z",
        //        "amount" => "100",
        //        "txid" => "ae9374de34e558562fe18cbb1bf9ab4d9eb8aa7669d65541c9fa2a532c1474a0",
        //        "timestamp" => "1626345819",
        //        "status" => "DONE",
        //        "memo" => ""
        //    }
        //
        // withdraw
        //
        //    {
        //        "id" => "w13389675",
        //        "currency" => "USDT",
        //        "amount" => "50",
        //        "address" => "TUu2rLFrmzUodiWfYki7QCNtv1akL682p1",
        //        "memo" => null
        //    }
        //
        $id = $this->safe_string($transaction, 'id');
        $type = null;
        $amount = $this->safe_string($transaction, 'amount');
        if ($id[0] === 'b') {
            // GateCode handling
            $type = Precise::string_gt($amount, '0') ? 'deposit' : 'withdrawal';
            $amount = Precise::string_abs($amount);
        } elseif ($id !== null) {
            $type = $this->parse_transaction_type($id[0]);
        }
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $txid = $this->safe_string($transaction, 'txid');
        $rawStatus = $this->safe_string($transaction, 'status');
        $status = $this->parse_transaction_status($rawStatus);
        $address = $this->safe_string($transaction, 'address');
        $fee = $this->safe_number($transaction, 'fee');
        $tag = $this->safe_string($transaction, 'memo');
        $timestamp = $this->safe_timestamp($transaction, 'timestamp');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'currency' => $code,
            'amount' => $this->parse_number($amount),
            'network' => null,
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => null,
            'tagFrom' => null,
            'status' => $status,
            'type' => $type,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'updated' => null,
            'fee' => $fee,
        );
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * Create an order on the exchange
         * @param {str} $symbol Unified CCXT $market $symbol
         * @param {str} $type "limit" or "market" *"market" is $contract only*
         * @param {str} $side "buy" or "sell"
         * @param {float} $amount the $amount of currency to trade
         * @param {float} $price *ignored in "market" orders* the $price at which the order is to be fullfilled at in units of the quote currency
         * @param {dict} $params  Extra parameters specific to the exchange API endpoint
         * @param {float} $params->stopPrice The $price at which a $trigger order is triggered at
         * @param {str} $params->timeInForce "GTC", "IOC", or "PO"
         * @param {str} $params->marginMode 'cross' or 'isolated' - $marginMode for margin trading if not provided $this->options['defaultMarginMode'] is used
         * @param {int} $params->iceberg Amount to display for the iceberg order, Null or 0 for normal orders, Set to -1 to hide the order completely
         * @param {str} $params->text User defined information
         * @param {str} $params->account *spot and margin only* "spot", "margin" or "cross_margin"
         * @param {bool} $params->auto_borrow *margin only* Used in margin or cross margin trading to allow automatic loan of insufficient $amount if balance is not enough
         * @param {str} $params->settle *$contract only* Unified Currency Code for settle currency
         * @param {bool} $params->reduceOnly *$contract only* Indicates if this order is to reduce the size of a position
         * @param {bool} $params->close *$contract only* Set as true to close the position, with size set to 0
         * @param {bool} $params->auto_size *$contract only* Set $side to close dual-mode position, close_long closes the long $side, while close_short the short one, size also needs to be set to 0
         * @return {@link https://docs.ccxt.com/en/latest/manual.html#order-structure An order structure}
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $contract = $market['contract'];
        $stopPrice = $this->safe_number($params, 'stopPrice');
        $methodTail = 'Orders';
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        $exchangeSpecificTimeInForce = $this->safe_string_lower_2($params, 'time_in_force', 'tif');
        $postOnly = $this->is_post_only($type === 'market', $exchangeSpecificTimeInForce === 'poc', $params);
        // we only omit the unified $params here
        // this is because the other $params will get extended into the $request
        $timeInForce = $this->safe_string_upper($params, 'timeInForce'); // supported values GTC, IOC, PO
        $tif = null;
        if ($timeInForce !== null) {
            $timeInForceMapping = array(
                'GTC' => 'gtc',
                'IOC' => 'ioc',
                'PO' => 'poc',
            );
            $tif = $this->safe_string($timeInForceMapping, $timeInForce);
            if ($tif === null) {
                throw new ExchangeError($this->id . ' createOrder() does not support $timeInForce "' . $timeInForce . '"');
            }
        }
        $params = $this->omit($params, array( 'stopPrice', 'reduceOnly', 'timeInForce', 'postOnly' ));
        if ($postOnly) {
            $tif = 'poc';
        }
        $isLimitOrder = ($type === 'limit');
        $isMarketOrder = ($type === 'market');
        if ($isLimitOrder && $price === null) {
            throw new ArgumentsRequired($this->id . ' createOrder() requires a $price argument for ' . $type . ' orders');
        }
        if ($contract) {
            $amountToPrecision = $this->amount_to_precision($symbol, $amount);
            $signedAmount = ($side === 'sell') ? Precise::string_neg($amountToPrecision) : $amountToPrecision;
            $amount = intval($signedAmount);
            if ($isMarketOrder) {
                if (($tif === 'poc') || ($tif === 'gtc')) {
                    throw new ExchangeError($this->id . ' createOrder() $timeInForce for $market orders must be "IOC"');
                }
                $tif = 'ioc';
                $price = 0;
            }
        } elseif (!$isLimitOrder) {
            // Gateio doesn't have $market orders for spot
            throw new InvalidOrder($this->id . ' createOrder() does not support ' . $type . ' orders for ' . $market['type'] . ' markets');
        }
        $request = null;
        $trigger = $this->safe_value($params, 'trigger');
        if ($stopPrice === null && $trigger === null) {
            if ($contract) {
                // $contract order
                $request = array(
                    'contract' => $market['id'], // filled in prepareRequest above
                    'size' => $amount, // int64, positive = bid, negative = ask
                    // 'iceberg' => 0, // int64, display size for iceberg order, 0 for non-iceberg, note that you will have to pay the taker fee for the hidden size
                    'price' => $this->price_to_precision($symbol, $price), // 0 for $market order with $tif set as ioc
                    // 'close' => false, // true to close the position, with size set to 0
                    // 'reduce_only' => false, // St as true to be reduce-only order
                    // 'tif' => 'gtc', // gtc, ioc, poc PendingOrCancelled == $postOnly order
                    // 'text' => $clientOrderId, // 't-abcdef1234567890',
                    // 'auto_size' => '', // close_long, close_short, note size also needs to be set to 0
                    'settle' => $market['settleId'], // filled in prepareRequest above
                );
                if ($reduceOnly !== null) {
                    $request['reduce_only'] = $reduceOnly;
                }
                if ($timeInForce !== null) {
                    $request['tif'] = $tif;
                }
            } else {
                $marginMode = null;
                list($marginMode, $params) = $this->get_margin_mode(false, $params);
                // spot order
                $request = array(
                    // 'text' => $clientOrderId, // 't-abcdef1234567890',
                    'currency_pair' => $market['id'], // filled in prepareRequest above
                    'type' => $type,
                    'account' => $marginMode, // 'spot', 'margin', 'cross_margin'
                    'side' => $side,
                    'amount' => $this->amount_to_precision($symbol, $amount),
                    'price' => $this->price_to_precision($symbol, $price),
                    // 'time_in_force' => 'gtc', // gtc, ioc, poc PendingOrCancelled == $postOnly order
                    // 'iceberg' => 0, // $amount to display for the iceberg order, null or 0 for normal orders, set to -1 to hide the order completely
                    // 'auto_borrow' => false, // used in margin or cross margin trading to allow automatic loan of insufficient $amount if balance is not enough
                    // 'auto_repay' => false, // automatic repayment for automatic borrow loan generated by cross margin order, diabled by default
                );
                if ($tif !== null) {
                    $request['time_in_force'] = $tif;
                }
            }
            $clientOrderId = $this->safe_string_2($params, 'text', 'clientOrderId');
            if ($clientOrderId !== null) {
                // user-defined, must follow the rules if not empty
                //     prefixed with t-
                //     no longer than 28 bytes without t- prefix
                //     can only include 0-9, A-Z, a-z, underscores (_), hyphens (-) or dots (.)
                if (strlen($clientOrderId) > 28) {
                    throw new BadRequest($this->id . ' createOrder() $clientOrderId or text param must be up to 28 characters');
                }
                $params = $this->omit($params, array( 'text', 'clientOrderId' ));
                if ($clientOrderId[0] !== 't') {
                    $clientOrderId = 't-' . $clientOrderId;
                }
                $request['text'] = $clientOrderId;
            }
        } else {
            if ($contract) {
                // $contract conditional order
                $rule = ($side === 'buy') ? 1 : 2;
                $request = array(
                    'initial' => array(
                        'contract' => $market['id'],
                        'size' => $amount, // positive = buy, negative = sell, set to 0 to close the position
                        'price' => $this->price_to_precision($symbol, $price), // set to 0 to use $market $price
                        // 'close' => false, // set to true if trying to close the position
                        // 'tif' => 'gtc', // gtc, ioc, if using $market $price, only ioc is supported
                        // 'text' => $clientOrderId, // web, api, app
                        // 'reduce_only' => false,
                    ),
                    'trigger' => array(
                        // 'strategy_type' => 0, // 0 = by $price, 1 = by $price gap, only 0 is supported currently
                        // 'price_type' => 0, // 0 latest deal $price, 1 mark $price, 2 index $price
                        'price' => $this->price_to_precision($symbol, $stopPrice), // $price or gap
                        'rule' => $rule, // 1 means price_type >= $price, 2 means price_type <= $price
                        // 'expiration' => $expiration, how many seconds to wait for the condition to be triggered before cancelling the order
                    ),
                    'settle' => $market['settleId'],
                );
                $expiration = $this->safe_integer($params, 'expiration');
                if ($expiration !== null) {
                    $request['trigger']['expiration'] = $expiration;
                    $params = $this->omit($params, 'expiration');
                }
                if ($reduceOnly !== null) {
                    $request['initial']['reduce_only'] = $reduceOnly;
                }
                if ($tif !== null) {
                    $request['initial']['tif'] = $tif;
                }
            } else {
                // spot conditional order
                $options = $this->safe_value($this->options, 'createOrder', array());
                $marginMode = null;
                list($marginMode, $params) = $this->get_margin_mode(true, $params);
                $defaultExpiration = $this->safe_integer($options, 'expiration');
                $expiration = $this->safe_integer($params, 'expiration', $defaultExpiration);
                $rule = ($side === 'buy') ? '>=' : '<=';
                $triggerPrice = $this->safe_value($trigger, 'price', $stopPrice);
                $request = array(
                    'trigger' => array(
                        'price' => $this->price_to_precision($symbol, $triggerPrice),
                        'rule' => $rule, // >= triggered when $market $price larger than or equal to $price field, <= triggered when $market $price less than or equal to $price field
                        'expiration' => $expiration, // required, how long (in seconds) to wait for the condition to be triggered before cancelling the order
                    ),
                    'put' => array(
                        'type' => $type,
                        'side' => $side,
                        'price' => $this->price_to_precision($symbol, $price),
                        'amount' => $this->amount_to_precision($symbol, $amount),
                        'account' => $marginMode,
                        // 'time_in_force' => $tif, // gtc, ioc for taker only
                    ),
                    'market' => $market['id'],
                );
                if ($tif !== null) {
                    $request['put']['time_in_force'] = $tif;
                }
            }
            $methodTail = 'PriceOrders';
        }
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'privateSpotPost' . $methodTail,
            'margin' => 'privateSpotPost' . $methodTail,
            'swap' => 'privateFuturesPostSettle' . $methodTail,
            'future' => 'privateDeliveryPostSettle' . $methodTail,
        ));
        $response = yield $this->$method ($this->deep_extend($request, $params));
        //
        // spot
        //
        //     {
        //         "id" => "95282841887",
        //         "text" => "apiv4",
        //         "create_time" => "1637383156",
        //         "update_time" => "1637383156",
        //         "create_time_ms" => 1637383156017,
        //         "update_time_ms" => 1637383156017,
        //         "status" => "open",
        //         "currency_pair" => "ETH_USDT",
        //         "type" => "limit",
        //         "account" => "spot",
        //         "side" => "buy",
        //         "amount" => "0.01",
        //         "price" => "3500",
        //         "time_in_force" => "gtc",
        //         "iceberg" => "0",
        //         "left" => "0.01",
        //         "fill_price" => "0",
        //         "filled_total" => "0",
        //         "fee" => "0",
        //         "fee_currency" => "ETH",
        //         "point_fee" => "0",
        //         "gt_fee" => "0",
        //         "gt_discount" => false,
        //         "rebated_fee" => "0",
        //         "rebated_fee_currency" => "USDT"
        //     }
        //
        // spot conditional
        //
        //     array("id" => 5891843)
        //
        // future and perpetual swaps
        //
        //     {
        //         "id" => 95938572327,
        //         "contract" => "ETH_USDT",
        //         "mkfr" => "0",
        //         "tkfr" => "0.0005",
        //         "tif" => "gtc",
        //         "is_reduce_only" => false,
        //         "create_time" => 1637384600.08,
        //         "price" => "3000",
        //         "size" => 1,
        //         "refr" => "0",
        //         "left" => 1,
        //         "text" => "api",
        //         "fill_price" => "0",
        //         "user" => 2436035,
        //         "status" => "open",
        //         "is_liq" => false,
        //         "refu" => 0,
        //         "is_close" => false,
        //         "iceberg" => 0
        //     }
        //
        // futures and perpetual swaps conditionals
        //
        //     array("id" => 7615567)
        //
        return $this->parse_order($response, $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            '_new' => 'open',
            'filled' => 'closed',
            'cancelled' => 'canceled',
            'liquidated' => 'closed',
            'ioc' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // SPOT
        // createOrder/cancelOrder/fetchOrder
        //
        //    {
        //        "id" => "62364648575",
        //        "text" => "apiv4",
        //        "create_time" => "1626354834",
        //        "update_time" => "1626354834",
        //        "create_time_ms" => "1626354833544",
        //        "update_time_ms" => "1626354833544",
        //        "status" => "open",
        //        "currency_pair" => "BTC_USDT",
        //        "type" => "limit",
        //        "account" => "spot",
        //        "side" => "buy",
        //        "amount" => "0.0001",
        //        "price" => "30000",
        //        "time_in_force" => "gtc",
        //        "iceberg" => "0",
        //        "left" => "0.0001",
        //        "fill_price" => "0",
        //        "filled_total" => "0",
        //        "fee" => "0",
        //        "fee_currency" => "BTC",
        //        "point_fee" => "0",
        //        "gt_fee" => "0",
        //        "gt_discount" => true,
        //        "rebated_fee" => "0",
        //        "rebated_fee_currency" => "USDT"
        //     }
        //
        // SPOT TRIGGER ORDERS
        // createOrder
        //
        //    {
        //        "id" => 12604556
        //    }
        //
        // fetchOrder/cancelOrder
        //
        //    {
        //        "market" => "ADA_USDT",
        //        "user" => 6392049,
        //        "trigger" => array(
        //            "price" => "1.08", // stopPrice
        //            "rule" => "\u003e=",
        //            "expiration" => 86400
        //        ),
        //        "put" => array(
        //            "type" => "limit",
        //            "side" => "buy",
        //            "price" => "1.08", // $order $price
        //            "amount" => "1.00000000000000000000",
        //            "account" => "normal",
        //            "time_in_force" => "gtc"
        //        ),
        //        "id" => 71639298,
        //        "ctime" => 1643945985,
        //        "status" => "open"
        //    }
        //
        // FUTURE AND SWAP
        // createOrder/cancelOrder/fetchOrder
        //
        //    {
        //        "id" => 123028481731,
        //        "contract" => "ADA_USDT",
        //        "mkfr" => "-0.00005",
        //        "tkfr" => "0.00048",
        //        "tif" => "ioc",
        //        "is_reduce_only" => false,
        //        "create_time" => 1643950262.68,
        //        "finish_time" => 1643950262.68,
        //        "price" => "0",
        //        "size" => 1,
        //        "refr" => "0",
        //        "left":0,
        //        "text" => "api",
        //        "fill_price" => "1.05273",
        //        "user":6329238,
        //        "finish_as" => "filled",
        //        "status" => "finished",
        //        "is_liq" => false,
        //        "refu":0,
        //        "is_close" => false,
        //        "iceberg" => 0
        //    }
        //
        // TRIGGER ORDERS (FUTURE AND SWAP)
        // createOrder
        //
        //    {
        //        "id" => 12604556
        //    }
        //
        // fetchOrder/cancelOrder
        //
        //    {
        //        "user" => 6320300,
        //        "trigger" => array(
        //            "strategy_type" => 0,
        //            "price_type" => 0,
        //            "price" => "1.03", // stopPrice
        //            "rule" => 2,
        //            "expiration" => 0
        //        ),
        //        "initial" => array(
        //            "contract" => "ADA_USDT",
        //            "size" => -1,
        //            "price" => "1.02",
        //            "tif" => "gtc",
        //            "text" => "",
        //            "iceberg" => 0,
        //            "is_close" => false,
        //            "is_reduce_only" => false,
        //            "auto_size" => ""
        //        ),
        //        "id" => 126393906,
        //        "trade_id" => 0,
        //        "status" => "open",
        //        "reason" => "",
        //        "create_time" => 1643953482,
        //        "finish_time" => 1643953482,
        //        "is_stop_order" => false,
        //        "stop_trigger" => array(
        //            "rule" => 0,
        //            "trigger_price" => "",
        //            "order_price" => ""
        //        ),
        //        "me_order_id" => 0,
        //        "order_type" => ""
        //    }
        //
        $put = $this->safe_value_2($order, 'put', 'initial');
        $trigger = $this->safe_value($order, 'trigger');
        $contract = $this->safe_string($put, 'contract');
        $type = $this->safe_string($put, 'type');
        $timeInForce = $this->safe_string_upper_2($put, 'time_in_force', 'tif');
        $amount = $this->safe_string_2($put, 'amount', 'size');
        $side = $this->safe_string($put, 'side');
        $price = $this->safe_string($put, 'price');
        $contract = $this->safe_string($order, 'contract', $contract);
        $type = $this->safe_string($order, 'type', $type);
        $timeInForce = $this->safe_string_upper_2($order, 'time_in_force', 'tif', $timeInForce);
        if ($timeInForce === 'POC') {
            $timeInForce = 'PO';
        }
        $postOnly = ($timeInForce === 'PO');
        $amount = $this->safe_string_2($order, 'amount', 'size', $amount);
        $side = $this->safe_string($order, 'side', $side);
        $price = $this->safe_string($order, 'price', $price);
        $remaining = $this->safe_string($order, 'left');
        $filled = Precise::string_sub($amount, $remaining);
        $cost = $this->safe_string($order, 'filled_total');
        $rawStatus = null;
        $average = null;
        if ($put) {
            $remaining = $amount;
            $filled = '0';
            $cost = '0';
        }
        if ($contract) {
            $isMarketOrder = Precise::string_equals($price, '0') && ($timeInForce === 'IOC');
            $type = $isMarketOrder ? 'market' : 'limit';
            $side = Precise::string_gt($amount, '0') ? 'buy' : 'sell';
            $rawStatus = $this->safe_string($order, 'finish_as', 'open');
            $average = $this->safe_number($order, 'fill_price');
        } else {
            $rawStatus = $this->safe_string($order, 'status');
        }
        $timestamp = $this->safe_integer($order, 'create_time_ms');
        if ($timestamp === null) {
            $timestamp = $this->safe_timestamp_2($order, 'create_time', 'ctime');
        }
        $lastTradeTimestamp = $this->safe_integer($order, 'update_time_ms');
        if ($lastTradeTimestamp === null) {
            $lastTradeTimestamp = $this->safe_timestamp_2($order, 'update_time', 'finish_time');
        }
        $exchangeSymbol = $this->safe_string_2($order, 'currency_pair', 'market', $contract);
        // Everything below this(above return) is related to $fees
        $fees = array();
        $gtFee = $this->safe_string($order, 'gt_fee');
        if ($gtFee) {
            $fees[] = array(
                'currency' => 'GT',
                'cost' => $gtFee,
            );
        }
        $fee = $this->safe_string($order, 'fee');
        if ($fee) {
            $fees[] = array(
                'currency' => $this->safe_currency_code($this->safe_string($order, 'fee_currency')),
                'cost' => $fee,
            );
        }
        $rebate = $this->safe_string($order, 'rebated_fee');
        if ($rebate) {
            $fees[] = array(
                'currency' => $this->safe_currency_code($this->safe_string($order, 'rebated_fee_currency')),
                'cost' => Precise::string_neg($rebate),
            );
        }
        $numFeeCurrencies = is_array($fees) ? count($fees) : 0;
        $multipleFeeCurrencies = $numFeeCurrencies > 1;
        $status = $this->parse_order_status($rawStatus);
        return $this->safe_order(array(
            'id' => $this->safe_string($order, 'id'),
            'clientOrderId' => $this->safe_string($order, 'text'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'status' => $status,
            'symbol' => $this->safe_symbol($exchangeSymbol),
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'reduceOnly' => $this->safe_value($order, 'is_reduce_only'),
            'side' => $side,
            'price' => $this->parse_number($price),
            'stopPrice' => $this->safe_number($trigger, 'price'),
            'average' => $average,
            'amount' => $this->parse_number(Precise::string_abs($amount)),
            'cost' => Precise::string_abs($cost),
            'filled' => $this->parse_number(Precise::string_abs($filled)),
            'remaining' => $this->parse_number(Precise::string_abs($remaining)),
            'fee' => $multipleFeeCurrencies ? null : $this->safe_value($fees, 0),
            'fees' => $multipleFeeCurrencies ? $fees : array(),
            'trades' => null,
            'info' => $order,
        ), $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        /**
         * Retrieves information on an order
         * @param {str} $id Order $id
         * @param {str} $symbol Unified $market $symbol, *required for spot and margin*
         * @param {dict} $params Parameters specified by the exchange api
         * @param {bool} $params->stop True if the order being fetched is a trigger order
         * @param {str} $params->marginMode 'cross' or 'isolated' - marginMode for margin trading if not provided $this->options['defaultMarginMode'] is used
         * @param {str} $params->type 'spot', 'swap', or 'future', if not provided $this->options['defaultMarginMode'] is used
         * @param {str} $params->settle 'btc' or 'usdt' - settle currency for perpetual swap and future - $market settle currency is used if $symbol !== null, default="usdt" for swap and "btc" for future
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        yield $this->load_markets();
        $stop = $this->safe_value_2($params, 'is_stop_order', 'stop', false);
        $params = $this->omit($params, array( 'is_stop_order', 'stop' ));
        $clientOrderId = $this->safe_string_2($params, 'text', 'clientOrderId');
        $orderId = $id;
        if ($clientOrderId !== null) {
            $params = $this->omit($params, array( 'text', 'clientOrderId' ));
            if ($clientOrderId[0] !== 't') {
                $clientOrderId = 't-' . $clientOrderId;
            }
            $orderId = $clientOrderId;
        }
        $market = ($symbol === null) ? null : $this->market($symbol);
        list($type, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
        $contract = ($type === 'swap') || ($type === 'future');
        list($request, $requestParams) = $contract ? $this->prepare_request($market, $type, $query) : $this->spot_order_prepare_request($market, $stop, $query);
        $request['order_id'] = $orderId;
        $methodMiddle = $stop ? 'PriceOrders' : 'Orders';
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotGet' . $methodMiddle . 'OrderId',
            'margin' => 'privateSpotGet' . $methodMiddle . 'OrderId',
            'swap' => 'privateFuturesGetSettle' . $methodMiddle . 'OrderId',
            'future' => 'privateDeliveryGetSettle' . $methodMiddle . 'OrderId',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        return $this->parse_order($response, $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches all open orders
         * @param {str} $symbol Unified market $symbol
         * @param {int} $since earliest time in ms for orders in the response
         * @param {int} $limit max number of order structures to return
         * @param {dict} $params exchange specific $params
         * @param {bool} $params->stop true for fetching stop orders
         * @param {str} $params->type spot, margin, swap or future, if not provided $this->options['defaultType'] is used
         * @param {str} $params->marginMode 'cross' or 'isolated' - marginMode for type='margin', if not provided $this->options['defaultMarginMode'] is used
         * @return An array of order structures
         */
        return yield $this->fetch_orders_by_status('open', $symbol, $since, $limit, $params);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches all closed orders
         * @param {str} $symbol Unified market $symbol of the market to fetch orders for
         * @param {int} $since earliest time in ms for orders in the response
         * @param {int} $limit max number of order structures to return
         * @param {dict} $params exchange specific $params
         * @param {bool} $params->stop true for fetching stop orders
         * @param {str} $params->type spot, swap or future, if not provided $this->options['defaultType'] is used
         * @param {str} $params->marginMode 'cross' or 'isolated' - marginMode for margin trading if not provided $this->options['defaultMarginMode'] is used
         * @return An array of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        return yield $this->fetch_orders_by_status('finished', $symbol, $since, $limit, $params);
    }

    public function fetch_orders_by_status($status, $symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = ($symbol === null) ? null : $this->market($symbol);
        $stop = $this->safe_value($params, 'stop');
        $params = $this->omit($params, 'stop');
        list($type, $query) = $this->handle_market_type_and_params('fetchOrdersByStatus', $market, $params);
        $spot = ($type === 'spot') || ($type === 'margin');
        list($request, $requestParams) = $spot ? $this->multi_order_spot_prepare_request($market, $stop, $query) : $this->prepare_request($market, $type, $query);
        if ($status === 'closed') {
            $status = 'finished';
        }
        $request['status'] = $status;
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null && $spot) {
            $request['from'] = intval($since / 1000);
        }
        $methodTail = $stop ? 'PriceOrders' : 'Orders';
        $openSpotOrders = $spot && ($status === 'open') && !$stop;
        if ($openSpotOrders) {
            $methodTail = 'OpenOrders';
        }
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotGet' . $methodTail,
            'margin' => 'privateSpotGet' . $methodTail,
            'swap' => 'privateFuturesGetSettle' . $methodTail,
            'future' => 'privateDeliveryGetSettle' . $methodTail,
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        // SPOT Open Orders
        //
        //    array(
        //        array(
        //            "currency_pair" => "ADA_USDT",
        //            "total" => 2,
        //            "orders" => array(
        //                array(
        //                    "id" => "155498539874",
        //                    "text" => "apiv4",
        //                    "create_time" => "1652406843",
        //                    "update_time" => "1652406843",
        //                    "create_time_ms" => 1652406843295,
        //                    "update_time_ms" => 1652406843295,
        //                    "status" => "open",
        //                    "currency_pair" => "ADA_USDT",
        //                    "type" => "limit",
        //                    "account" => "spot",
        //                    "side" => "buy",
        //                    "amount" => "3",
        //                    "price" => "0.35",
        //                    "time_in_force" => "gtc",
        //                    "iceberg" => "0",
        //                    "left" => "3",
        //                    "fill_price" => "0",
        //                    "filled_total" => "0",
        //                    "fee" => "0",
        //                    "fee_currency" => "ADA",
        //                    "point_fee" => "0",
        //                    "gt_fee" => "0",
        //                    "gt_discount" => false,
        //                    "rebated_fee" => "0",
        //                    "rebated_fee_currency" => "USDT"
        //                ),
        //                ...
        //            )
        //        ),
        //        ...
        //    )
        //
        // SPOT
        //
        //    array(
        //        {
        //           "id" => "8834234273",
        //           "text" => "3",
        //           "create_time" => "1635406193",
        //           "update_time" => "1635406193",
        //           "create_time_ms" => 1635406193361,
        //           "update_time_ms" => 1635406193361,
        //           "status" => "closed",
        //           "currency_pair" => "BTC_USDT",
        //           "type" => "limit",
        //           "account" => "spot", // margin for margin $orders
        //           "side" => "sell",
        //           "amount" => "0.0002",
        //           "price" => "58904.01",
        //           "time_in_force" => "gtc",
        //           "iceberg" => "0",
        //           "left" => "0.0000",
        //           "fill_price" => "11.790516",
        //           "filled_total" => "11.790516",
        //           "fee" => "0.023581032",
        //           "fee_currency" => "USDT",
        //           "point_fee" => "0",
        //           "gt_fee" => "0",
        //           "gt_discount" => false,
        //           "rebated_fee_currency" => "BTC"
        //        }
        //    )
        //
        // Spot Stop
        //
        //    array(
        //        {
        //            "market" => "ADA_USDT",
        //            "user" => 10406147,
        //            "trigger" => array(
        //                "price" => "0.65",
        //                "rule" => "\u003c=",
        //                "expiration" => 86400
        //            ),
        //            "put" => array(
        //                "type" => "limit",
        //                "side" => "sell",
        //                "price" => "0.65",
        //                "amount" => "2.00000000000000000000",
        //                "account" => "normal",  // margin for margin $orders
        //                "time_in_force" => "gtc"
        //            ),
        //            "id" => 8449909,
        //            "ctime" => 1652188982,
        //            "status" => "open"
        //        }
        //    )
        //
        // Perpetual Swap
        //
        //    array(
        //        {
        //           "status" => "finished",
        //           "size" => -1,
        //           "left" => 0,
        //           "id" => 82750739203,
        //           "is_liq" => false,
        //           "is_close" => false,
        //           "contract" => "BTC_USDT",
        //           "text" => "web",
        //           "fill_price" => "60721.3",
        //           "finish_as" => "filled",
        //           "iceberg" => 0,
        //           "tif" => "ioc",
        //           "is_reduce_only" => true,
        //           "create_time" => 1635403475.412,
        //           "finish_time" => 1635403475.4127,
        //           "price" => "0"
        //        }
        //    )
        //
        $result = $response;
        if ($openSpotOrders) {
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $orders = $this->safe_value($response[$i], 'orders');
                $result = $this->array_concat($result, $orders);
            }
        }
        $orders = $this->parse_orders($result, $market, $since, $limit);
        return $this->filter_by_symbol_since_limit($orders, $symbol, $since, $limit);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * Cancels an open order
         * @param {str} $id Order $id
         * @param {str} $symbol Unified $market $symbol
         * @param {dict} $params Parameters specified by the exchange api
         * @param {bool} $params->stop True if the order to be cancelled is a trigger order
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        yield $this->load_markets();
        $market = ($symbol === null) ? null : $this->market($symbol);
        $stop = $this->safe_value_2($params, 'is_stop_order', 'stop', false);
        $params = $this->omit($params, array( 'is_stop_order', 'stop' ));
        list($type, $query) = $this->handle_market_type_and_params('cancelOrder', $market, $params);
        list($request, $requestParams) = ($type === 'spot' || $type === 'margin') ? $this->spot_order_prepare_request($market, $stop, $query) : $this->prepare_request($market, $type, $query);
        $request['order_id'] = $id;
        $pathMiddle = $stop ? 'Price' : '';
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotDelete' . $pathMiddle . 'OrdersOrderId',
            'margin' => 'privateSpotDelete' . $pathMiddle . 'OrdersOrderId',
            'swap' => 'privateFuturesDeleteSettle' . $pathMiddle . 'OrdersOrderId',
            'future' => 'privateDeliveryDeleteSettle' . $pathMiddle . 'OrdersOrderId',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        // spot
        //
        //     {
        //         "id" => "95282841887",
        //         "text" => "apiv4",
        //         "create_time" => "1637383156",
        //         "update_time" => "1637383235",
        //         "create_time_ms" => 1637383156017,
        //         "update_time_ms" => 1637383235085,
        //         "status" => "cancelled",
        //         "currency_pair" => "ETH_USDT",
        //         "type" => "limit",
        //         "account" => "spot",
        //         "side" => "buy",
        //         "amount" => "0.01",
        //         "price" => "3500",
        //         "time_in_force" => "gtc",
        //         "iceberg" => "0",
        //         "left" => "0.01",
        //         "fill_price" => "0",
        //         "filled_total" => "0",
        //         "fee" => "0",
        //         "fee_currency" => "ETH",
        //         "point_fee" => "0",
        //         "gt_fee" => "0",
        //         "gt_discount" => false,
        //         "rebated_fee" => "0",
        //         "rebated_fee_currency" => "USDT"
        //     }
        //
        // spot conditional
        //
        //     {
        //         "market" => "ETH_USDT",
        //         "user" => 2436035,
        //         "trigger" => array(
        //             "price" => "3500",
        //             "rule" => "\u003c=",
        //             "expiration" => 86400
        //         ),
        //         "put" => array(
        //             "type" => "limit",
        //             "side" => "buy",
        //             "price" => "3500",
        //             "amount" => "0.01000000000000000000",
        //             "account" => "normal",
        //             "time_in_force" => "gtc"
        //         ),
        //         "id" => 5891843,
        //         "ctime" => 1637382379,
        //         "ftime" => 1637382673,
        //         "status" => "canceled"
        //     }
        //
        // perpetual swaps
        //
        //     {
        //         $id => "82241928192",
        //         contract => "BTC_USDT",
        //         mkfr => "0",
        //         tkfr => "0.0005",
        //         tif => "gtc",
        //         is_reduce_only => false,
        //         create_time => "1635196145.06",
        //         finish_time => "1635196233.396",
        //         price => "61000",
        //         size => "4",
        //         refr => "0",
        //         left => "4",
        //         text => "web",
        //         fill_price => "0",
        //         user => "6693577",
        //         finish_as => "cancelled",
        //         status => "finished",
        //         is_liq => false,
        //         refu => "0",
        //         is_close => false,
        //         iceberg => "0",
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = ($symbol === null) ? null : $this->market($symbol);
        $stop = $this->safe_value($params, 'stop');
        $params = $this->omit($params, 'stop');
        list($type, $query) = $this->handle_market_type_and_params('cancelAllOrders', $market, $params);
        list($request, $requestParams) = ($type === 'spot') ? $this->multi_order_spot_prepare_request($market, $stop, $query) : $this->prepare_request($market, $type, $query);
        $methodTail = $stop ? 'PriceOrders' : 'Orders';
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotDelete' . $methodTail,
            'margin' => 'privateSpotDelete' . $methodTail,
            'swap' => 'privateFuturesDeleteSettle' . $methodTail,
            'future' => 'privateDeliveryDeleteSettle' . $methodTail,
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        //    array(
        //        {
        //            "id" => 139797004085,
        //            "contract" => "ADA_USDT",
        //            "mkfr" => "0",
        //            "tkfr" => "0.0005",
        //            "tif" => "gtc",
        //            "is_reduce_only" => false,
        //            "create_time" => 1647911169.343,
        //            "finish_time" => 1647911226.849,
        //            "price" => "0.8",
        //            "size" => 1,
        //            "refr" => "0.3",
        //            "left" => 1,
        //            "text" => "api",
        //            "fill_price" => "0",
        //            "user" => 6693577,
        //            "finish_as" => "cancelled",
        //            "status" => "finished",
        //            "is_liq" => false,
        //            "refu" => 2436035,
        //            "is_close" => false,
        //            "iceberg" => 0
        //        }
        //        ...
        //    )
        //
        return $this->parse_orders($response, $market);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        /**
         * makes internal transfers of funds between accounts on the same exchange
         * @param {str} $code unified $currency $code for $currency being transferred
         * @param {float} $amount the $amount of $currency to $transfer
         * @param {str} $fromAccount the account to $transfer $currency from
         * @param {str} $toAccount the account to $transfer $currency to
         * @param {dict} $params Exchange specific parameters
         * @param {dict} $params->symbol Unified $market $symbol *required for type == margin*
         * @return A {@link https://docs.ccxt.com/en/latest/manual.html#$transfer-structure $transfer structure}
         */
        yield $this->load_markets();
        $currency = $this->currency($code);
        $fromId = $this->parse_account($fromAccount);
        $toId = $this->parse_account($toAccount);
        $truncated = $this->currency_to_precision($code, $amount);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $truncated,
        );
        if (!(is_array($this->options['accountsByType']) && array_key_exists($fromId, $this->options['accountsByType']))) {
            $request['from'] = 'margin';
            $request['currency_pair'] = $fromId;
        } else {
            $request['from'] = $fromId;
        }
        if (!(is_array($this->options['accountsByType']) && array_key_exists($toId, $this->options['accountsByType']))) {
            $request['to'] = 'margin';
            $request['currency_pair'] = $toId;
        } else {
            $request['to'] = $toId;
        }
        if ($fromId === 'margin' || $toId === 'margin') {
            $symbol = $this->safe_string_2($params, 'symbol', 'currency_pair');
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' $transfer requires $params["symbol"] for isolated margin transfers');
            }
            $market = $this->market($symbol);
            $request['currency_pair'] = $market['id'];
            $params = $this->omit($params, 'symbol');
        }
        if (($toId === 'futures') || ($toId === 'delivery') || ($fromId === 'futures') || ($fromId === 'delivery')) {
            $request['settle'] = $currency['lowerCaseId'];
        }
        $response = yield $this->privateWalletPostTransfers (array_merge($request, $params));
        //
        // according to the docs (however actual $response seems to be an empty string '')
        //
        //    {
        //        "currency" => "BTC",
        //        "from" => "spot",
        //        "to" => "margin",
        //        "amount" => "1",
        //        "currency_pair" => "BTC_USDT"
        //    }
        //
        $transfer = $this->parse_transfer($response, $currency);
        return array_merge($transfer, array(
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'amount' => $this->parse_number($truncated),
        ));
    }

    public function parse_account($account) {
        $accountsByType = $this->options['accountsByType'];
        if (is_array($accountsByType) && array_key_exists($account, $accountsByType)) {
            return $accountsByType[$account];
        } elseif (is_array($this->markets) && array_key_exists($account, $this->markets)) {
            $market = $this->market($account);
            return $market['id'];
        } else {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new ExchangeError($this->id . ' accounts must be one of ' . implode(', ', $keys) . ' or an isolated margin symbol');
        }
    }

    public function parse_transfer($transfer, $currency = null) {
        $timestamp = $this->milliseconds();
        return array(
            'id' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $this->safe_currency_code(null, $currency),
            'amount' => null,
            'fromAccount' => null,
            'toAccount' => null,
            'status' => null,
            'info' => $transfer,
        );
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        // WARNING => THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if (($leverage < 0) || ($leverage > 100)) {
            throw new BadRequest($this->id . ' setLeverage() $leverage should be between 1 and 100');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $method = $this->get_supported_mapping($market['type'], array(
            'swap' => 'privateFuturesPostSettlePositionsContractLeverage',
            'future' => 'privateDeliveryPostSettlePositionsContractLeverage',
        ));
        list($request, $query) = $this->prepare_request($market, null, $params);
        $defaultMarginMode = $this->safe_string_2($this->options, 'marginMode', 'defaultMarginMode');
        $crossLeverageLimit = $this->safe_string($query, 'cross_leverage_limit');
        $marginMode = $this->safe_string($query, 'marginMode', $defaultMarginMode);
        if ($crossLeverageLimit !== null) {
            $marginMode = 'cross';
            $leverage = $crossLeverageLimit;
        }
        if ($marginMode === 'cross' || $marginMode === 'cross_margin') {
            $request['query'] = array(
                'cross_leverage_limit' => (string) $leverage,
                'leverage' => '0',
            );
        } else {
            $request['query'] = array(
                'leverage' => (string) $leverage,
            );
        }
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     {
        //         "value" => "0",
        //         "leverage" => "5",
        //         "mode" => "single",
        //         "realised_point" => "0",
        //         "contract" => "BTC_USDT",
        //         "entry_price" => "0",
        //         "mark_price" => "62035.86",
        //         "history_point" => "0",
        //         "realised_pnl" => "0",
        //         "close_order" => null,
        //         "size" => 0,
        //         "cross_leverage_limit" => "0",
        //         "pending_orders" => 0,
        //         "adl_ranking" => 6,
        //         "maintenance_rate" => "0.005",
        //         "unrealised_pnl" => "0",
        //         "user" => 2436035,
        //         "leverage_max" => "100",
        //         "history_pnl" => "0",
        //         "risk_limit" => "1000000",
        //         "margin" => "0",
        //         "last_close_pnl" => "0",
        //         "liq_price" => "0"
        //     }
        //
        return $response;
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //         value => "12.475572",
        //         $leverage => "0",
        //         mode => "single",
        //         realised_point => "0",
        //         $contract => "BTC_USDT",
        //         entry_price => "62422.6",
        //         mark_price => "62377.86",
        //         history_point => "0",
        //         realised_pnl => "-0.00624226",
        //         close_order =>  null,
        //         $size => "2",
        //         cross_leverage_limit => "25",
        //         pending_orders => "0",
        //         adl_ranking => "5",
        //         maintenance_rate => "0.005",
        //         unrealised_pnl => "-0.008948",
        //         user => "663337",
        //         leverage_max => "100",
        //         history_pnl => "14.98868396636",
        //         risk_limit => "1000000",
        //         margin => "0.740721495056",
        //         last_close_pnl => "-0.041996015",
        //         liq_price => "59058.58"
        //     }
        //
        $contract = $this->safe_string($position, 'contract');
        $market = $this->safe_market($contract, $market);
        $size = $this->safe_string($position, 'size');
        $side = null;
        if (Precise::string_gt($size, '0')) {
            $side = 'long';
        } elseif (Precise::string_lt($size, '0')) {
            $side = 'short';
        }
        $maintenanceRate = $this->safe_string($position, 'maintenance_rate');
        $notional = $this->safe_string($position, 'value');
        $leverage = $this->safe_string($position, 'leverage');
        $marginMode = null;
        if ($leverage === '0') {
            $marginMode = 'cross';
        } else {
            $marginMode = 'isolated';
        }
        $unrealisedPnl = $this->safe_string($position, 'unrealised_pnl');
        // Initial Position Margin = ( Position Value / Leverage ) . Close Position Fee
        // *The default $leverage under the full $position is the highest $leverage in the $market->
        // *Trading fee is charged as Taker Fee Rate (0.075%).
        $takerFee = '0.00075';
        $feePaid = Precise::string_mul($takerFee, $notional);
        $initialMarginString = Precise::string_add(Precise::string_div($notional, $leverage), $feePaid);
        $percentage = Precise::string_mul(Precise::string_div($unrealisedPnl, $initialMarginString), '100');
        return array(
            'info' => $position,
            'symbol' => $this->safe_string($market, 'symbol'),
            'timestamp' => null,
            'datetime' => null,
            'initialMargin' => $this->parse_number($initialMarginString),
            'initialMarginPercentage' => $this->parse_number(Precise::string_div($initialMarginString, $notional)),
            'maintenanceMargin' => $this->parse_number(Precise::string_mul($maintenanceRate, $notional)),
            'maintenanceMarginPercentage' => $this->parse_number($maintenanceRate),
            'entryPrice' => $this->safe_number($position, 'entry_price'),
            'notional' => $this->parse_number($notional),
            'leverage' => $this->safe_number($position, 'leverage'),
            'unrealizedPnl' => $this->parse_number($unrealisedPnl),
            'contracts' => $this->parse_number(Precise::string_abs($size)),
            'contractSize' => $this->safe_value($market, 'contractSize'),
            // 'realisedPnl' => $position['realised_pnl'],
            'marginRatio' => null,
            'liquidationPrice' => $this->safe_number($position, 'liq_price'),
            'markPrice' => $this->safe_number($position, 'mark_price'),
            'collateral' => $this->safe_number($position, 'margin'),
            'marginMode' => $marginMode,
            'marginType' => $marginMode, // deprecated
            'side' => $side,
            'percentage' => $this->parse_number($percentage),
        );
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        /**
         * Fetch trades positions
         * @param {[str]} $symbols Not used by Gateio, but parsed internally by CCXT
         * @param {dict} $params exchange specific parameters
         * @param {str} $params->settle 'btc' or 'usdt' - settle currency for perpetual swap and future - default="usdt" for swap and "btc" for future
         * @param {str} $params->type swap or future, if not provided $this->options['defaultType'] is used
         * @return An array of {@link https://docs.ccxt.com/en/latest/manual.html#position-structure position structures}
         */
        yield $this->load_markets();
        list($type, $query) = $this->handle_market_type_and_params('fetchPositions', null, $params);
        list($request, $requestParams) = $this->prepare_request(null, $type, $query);
        $method = $this->get_supported_mapping($type, array(
            'swap' => 'privateFuturesGetSettlePositions',
            'future' => 'privateDeliveryGetSettlePositions',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        //     array(
        //         {
        //             value => "12.475572",
        //             leverage => "0",
        //             mode => "single",
        //             realised_point => "0",
        //             contract => "BTC_USDT",
        //             entry_price => "62422.6",
        //             mark_price => "62377.86",
        //             history_point => "0",
        //             realised_pnl => "-0.00624226",
        //             close_order =>  null,
        //             size => "2",
        //             cross_leverage_limit => "25",
        //             pending_orders => "0",
        //             adl_ranking => "5",
        //             maintenance_rate => "0.005",
        //             unrealised_pnl => "-0.008948",
        //             user => "6693577",
        //             leverage_max => "100",
        //             history_pnl => "14.98868396636",
        //             risk_limit => "1000000",
        //             margin => "0.740721495056",
        //             last_close_pnl => "-0.041996015",
        //             liq_price => "59058.58"
        //         }
        //     )
        //
        return $this->parse_positions($response, $symbols);
    }

    public function fetch_leverage_tiers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        list($type, $query) = $this->handle_market_type_and_params('fetchLeverageTiers', null, $params);
        list($request, $requestParams) = $this->prepare_request(null, $type, $query);
        if ($type !== 'future' && $type !== 'swap') {
            throw new BadRequest($this->id . ' fetchLeverageTiers only supports swap and future');
        }
        $method = $this->get_supported_mapping($type, array(
            'swap' => 'publicFuturesGetSettleContracts',
            'future' => 'publicDeliveryGetSettleContracts',
        ));
        $response = yield $this->$method (array_merge($request, $requestParams));
        //
        // Perpetual swap
        //
        //    array(
        //        {
        //            "name" => "BTC_USDT",
        //            "type" => "direct",
        //            "quanto_multiplier" => "0.0001",
        //            "ref_discount_rate" => "0",
        //            "order_price_deviate" => "0.5",
        //            "maintenance_rate" => "0.005",
        //            "mark_type" => "index",
        //            "last_price" => "38026",
        //            "mark_price" => "37985.6",
        //            "index_price" => "37954.92",
        //            "funding_rate_indicative" => "0.000219",
        //            "mark_price_round" => "0.01",
        //            "funding_offset" => 0,
        //            "in_delisting" => false,
        //            "risk_limit_base" => "1000000",
        //            "interest_rate" => "0.0003",
        //            "order_price_round" => "0.1",
        //            "order_size_min" => 1,
        //            "ref_rebate_rate" => "0.2",
        //            "funding_interval" => 28800,
        //            "risk_limit_step" => "1000000",
        //            "leverage_min" => "1",
        //            "leverage_max" => "100",
        //            "risk_limit_max" => "8000000",
        //            "maker_fee_rate" => "-0.00025",
        //            "taker_fee_rate" => "0.00075",
        //            "funding_rate" => "0.002053",
        //            "order_size_max" => 1000000,
        //            "funding_next_apply" => 1610035200,
        //            "short_users" => 977,
        //            "config_change_time" => 1609899548,
        //            "trade_size" => 28530850594,
        //            "position_size" => 5223816,
        //            "long_users" => 455,
        //            "funding_impact_value" => "60000",
        //            "orders_limit" => 50,
        //            "trade_id" => 10851092,
        //            "orderbook_id" => 2129638396
        //        }
        //    )
        //
        // Delivery Futures
        //
        //    array(
        //        {
        //            "name" => "BTC_USDT_20200814",
        //            "underlying" => "BTC_USDT",
        //            "cycle" => "WEEKLY",
        //            "type" => "direct",
        //            "quanto_multiplier" => "0.0001",
        //            "mark_type" => "index",
        //            "last_price" => "9017",
        //            "mark_price" => "9019",
        //            "index_price" => "9005.3",
        //            "basis_rate" => "0.185095",
        //            "basis_value" => "13.7",
        //            "basis_impact_value" => "100000",
        //            "settle_price" => "0",
        //            "settle_price_interval" => 60,
        //            "settle_price_duration" => 1800,
        //            "settle_fee_rate" => "0.0015",
        //            "expire_time" => 1593763200,
        //            "order_price_round" => "0.1",
        //            "mark_price_round" => "0.1",
        //            "leverage_min" => "1",
        //            "leverage_max" => "100",
        //            "maintenance_rate" => "1000000",
        //            "risk_limit_base" => "140.726652109199",
        //            "risk_limit_step" => "1000000",
        //            "risk_limit_max" => "8000000",
        //            "maker_fee_rate" => "-0.00025",
        //            "taker_fee_rate" => "0.00075",
        //            "ref_discount_rate" => "0",
        //            "ref_rebate_rate" => "0.2",
        //            "order_price_deviate" => "0.5",
        //            "order_size_min" => 1,
        //            "order_size_max" => 1000000,
        //            "orders_limit" => 50,
        //            "orderbook_id" => 63,
        //            "trade_id" => 26,
        //            "trade_size" => 435,
        //            "position_size" => 130,
        //            "config_change_time" => 1593158867,
        //            "in_delisting" => false
        //        }
        //    )
        //
        return $this->parse_leverage_tiers($response, $symbols, 'name');
    }

    public function parse_market_leverage_tiers($info, $market = null) {
        /**
         * @ignore
         * https://www.gate.io/help/futures/perpetual/22162/instrctions-of-risk-limit
         * @param {dict} $info Exchange $market response for 1 $market
         * @param {dict} $market CCXT $market
         */
        //
        // Perpetual swap
        //
        //    {
        //        "name" => "BTC_USDT",
        //        "type" => "direct",
        //        "quanto_multiplier" => "0.0001",
        //        "ref_discount_rate" => "0",
        //        "order_price_deviate" => "0.5",
        //        "maintenance_rate" => "0.005",
        //        "mark_type" => "index",
        //        "last_price" => "38026",
        //        "mark_price" => "37985.6",
        //        "index_price" => "37954.92",
        //        "funding_rate_indicative" => "0.000219",
        //        "mark_price_round" => "0.01",
        //        "funding_offset" => 0,
        //        "in_delisting" => false,
        //        "risk_limit_base" => "1000000",
        //        "interest_rate" => "0.0003",
        //        "order_price_round" => "0.1",
        //        "order_size_min" => 1,
        //        "ref_rebate_rate" => "0.2",
        //        "funding_interval" => 28800,
        //        "risk_limit_step" => "1000000",
        //        "leverage_min" => "1",
        //        "leverage_max" => "100",
        //        "risk_limit_max" => "8000000",
        //        "maker_fee_rate" => "-0.00025",
        //        "taker_fee_rate" => "0.00075",
        //        "funding_rate" => "0.002053",
        //        "order_size_max" => 1000000,
        //        "funding_next_apply" => 1610035200,
        //        "short_users" => 977,
        //        "config_change_time" => 1609899548,
        //        "trade_size" => 28530850594,
        //        "position_size" => 5223816,
        //        "long_users" => 455,
        //        "funding_impact_value" => "60000",
        //        "orders_limit" => 50,
        //        "trade_id" => 10851092,
        //        "orderbook_id" => 2129638396
        //    }
        //
        // Delivery Futures
        //
        //    {
        //        "name" => "BTC_USDT_20200814",
        //        "underlying" => "BTC_USDT",
        //        "cycle" => "WEEKLY",
        //        "type" => "direct",
        //        "quanto_multiplier" => "0.0001",
        //        "mark_type" => "index",
        //        "last_price" => "9017",
        //        "mark_price" => "9019",
        //        "index_price" => "9005.3",
        //        "basis_rate" => "0.185095",
        //        "basis_value" => "13.7",
        //        "basis_impact_value" => "100000",
        //        "settle_price" => "0",
        //        "settle_price_interval" => 60,
        //        "settle_price_duration" => 1800,
        //        "settle_fee_rate" => "0.0015",
        //        "expire_time" => 1593763200,
        //        "order_price_round" => "0.1",
        //        "mark_price_round" => "0.1",
        //        "leverage_min" => "1",
        //        "leverage_max" => "100",
        //        "maintenance_rate" => "1000000",
        //        "risk_limit_base" => "140.726652109199",
        //        "risk_limit_step" => "1000000",
        //        "risk_limit_max" => "8000000",
        //        "maker_fee_rate" => "-0.00025",
        //        "taker_fee_rate" => "0.00075",
        //        "ref_discount_rate" => "0",
        //        "ref_rebate_rate" => "0.2",
        //        "order_price_deviate" => "0.5",
        //        "order_size_min" => 1,
        //        "order_size_max" => 1000000,
        //        "orders_limit" => 50,
        //        "orderbook_id" => 63,
        //        "trade_id" => 26,
        //        "trade_size" => 435,
        //        "position_size" => 130,
        //        "config_change_time" => 1593158867,
        //        "in_delisting" => false
        //    }
        //
        $maintenanceMarginUnit = $this->safe_string($info, 'maintenance_rate'); // '0.005',
        $leverageMax = $this->safe_string($info, 'leverage_max'); // '100',
        $riskLimitStep = $this->safe_string($info, 'risk_limit_step'); // '1000000',
        $riskLimitMax = $this->safe_string($info, 'risk_limit_max'); // '16000000',
        $initialMarginUnit = Precise::string_div('1', $leverageMax);
        $maintenanceMarginRate = $maintenanceMarginUnit;
        $initialMarginRatio = $initialMarginUnit;
        $floor = '0';
        $tiers = array();
        while (Precise::string_lt($floor, $riskLimitMax)) {
            $cap = Precise::string_add($floor, $riskLimitStep);
            $tiers[] = array(
                'tier' => $this->parse_number(Precise::string_div($cap, $riskLimitStep)),
                'currency' => $this->safe_string($market, 'settle'),
                'minNotional' => $this->parse_number($floor),
                'maxNotional' => $this->parse_number($cap),
                'maintenanceMarginRate' => $this->parse_number($maintenanceMarginRate),
                'maxLeverage' => $this->parse_number(Precise::string_div('1', $initialMarginRatio)),
                'info' => $info,
            );
            $maintenanceMarginRate = Precise::string_add($maintenanceMarginRate, $maintenanceMarginUnit);
            $initialMarginRatio = Precise::string_add($initialMarginRatio, $initialMarginUnit);
            $floor = $cap;
        }
        return $tiers;
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $authentication = $api[0]; // public, private
        $type = $api[1]; // spot, margin, future, delivery
        $query = $this->omit($params, $this->extract_params($path));
        $path = $this->implode_params($path, $params);
        $endPart = ($path === '') ? '' : ('/' . $path);
        $entirePath = '/' . $type . $endPart;
        $url = $this->urls['api'][$authentication][$type];
        if ($url === null) {
            throw new NotSupported($this->id . ' does not have a testnet for the ' . $type . ' market $type->');
        }
        $url .= $entirePath;
        if ($authentication === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $queryString = '';
            if (($method === 'GET') || ($method === 'DELETE')) {
                if ($query) {
                    $queryString = $this->urlencode($query);
                    $url .= '?' . $queryString;
                }
            } else {
                $urlQueryParams = $this->safe_value($query, 'query', array());
                if ($urlQueryParams) {
                    $queryString = $this->urlencode($urlQueryParams);
                    $url .= '?' . $queryString;
                }
                $query = $this->omit($query, 'query');
                $body = $this->json($query);
            }
            $bodyPayload = ($body === null) ? '' : $body;
            $bodySignature = $this->hash($this->encode($bodyPayload), 'sha512');
            $timestamp = $this->seconds();
            $timestampString = (string) $timestamp;
            $signaturePath = '/api/' . $this->version . $entirePath;
            $payloadArray = array( strtoupper($method), $signaturePath, $queryString, $bodySignature, $timestampString );
            // eslint-disable-next-line quotes
            $payload = implode("\n", $payloadArray);
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret), 'sha512');
            $headers = array(
                'KEY' => $this->apiKey,
                'Timestamp' => $timestampString,
                'SIGN' => $signature,
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        //
        //    array("label" => "ORDER_NOT_FOUND", "message" => "Order not found")
        //    array("label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => status")
        //    array("label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => Trigger.rule")
        //    array("label" => "INVALID_PARAM_VALUE", "message" => "invalid argument => trigger.expiration invalid range")
        //    array("label" => "INVALID_ARGUMENT", "detail" => "invalid size")
        //
        $label = $this->safe_string($response, 'label');
        if ($label !== null) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $label, $feedback);
            throw new ExchangeError($feedback);
        }
    }
}
