<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\InvalidOrder;
use \ccxt\Precise;

class kucoin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'kucoin',
            'name' => 'KuCoin',
            'countries' => array( 'SC' ),
            // note "only some endpoints are rate-limited"
            // so I set the 'ratelimit' on those which supposedly 'arent ratelimited'
            // to the limit of the cheapest endpoint
            // 60 requests in 3 seconds = 20 requests per second => ( 1000ms / 20 ) = 50 ms between requests on average
            'rateLimit' => 50,
            'version' => 'v2',
            'certified' => false,
            'pro' => true,
            'comment' => 'Platform 2.0',
            'quoteJsonNumbers' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => null,
                'swap' => false,
                'future' => false,
                'option' => null,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createDepositAddress' => true,
                'createOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchL3OrderBook' => true,
                'fetchLedger' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrdersByStatus' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => false,
                'fetchTransactionFee' => true,
                'fetchWithdrawals' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',
                'referral' => 'https://www.kucoin.com/?rcode=E5wkqe',
                'api' => array(
                    'public' => 'https://api.kucoin.com',
                    'private' => 'https://api.kucoin.com',
                    'futuresPrivate' => 'https://api-futures.kucoin.com',
                    'futuresPublic' => 'https://api-futures.kucoin.com',
                ),
                'test' => array(
                    'public' => 'https://openapi-sandbox.kucoin.com',
                    'private' => 'https://openapi-sandbox.kucoin.com',
                    'futuresPrivate' => 'https://api-sandbox-futures.kucoin.com',
                    'futuresPublic' => 'https://api-sandbox-futures.kucoin.com',
                ),
                'www' => 'https://www.kucoin.com',
                'doc' => array(
                    'https://docs.kucoin.com',
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'password' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'timestamp' => 1,
                        'status' => 1,
                        'symbols' => 1,
                        'markets' => 1,
                        'market/allTickers' => 1,
                        'market/orderbook/level{level}_{limit}' => 1,
                        'market/orderbook/level2_20' => 1,
                        'market/orderbook/level2_100' => 1,
                        'market/histories' => 1,
                        'market/candles' => 1,
                        'market/stats' => 1,
                        'currencies' => 1,
                        'currencies/{currency}' => 1,
                        'prices' => 1,
                        'mark-price/{symbol}/current' => 1,
                        'margin/config' => 1,
                    ),
                    'post' => array(
                        'bullet-public' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'market/orderbook/level{level}' => 1,
                        'market/orderbook/level2' => array( 'v3' => 2 ), // 30/3s = 10/s => cost = 20 / 10 = 2
                        'market/orderbook/level3' => 1,
                        'accounts' => 1,
                        'accounts/{accountId}' => 1,
                        // 'accounts/{accountId}/ledgers' => 1, Deprecated endpoint
                        'accounts/ledgers' => 3.333, // 18/3s = 6/s => cost = 20 / 6 = 3.333
                        'accounts/{accountId}/holds' => 1,
                        'accounts/transferable' => 1,
                        'base-fee' => 1,
                        'sub/user' => 1,
                        'sub-accounts' => 1,
                        'sub-accounts/{subUserId}' => 1,
                        'deposit-addresses' => 1,
                        'deposits' => 10, // 6/3s = 2/s => cost = 20 / 2 = 10
                        'hist-deposits' => 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                        'hist-orders' => 1,
                        'hist-withdrawals' => 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                        'withdrawals' => 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                        'withdrawals/quotas' => 1,
                        'orders' => 2, // 30/3s =  10/s => cost  = 20 / 10 = 2
                        'order/client-order/{clientOid}' => 1,
                        'orders/{orderId}' => 1,
                        'limit/orders' => 1,
                        'fills' => 6.66667, // 9/3s = 3/s => cost  = 20 / 3 = 6.666667
                        'limit/fills' => 1,
                        'margin/account' => 1,
                        'margin/borrow' => 1,
                        'margin/borrow/outstanding' => 1,
                        'margin/borrow/borrow/repaid' => 1,
                        'margin/lend/active' => 1,
                        'margin/lend/done' => 1,
                        'margin/lend/trade/unsettled' => 1,
                        'margin/lend/trade/settled' => 1,
                        'margin/lend/assets' => 1,
                        'margin/market' => 1,
                        'margin/trade/last' => 1,
                        'stop-order/{orderId}' => 1,
                        'stop-order' => 1,
                        'stop-order/queryOrderByClientOid' => 1,
                        'trade-fees' => 1.3333, // 45/3s = 15/s => cost = 20 / 15 = 1.333
                    ),
                    'post' => array(
                        'accounts' => 1,
                        'accounts/inner-transfer' => array( 'v2' => 1 ),
                        'accounts/sub-transfer' => array( 'v2' => 25 ), // bad docs
                        'deposit-addresses' => 1,
                        'withdrawals' => 1,
                        'orders' => 4, // 45/3s = 15/s => cost = 20 / 15 = 1.333333
                        'orders/multi' => 20, // 3/3s = 1/s => cost = 20 / 1 = 20
                        'margin/borrow' => 1,
                        'margin/order' => 1,
                        'margin/repay/all' => 1,
                        'margin/repay/single' => 1,
                        'margin/lend' => 1,
                        'margin/toggle-auto-lend' => 1,
                        'bullet-private' => 1,
                        'stop-order' => 1,
                    ),
                    'delete' => array(
                        'withdrawals/{withdrawalId}' => 1,
                        'orders' => 20, // 3/3s = 1/s => cost = 20/1
                        'orders/client-order/{clientOid}' => 1,
                        'orders/{orderId}' => 1, // rateLimit => 60/3s = 20/s => cost = 1
                        'margin/lend/{orderId}' => 1,
                        'stop-order/cancelOrderByClientOid' => 1,
                        'stop-order/{orderId}' => 1,
                        'stop-order/cancel' => 1,
                    ),
                ),
                'futuresPublic' => array(
                    // cheapest futures 'limited' endpoint is 40  requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.3953
                    'get' => array(
                        'contracts/active' => 1.3953,
                        'contracts/{symbol}' => 1.3953,
                        'ticker' => 1.3953,
                        'level2/snapshot' => 2, // 30 requests per 3 seconds = 10 requests per second => cost = 20/10 = 2
                        'level2/depth20' => 1.3953,
                        'level2/depth100' => 1.3953,
                        'level2/message/query' => 1.3953,
                        'level3/message/query' => 1.3953, // deprecated，level3/snapshot is suggested
                        'level3/snapshot' => 1.3953, // v2
                        'trade/history' => 1.3953,
                        'interest/query' => 1.3953,
                        'index/query' => 1.3953,
                        'mark-price/{symbol}/current' => 1.3953,
                        'premium/query' => 1.3953,
                        'funding-rate/{symbol}/current' => 1.3953,
                        'timestamp' => 1.3953,
                        'status' => 1.3953,
                        'kline/query' => 1.3953,
                    ),
                    'post' => array(
                        'bullet-public' => 1.3953,
                    ),
                ),
                'futuresPrivate' => array(
                    'get' => array(
                        'account-overview' => 2, // 30 requests per 3 seconds = 10 per second => cost = 20/10 = 2
                        'transaction-history' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                        'deposit-address' => 1.3953,
                        'deposit-list' => 1.3953,
                        'withdrawals/quotas' => 1.3953,
                        'withdrawal-list' => 1.3953,
                        'transfer-list' => 1.3953,
                        'orders' => 1.3953,
                        'stopOrders' => 1.3953,
                        'recentDoneOrders' => 1.3953,
                        'orders/{orderId}' => 1.3953, // ?clientOid={client-orderId} // get order by orderId
                        'orders/byClientOid' => 1.3953, // ?clientOid=eresc138b21023a909e5ad59 // get order by clientOid
                        'fills' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                        'recentFills' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                        'openOrderStatistics' => 1.3953,
                        'position' => 1.3953,
                        'positions' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                        'funding-history' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                    ),
                    'post' => array(
                        'withdrawals' => 1.3953,
                        'transfer-out' => 1.3953, // v2
                        'orders' => 1.3953,
                        'position/margin/auto-deposit-status' => 1.3953,
                        'position/margin/deposit-margin' => 1.3953,
                        'bullet-private' => 1.3953,
                    ),
                    'delete' => array(
                        'withdrawals/{withdrawalId}' => 1.3953,
                        'cancel/transfer-out' => 1.3953,
                        'orders/{orderId}' => 1.3953, // 40 requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.395
                        'orders' => 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                        'stopOrders' => 1.3953,
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1min',
                '3m' => '3min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '1hour',
                '2h' => '2hour',
                '4h' => '4hour',
                '6h' => '6hour',
                '8h' => '8hour',
                '12h' => '12hour',
                '1d' => '1day',
                '1w' => '1week',
            ),
            'exceptions' => array(
                'exact' => array(
                    'order not exist' => '\\ccxt\\OrderNotFound',
                    'order not exist.' => '\\ccxt\\OrderNotFound', // duplicated error temporarily
                    'order_not_exist' => '\\ccxt\\OrderNotFound', // array("code":"order_not_exist","msg":"order_not_exist") ¯\_(ツ)_/¯
                    'order_not_exist_or_not_allow_to_cancel' => '\\ccxt\\InvalidOrder', // array("code":"400100","msg":"order_not_exist_or_not_allow_to_cancel")
                    'Order size below the minimum requirement.' => '\\ccxt\\InvalidOrder', // array("code":"400100","msg":"Order size below the minimum requirement.")
                    'The withdrawal amount is below the minimum requirement.' => '\\ccxt\\ExchangeError', // array("code":"400100","msg":"The withdrawal amount is below the minimum requirement.")
                    'Unsuccessful! Exceeded the max. funds out-transfer limit' => '\\ccxt\\InsufficientFunds', // array("code":"200000","msg":"Unsuccessful! Exceeded the max. funds out-transfer limit")
                    '400' => '\\ccxt\\BadRequest',
                    '401' => '\\ccxt\\AuthenticationError',
                    '403' => '\\ccxt\\NotSupported',
                    '404' => '\\ccxt\\NotSupported',
                    '405' => '\\ccxt\\NotSupported',
                    '429' => '\\ccxt\\RateLimitExceeded',
                    '500' => '\\ccxt\\ExchangeNotAvailable', // Internal Server Error -- We had a problem with our server. Try again later.
                    '503' => '\\ccxt\\ExchangeNotAvailable',
                    '101030' => '\\ccxt\\PermissionDenied', // array("code":"101030","msg":"You haven't yet enabled the margin trading")
                    '200004' => '\\ccxt\\InsufficientFunds',
                    '230003' => '\\ccxt\\InsufficientFunds', // array("code":"230003","msg":"Balance insufficient!")
                    '260100' => '\\ccxt\\InsufficientFunds', // array("code":"260100","msg":"account.noBalance")
                    '300000' => '\\ccxt\\InvalidOrder',
                    '400000' => '\\ccxt\\BadSymbol',
                    '400001' => '\\ccxt\\AuthenticationError',
                    '400002' => '\\ccxt\\InvalidNonce',
                    '400003' => '\\ccxt\\AuthenticationError',
                    '400004' => '\\ccxt\\AuthenticationError',
                    '400005' => '\\ccxt\\AuthenticationError',
                    '400006' => '\\ccxt\\AuthenticationError',
                    '400007' => '\\ccxt\\AuthenticationError',
                    '400008' => '\\ccxt\\NotSupported',
                    '400100' => '\\ccxt\\BadRequest',
                    '400200' => '\\ccxt\\InvalidOrder', // array("code":"400200","msg":"Forbidden to place an order")
                    '400350' => '\\ccxt\\InvalidOrder', // array("code":"400350","msg":"Upper limit for holding => 10,000USDT, you can still buy 10,000USDT worth of coin.")
                    '400370' => '\\ccxt\\InvalidOrder', // array("code":"400370","msg":"Max. price => 0.02500000000000000000")
                    '400500' => '\\ccxt\\InvalidOrder', // array("code":"400500","msg":"Your located country/region is currently not supported for the trading of this token")
                    '400600' => '\\ccxt\\BadSymbol', // array("code":"400600","msg":"validation.createOrder.symbolNotAvailable")
                    '400760' => '\\ccxt\\InvalidOrder', // array("code":"400760","msg":"order price should be more than XX")
                    '401000' => '\\ccxt\\BadRequest', // array("code":"401000","msg":"The interface has been deprecated")
                    '411100' => '\\ccxt\\AccountSuspended',
                    '415000' => '\\ccxt\\BadRequest', // array("code":"415000","msg":"Unsupported Media Type")
                    '500000' => '\\ccxt\\ExchangeNotAvailable', // array("code":"500000","msg":"Internal Server Error")
                    '260220' => '\\ccxt\\InvalidAddress', // array( "code" => "260220", "msg" => "deposit.address.not.exists" )
                ),
                'broad' => array(
                    'Exceeded the access frequency' => '\\ccxt\\RateLimitExceeded',
                    'require more permission' => '\\ccxt\\PermissionDenied',
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.001'),
                    'maker' => $this->parse_number('0.001'),
                    'tiers' => array(
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.001') ),
                            array( $this->parse_number('50'), $this->parse_number('0.001') ),
                            array( $this->parse_number('200'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('2000'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('4000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('8000'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('15000'), $this->parse_number('0.00045') ),
                            array( $this->parse_number('25000'), $this->parse_number('0.0004') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00035') ),
                            array( $this->parse_number('60000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('80000'), $this->parse_number('0.00025') ),
                        ),
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.001') ),
                            array( $this->parse_number('50'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('200'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('2000'), $this->parse_number('0') ),
                            array( $this->parse_number('4000'), $this->parse_number('0') ),
                            array( $this->parse_number('8000'), $this->parse_number('0') ),
                            array( $this->parse_number('15000'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('25000'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('40000'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('60000'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('80000'), $this->parse_number('-0.00005') ),
                        ),
                    ),
                ),
                'funding' => array(
                    'tierBased' => false,
                    'percentage' => false,
                    'withdraw' => array(),
                    'deposit' => array(),
                ),
            ),
            'commonCurrencies' => array(
                'HOT' => 'HOTNOW',
                'EDGE' => 'DADI', // https://github.com/ccxt/ccxt/issues/5756
                'WAX' => 'WAXP',
                'TRY' => 'Trias',
                'VAI' => 'VAIOT',
            ),
            'options' => array(
                'version' => 'v1',
                'symbolSeparator' => '-',
                'fetchMyTradesMethod' => 'private_get_fills',
                'fetchBalance' => 'trade',
                'fetchMarkets' => array(
                    'fetchTickersFees' => true,
                ),
                // endpoint versions
                'versions' => array(
                    'public' => array(
                        'GET' => array(
                            'currencies/{currency}' => 'v2',
                            'status' => 'v1',
                            'market/orderbook/level2_20' => 'v1',
                            'market/orderbook/level2_100' => 'v1',
                            'market/orderbook/level{level}_{limit}' => 'v1',
                        ),
                    ),
                    'private' => array(
                        'GET' => array(
                            'market/orderbook/level2' => 'v3',
                            'market/orderbook/level3' => 'v3',
                            'market/orderbook/level{level}' => 'v3',
                        ),
                        'POST' => array(
                            'accounts/inner-transfer' => 'v2',
                            'accounts/sub-transfer' => 'v2',
                        ),
                    ),
                    'futuresPrivate' => array(
                        'GET' => array(
                            'account-overview' => 'v1',
                            'positions' => 'v1',
                        ),
                        'POST' => array(
                            'transfer-out' => 'v2',
                        ),
                    ),
                    'futuresPublic' => array(
                        'GET' => array(
                            'level3/snapshot' => 'v2',
                        ),
                    ),
                ),
                'accountsByType' => array(
                    'spot' => 'trade',
                    'margin' => 'margin',
                    'main' => 'main',
                    'funding' => 'main',
                    'future' => 'contract',
                    'mining' => 'pool',
                ),
                'networks' => array(
                    'ETH' => 'eth',
                    'ERC20' => 'eth',
                    'TRX' => 'trx',
                    'TRC20' => 'trx',
                    'KCC' => 'kcc',
                    'TERRA' => 'luna',
                ),
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = yield $this->publicGetTimestamp ($params);
        //
        //     {
        //         "code":"200000",
        //         "msg":"success",
        //         "data":1546837113087
        //     }
        //
        return $this->safe_integer($response, 'data');
    }

    public function fetch_status($params = array ()) {
        /**
         * the latest known information on the availability of the exchange API
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#exchange-$status-structure $status structure}
         */
        $response = yield $this->publicGetStatus ($params);
        //
        //     {
        //         "code":"200000",
        //         "data":{
        //             "status":"open", //open, close, cancelonly
        //             "msg":"upgrade match engine" //remark for operation
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $status = $this->safe_string($data, 'status');
        return array(
            'status' => ($status === 'open') ? 'ok' : 'maintenance',
            'updated' => null,
            'eta' => null,
            'url' => null,
            'info' => $response,
        );
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves $data on all markets for kucoin
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing $market $data
         */
        $response = yield $this->publicGetSymbols ($params);
        //
        //     {
        //         "code" => "200000",
        //         "data" => array(
        //             array(
        //                 "symbol" => "XLM-USDT",
        //                 "name" => "XLM-USDT",
        //                 "baseCurrency" => "XLM",
        //                 "quoteCurrency" => "USDT",
        //                 "feeCurrency" => "USDT",
        //                 "market" => "USDS",
        //                 "baseMinSize" => "0.1",
        //                 "quoteMinSize" => "0.01",
        //                 "baseMaxSize" => "10000000000",
        //                 "quoteMaxSize" => "99999999",
        //                 "baseIncrement" => "0.0001",
        //                 "quoteIncrement" => "0.000001",
        //                 "priceIncrement" => "0.000001",
        //                 "priceLimitRate" => "0.1",
        //                 "isMarginEnabled" => true,
        //                 "enableTrading" => true
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data');
        $options = $this->safe_value($this->options, 'fetchMarkets', array());
        $fetchTickersFees = $this->safe_value($options, 'fetchTickersFees', true);
        $tickersResponse = array();
        if ($fetchTickersFees) {
            $tickersResponse = yield $this->publicGetMarketAllTickers ($params);
        }
        //
        //     {
        //         "code" => "200000",
        //         "data" => {
        //             "time":1602832092060,
        //             "ticker":array(
        //                 {
        //                     "symbol" => "BTC-USDT",   // symbol
        //                     "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
        //                     "buy" => "11328.9",   // bestAsk
        //                     "sell" => "11329",    // bestBid
        //                     "changeRate" => "-0.0055",    // 24h change rate
        //                     "changePrice" => "-63.6", // 24h change price
        //                     "high" => "11610",    // 24h highest price
        //                     "low" => "11200", // 24h lowest price
        //                     "vol" => "2282.70993217", // 24h volume，the aggregated trading volume in BTC
        //                     "volValue" => "25984946.157790431",   // 24h total, the trading volume in $quote currency of last 24 hours
        //                     "last" => "11328.9",  // last price
        //                     "averagePrice" => "11360.66065903",   // 24h average transaction price yesterday
        //                     "takerFeeRate" => "0.001",    // Basic Taker Fee
        //                     "makerFeeRate" => "0.001",    // Basic Maker Fee
        //                     "takerCoefficient" => "1",    // Taker Fee Coefficient
        //                     "makerCoefficient" => "1" // Maker Fee Coefficient
        //                 }
        //             )
        //         }
        //     }
        //
        $tickersData = $this->safe_value($tickersResponse, 'data', array());
        $tickers = $this->safe_value($tickersData, 'ticker', array());
        $tickersByMarketId = $this->index_by($tickers, 'symbol');
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $market = $data[$i];
            $id = $this->safe_string($market, 'symbol');
            list($baseId, $quoteId) = explode('-', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $baseMaxSize = $this->safe_number($market, 'baseMaxSize');
            $baseMinSizeString = $this->safe_string($market, 'baseMinSize');
            $quoteMaxSizeString = $this->safe_string($market, 'quoteMaxSize');
            $baseMinSize = $this->parse_number($baseMinSizeString);
            $quoteMaxSize = $this->parse_number($quoteMaxSizeString);
            $quoteMinSize = $this->safe_number($market, 'quoteMinSize');
            // $quoteIncrement = $this->safe_number($market, 'quoteIncrement');
            $ticker = $this->safe_value($tickersByMarketId, $id, array());
            $makerFeeRate = $this->safe_string($ticker, 'makerFeeRate');
            $takerFeeRate = $this->safe_string($ticker, 'makerFeeRate');
            $makerCoefficient = $this->safe_string($ticker, 'makerCoefficient');
            $takerCoefficient = $this->safe_string($ticker, 'takerCoefficient');
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => $this->safe_value($market, 'isMarginEnabled'),
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => $this->safe_value($market, 'enableTrading'),
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => $this->parse_number(Precise::string_mul($takerFeeRate, $takerCoefficient)),
                'maker' => $this->parse_number(Precise::string_mul($makerFeeRate, $makerCoefficient)),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->precision_from_string($this->safe_string($market, 'baseIncrement')),
                    'price' => $this->precision_from_string($this->safe_string($market, 'priceIncrement')),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $baseMinSize,
                        'max' => $baseMaxSize,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $quoteMinSize,
                        'max' => $quoteMaxSize,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} an associative dictionary of currencies
         */
        $response = yield $this->publicGetCurrencies ($params);
        //
        //     {
        //         "currency" => "OMG",
        //         "name" => "OMG",
        //         "fullName" => "OmiseGO",
        //         "precision" => 8,
        //         "confirms" => 12,
        //         "withdrawalMinSize" => "4",
        //         "withdrawalMinFee" => "1.25",
        //         "isWithdrawEnabled" => false,
        //         "isDepositEnabled" => false,
        //         "isMarginEnabled" => false,
        //         "isDebitEnabled" => false
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $id = $this->safe_string($entry, 'currency');
            $name = $this->safe_string($entry, 'fullName');
            $code = $this->safe_currency_code($id);
            $precision = $this->safe_integer($entry, 'precision');
            $isWithdrawEnabled = $this->safe_value($entry, 'isWithdrawEnabled', false);
            $isDepositEnabled = $this->safe_value($entry, 'isDepositEnabled', false);
            $fee = $this->safe_number($entry, 'withdrawalMinFee');
            $active = ($isWithdrawEnabled && $isDepositEnabled);
            $result[$code] = array(
                'id' => $id,
                'name' => $name,
                'code' => $code,
                'precision' => $precision,
                'info' => $entry,
                'active' => $active,
                'deposit' => $isDepositEnabled,
                'withdraw' => $isWithdrawEnabled,
                'fee' => $fee,
                'limits' => $this->limits,
            );
        }
        return $result;
    }

    public function fetch_accounts($params = array ()) {
        $response = yield $this->privateGetAccounts ($params);
        //
        //     {
        //         $code => "200000",
        //         $data => array(
        //             array(
        //                 balance => "0.00009788",
        //                 available => "0.00009788",
        //                 holds => "0",
        //                 currency => "BTC",
        //                 id => "5c6a4fd399a1d81c4f9cc4d0",
        //                 $type => "trade"
        //             ),
        //             {
        //                 balance => "0.00000001",
        //                 available => "0.00000001",
        //                 holds => "0",
        //                 currency => "ETH",
        //                 id => "5c6a49ec99a1d819392e8e9f",
        //                 $type => "trade"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $account = $data[$i];
            $accountId = $this->safe_string($account, 'id');
            $currencyId = $this->safe_string($account, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $type = $this->safe_string($account, 'type');  // main or trade
            $result[] = array(
                'id' => $accountId,
                'type' => $type,
                'currency' => $code,
                'info' => $account,
            );
        }
        return $result;
    }

    public function fetch_transaction_fee($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privateGetWithdrawalsQuotas (array_merge($request, $params));
        $data = $response['data'];
        $withdrawFees = array();
        $withdrawFees[$code] = $this->safe_number($data, 'withdrawMinFee');
        return array(
            'info' => $response,
            'withdraw' => $withdrawFees,
            'deposit' => array(),
        );
    }

    public function is_futures_method($methodName, $params) {
        //
        // Helper
        // @$methodName (string) => The name of the method
        // @$params (dict) => The parameters passed into {$methodName}
        // @return => true if the method used is meant for futures trading, false otherwise
        //
        $defaultType = $this->safe_string_2($this->options, $methodName, 'defaultType', 'trade');
        $requestedType = $this->safe_string($params, 'type', $defaultType);
        $accountsByType = $this->safe_value($this->options, 'accountsByType');
        $type = $this->safe_string($accountsByType, $requestedType);
        if ($type === null) {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new ExchangeError($this->id . ' isFuturesMethod() $type must be one of ' . implode(', ', $keys));
        }
        $params = $this->omit($params, 'type');
        return ($type === 'contract') || ($type === 'future') || ($type === 'futures'); // * ($type === 'futures') deprecated, use ($type === 'future')
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "symbol" => "BTC-USDT",   // $symbol
        //         "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
        //         "buy" => "11328.9",   // bestAsk
        //         "sell" => "11329",    // bestBid
        //         "changeRate" => "-0.0055",    // 24h change rate
        //         "changePrice" => "-63.6", // 24h change price
        //         "high" => "11610",    // 24h highest price
        //         "low" => "11200", // 24h lowest price
        //         "vol" => "2282.70993217", // 24h volume，the aggregated trading volume in BTC
        //         "volValue" => "25984946.157790431",   // 24h total, the trading volume in quote currency of $last 24 hours
        //         "last" => "11328.9",  // $last price
        //         "averagePrice" => "11360.66065903",   // 24h average transaction price yesterday
        //         "takerFeeRate" => "0.001",    // Basic Taker Fee
        //         "makerFeeRate" => "0.001",    // Basic Maker Fee
        //         "takerCoefficient" => "1",    // Taker Fee Coefficient
        //         "makerCoefficient" => "1" // Maker Fee Coefficient
        //     }
        //
        //     {
        //         "trading" => true,
        //         "symbol" => "KCS-BTC",
        //         "buy" => 0.00011,
        //         "sell" => 0.00012,
        //         "sort" => 100,
        //         "volValue" => 3.13851792584,   //total
        //         "baseCurrency" => "KCS",
        //         "market" => "BTC",
        //         "quoteCurrency" => "BTC",
        //         "symbolCode" => "KCS-BTC",
        //         "datetime" => 1548388122031,
        //         "high" => 0.00013,
        //         "vol" => 27514.34842,
        //         "low" => 0.0001,
        //         "changePrice" => -1.0e-5,
        //         "changeRate" => -0.0769,
        //         "lastTradedPrice" => 0.00012,
        //         "board" => 0,
        //         "mark" => 0
        //     }
        //
        // market/ticker ws subscription
        //
        //     {
        //         bestAsk => '62258.9',
        //         bestAskSize => '0.38579986',
        //         bestBid => '62258.8',
        //         bestBidSize => '0.0078381',
        //         price => '62260.7',
        //         sequence => '1621383297064',
        //         size => '0.00002841',
        //         time => 1634641777363
        //     }
        //
        $percentage = $this->safe_string($ticker, 'changeRate');
        if ($percentage !== null) {
            $percentage = Precise::string_mul($percentage, '100');
        }
        $last = $this->safe_string_2($ticker, 'last', 'lastTradedPrice');
        $last = $this->safe_string($ticker, 'price', $last);
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->safe_market($marketId, $market, '-');
        $symbol = $market['symbol'];
        $baseVolume = $this->safe_string($ticker, 'vol');
        $quoteVolume = $this->safe_string($ticker, 'volValue');
        $timestamp = $this->safe_integer_2($ticker, 'time', 'datetime');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string_2($ticker, 'buy', 'bestBid'),
            'bidVolume' => $this->safe_string($ticker, 'bestBidSize'),
            'ask' => $this->safe_string_2($ticker, 'sell', 'bestAsk'),
            'askVolume' => $this->safe_string($ticker, 'bestAskSize'),
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $this->safe_string($ticker, 'changePrice'),
            'percentage' => $percentage,
            'average' => $this->safe_string($ticker, 'averagePrice'),
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price $tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structures}
         */
        yield $this->load_markets();
        $response = yield $this->publicGetMarketAllTickers ($params);
        //
        //     {
        //         "code" => "200000",
        //         "data" => {
        //             "time":1602832092060,
        //             "ticker":array(
        //                 {
        //                     "symbol" => "BTC-USDT",   // $symbol
        //                     "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
        //                     "buy" => "11328.9",   // bestAsk
        //                     "sell" => "11329",    // bestBid
        //                     "changeRate" => "-0.0055",    // 24h change rate
        //                     "changePrice" => "-63.6", // 24h change price
        //                     "high" => "11610",    // 24h highest price
        //                     "low" => "11200", // 24h lowest price
        //                     "vol" => "2282.70993217", // 24h volume，the aggregated trading volume in BTC
        //                     "volValue" => "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
        //                     "last" => "11328.9",  // last price
        //                     "averagePrice" => "11360.66065903",   // 24h average transaction price yesterday
        //                     "takerFeeRate" => "0.001",    // Basic Taker Fee
        //                     "makerFeeRate" => "0.001",    // Basic Maker Fee
        //                     "takerCoefficient" => "1",    // Taker Fee Coefficient
        //                     "makerCoefficient" => "1" // Maker Fee Coefficient
        //                 }
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $tickers = $this->safe_value($data, 'ticker', array());
        $time = $this->safe_integer($data, 'time');
        $result = array();
        for ($i = 0; $i < count($tickers); $i++) {
            $tickers[$i]['time'] = $time;
            $ticker = $this->parse_ticker($tickers[$i]);
            $symbol = $this->safe_string($ticker, 'symbol');
            if ($symbol !== null) {
                $result[$symbol] = $ticker;
            }
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {str} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetMarketStats (array_merge($request, $params));
        //
        //     {
        //         "code" => "200000",
        //         "data" => {
        //             "time" => 1602832092060,  // time
        //             "symbol" => "BTC-USDT",   // $symbol
        //             "buy" => "11328.9",   // bestAsk
        //             "sell" => "11329",    // bestBid
        //             "changeRate" => "-0.0055",    // 24h change rate
        //             "changePrice" => "-63.6", // 24h change price
        //             "high" => "11610",    // 24h highest price
        //             "low" => "11200", // 24h lowest price
        //             "vol" => "2282.70993217", // 24h volume，the aggregated trading volume in BTC
        //             "volValue" => "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
        //             "last" => "11328.9",  // last price
        //             "averagePrice" => "11360.66065903",   // 24h average transaction price yesterday
        //             "takerFeeRate" => "0.001",    // Basic Taker Fee
        //             "makerFeeRate" => "0.001",    // Basic Maker Fee
        //             "takerCoefficient" => "1",    // Taker Fee Coefficient
        //             "makerCoefficient" => "1" // Maker Fee Coefficient
        //         }
        //     }
        //
        return $this->parse_ticker($response['data'], $market);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         "1545904980",             // Start time of the candle cycle
        //         "0.058",                  // opening price
        //         "0.049",                  // closing price
        //         "0.058",                  // highest price
        //         "0.049",                  // lowest price
        //         "0.018",                  // base volume
        //         "0.000945",               // quote volume
        //     )
        //
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '15m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $request = array(
            'symbol' => $marketId,
            'type' => $this->timeframes[$timeframe],
        );
        $duration = $this->parse_timeframe($timeframe) * 1000;
        $endAt = $this->milliseconds(); // required param
        if ($since !== null) {
            $request['startAt'] = intval((int) floor($since / 1000));
            if ($limit === null) {
                // https://docs.kucoin.com/#get-klines
                // https://docs.kucoin.com/#details
                // For each query, the system would return at most 1500 pieces of $data->
                // To obtain more $data, please page the $data by time.
                $limit = $this->safe_integer($this->options, 'fetchOHLCVLimit', 1500);
            }
            $endAt = $this->sum($since, $limit * $duration);
        } elseif ($limit !== null) {
            $since = $endAt - $limit * $duration;
            $request['startAt'] = intval((int) floor($since / 1000));
        }
        $request['endAt'] = intval((int) floor($endAt / 1000));
        $response = yield $this->publicGetMarketCandles (array_merge($request, $params));
        //
        //     {
        //         "code":"200000",
        //         "data":[
        //             ["1591517700","0.025078","0.025069","0.025084","0.025064","18.9883256","0.4761861079404"],
        //             ["1591516800","0.025089","0.025079","0.025089","0.02506","99.4716622","2.494143499081"],
        //             ["1591515900","0.025079","0.02509","0.025091","0.025068","59.83701271","1.50060885172798"],
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function create_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array( 'currency' => $currency['id'] );
        $response = yield $this->privatePostDepositAddresses (array_merge($request, $params));
        // BCH array("code":"200000","data":array("address":"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z","memo":""))
        // BTC array("code":"200000","data":array("address":"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE","memo":""))
        $data = $this->safe_value($response, 'data', array());
        $address = $this->safe_string($data, 'address');
        // BCH/BSV is returned with a "bitcoincash:" prefix, which we cut off here and only keep the $address
        if ($address !== null) {
            $address = str_replace('bitcoincash:', '', $address);
        }
        $tag = $this->safe_string($data, 'memo');
        if ($code !== 'NIM') {
            // contains spaces
            $this->check_address($address);
        }
        return array(
            'info' => $response,
            'currency' => $code,
            'network' => $this->safe_string($data, 'chain'),
            'address' => $address,
            'tag' => $tag,
        );
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            // for USDT - OMNI, ERC20, TRC20, default is ERC20
            // for BTC - Native, Segwit, TRC20, the parameters are bech32, btc, trx, default is Native
            // 'chain' => 'ERC20', // optional
        );
        // same as for withdraw
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string_lower($networks, $network, $network); // handle ERC20>ETH alias
        if ($network !== null) {
            $request['chain'] = $network;
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privateGetDepositAddresses (array_merge($request, $params));
        // BCH array("code":"200000","data":array("address":"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z","memo":""))
        // BTC array("code":"200000","data":array("address":"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE","memo":""))
        $data = $this->safe_value($response, 'data', array());
        $address = $this->safe_string($data, 'address');
        $tag = $this->safe_string($data, 'memo');
        if ($code !== 'NIM') {
            // contains spaces
            $this->check_address($address);
        }
        return array(
            'info' => $response,
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => $network,
        );
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @param {str} $symbol unified $symbol of the market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by market symbols
         */
        yield $this->load_markets();
        $marketId = $this->market_id($symbol);
        $level = $this->safe_integer($params, 'level', 2);
        $request = array( 'symbol' => $marketId );
        $method = 'publicGetMarketOrderbookLevelLevelLimit';
        $isAuthenticated = $this->check_required_credentials(false);
        $response = null;
        if (!$isAuthenticated || $limit !== null) {
            if ($level === 2) {
                $request['level'] = $level;
                if ($limit !== null) {
                    if (($limit === 20) || ($limit === 100)) {
                        $request['limit'] = $limit;
                    } else {
                        throw new ExchangeError($this->id . ' fetchOrderBook() $limit argument must be 20 or 100');
                    }
                }
                $request['limit'] = $limit ? $limit : 100;
            }
        } else {
            $method = 'privateGetMarketOrderbookLevel2'; // recommended (v3)
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        // public (v1) market/orderbook/level2_20 and market/orderbook/level2_100
        //
        //     {
        //         "sequence" => "3262786978",
        //         "time" => 1550653727731,
        //         "bids" => [
        //             ["6500.12", "0.45054140"],
        //             ["6500.11", "0.45054140"],
        //         ],
        //         "asks" => [
        //             ["6500.16", "0.57753524"],
        //             ["6500.15", "0.57753524"],
        //         ]
        //     }
        //
        // private (v3) market/orderbook/level2
        //
        //     {
        //         "sequence" => "3262786978",
        //         "time" => 1550653727731,
        //         "bids" => [
        //             ["6500.12", "0.45054140"],
        //             ["6500.11", "0.45054140"],
        //         ],
        //         "asks" => [
        //             ["6500.16", "0.57753524"],
        //             ["6500.15", "0.57753524"],
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->safe_integer($data, 'time');
        $orderbook = $this->parse_order_book($data, $symbol, $timestamp, 'bids', 'asks', $level - 2, $level - 1);
        $orderbook['nonce'] = $this->safe_integer($data, 'sequence');
        return $orderbook;
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * Create an $order on the exchange
         * @param {str} $symbol Unified CCXT market $symbol
         * @param {str} $type "limit" or "market"
         * @param {str} $side "buy" or "sell"
         * @param {float} $amount the $amount of currency to trade
         * @param {float} $price *ignored in "market" orders* the $price at which the $order is to be fullfilled at in units of the quote currency
         * @param {dict} $params  Extra parameters specific to the exchange API endpoint
         * @param {str} $params->clientOid client $order $id, defaults to uuid if not passed
         * @param {str} $params->remark remark for the $order, length cannot exceed 100 utf8 characters
         * @param {str} $params->tradeType 'TRADE', // TRADE, MARGIN_TRADE // not used with margin orders
         * limit orders ---------------------------------------------------
         * @param {str} $params->timeInForce GTC, GTT, IOC, or FOK, default is GTC, limit orders only
         * @param {float} $params->cancelAfter long, // cancel after n seconds, requires timeInForce to be GTT
         * @param {str} $params->postOnly Post only flag, invalid when timeInForce is IOC or FOK
         * @param {bool} $params->hidden false, // Order will not be displayed in the $order book
         * @param {bool} $params->iceberg false, // Only a portion of the $order is displayed in the $order book
         * @param {str} $params->visibleSize $this->amount_to_precision($symbol, visibleSize), // The maximum visible size of an iceberg $order
         * market orders --------------------------------------------------
         * @param {str} $params->funds // Amount of quote currency to use
         * stop orders ----------------------------------------------------
         * @param {str} $params->stop  Either loss or entry, the default is loss. Requires $stopPrice to be defined
         * @param {float} $params->stopPrice The $price at which a trigger $order is triggered at
         * margin orders --------------------------------------------------
         * @param {float} $params->leverage Leverage size of the $order
         * @param {str} $params->stp '', // self trade prevention, CN, CO, CB or DC
         * @param {str} $params->marginMode 'cross', // cross (cross mode) and isolated (isolated mode), set to cross by default, the isolated mode will be released soon, stay tuned
         * @param {bool} $params->autoBorrow false, // The system will first borrow you funds at the optimal interest rate and then place an $order for you
         * @return an {@link https://docs.ccxt.com/en/latest/manual.html#$order-structure $order structure}
         */
        yield $this->load_markets();
        $marketId = $this->market_id($symbol);
        // required param, cannot be used twice
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId', $this->uuid());
        $params = $this->omit($params, array( 'clientOid', 'clientOrderId' ));
        $request = array(
            'clientOid' => $clientOrderId,
            'side' => $side,
            'symbol' => $marketId,
            'type' => $type, // limit or market
        );
        $quoteAmount = $this->safe_number_2($params, 'cost', 'funds');
        $amountString = null;
        $costString = null;
        if ($type === 'market') {
            if ($quoteAmount !== null) {
                $params = $this->omit($params, array( 'cost', 'funds' ));
                // kucoin uses base precision even for quote values
                $costString = $this->amount_to_precision($symbol, $quoteAmount);
                $request['funds'] = $costString;
            } else {
                $amountString = $this->amount_to_precision($symbol, $amount);
                $request['size'] = $this->amount_to_precision($symbol, $amount);
            }
        } else {
            $amountString = $this->amount_to_precision($symbol, $amount);
            $request['size'] = $amountString;
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $stopPrice = $this->safe_string($params, 'stopPrice');
        $tradeType = $this->safe_string($params, 'tradeType');
        $params = $this->omit($params, 'stopPrice');
        $method = 'privatePostOrders';
        if ($stopPrice !== null) {
            $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
            $request['stop'] = 'loss';
            $method = 'privatePostStopOrder';
        } elseif ($tradeType === 'MARGIN_TRADE') {
            $method = 'privatePostMarginOrder';
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         code => '200000',
        //         $data => {
        //             "orderId" => "5bd6e9286d99522a52e458de"
        //         }
        //    }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->milliseconds();
        $id = $this->safe_string($data, 'orderId');
        $order = array(
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'info' => $data,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $this->parse_number($amountString),
            'cost' => $this->parse_number($costString),
            'average' => null,
            'filled' => null,
            'remaining' => null,
            'status' => null,
            'fee' => null,
            'trades' => null,
        );
        return $order;
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * Cancels an order
         * @param {str} $id Order $id
         * @param {str} $symbol Not used by kucoin
         * @param {dict} $params Exchange specific parameters
         * @param {bool} $params->stop True if cancelling a $stop order
         * @return Response fromt the exchange
         */
        yield $this->load_markets();
        $request = array();
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
        $stop = $this->safe_value($params, 'stop');
        $method = 'privateDeleteOrdersOrderId';
        if ($clientOrderId !== null) {
            $request['clientOid'] = $clientOrderId;
            if ($stop) {
                $method = 'privateDeleteStopOrderCancelOrderByClientOid';
            } else {
                $method = 'privateDeleteOrdersClientOrderClientOid';
            }
        } else {
            if ($stop) {
                $method = 'privateDeleteStopOrderOrderId';
            }
            $request['orderId'] = $id;
        }
        $params = $this->omit($params, array( 'clientOid', 'clientOrderId', 'stop' ));
        return yield $this->$method (array_merge($request, $params));
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        /**
         * Cancels all open orders, or cancels all orders in a $market for one $symbol, $stop orders must be cancelled separately
         * @param {str} $symbol Unified $symbol indicating the $market to cancel orders in
         * @param {dict} $params Exchange specific parameters
         * @param {bool} $params->stop true if cancelling all $stop orders
         * @param {str} $params->tradeType The type of trading, "TRADE" for Spot Trading, "MARGIN_TRADE" for Margin Trading
         * @param {str} $params->orderIds *$stop orders only* Comma seperated order IDs
         * @return Response from the exchange
         */
        yield $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $method = 'privateDeleteOrders';
        $stop = $this->safe_value($params, 'stop');
        if ($stop) {
            $method = 'privateDeleteStopOrderCancel';
        }
        return yield $this->$method (array_merge($request, $params));
    }

    public function fetch_orders_by_status($status, $symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch a list of $orders
         * @param {str} $status *not used for $stop $orders* 'open' or 'closed'
         * @param {str} $symbol unified $market $symbol
         * @param {int} $since timestamp in ms of the earliest order
         * @param {int} $limit max number of $orders to return
         * @param {dict} $params exchange specific $params
         * @param {int} $params->till end time in ms
         * @param {bool} $params->stop true if fetching $stop $orders
         * @param {str} $params->side buy or sell
         * @param {str} $params->type $limit, $market, limit_stop or market_stop
         * @param {str} $params->tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
         * @param {int} $params->currentPage *$stop $orders only* current page
         * @param {str} $params->orderIds *$stop $orders only* comma seperated order ID list
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure array of order structures}
         */
        yield $this->load_markets();
        $lowercaseStatus = strtolower($status);
        if ($lowercaseStatus === 'open') {
            $lowercaseStatus = 'active';
        } elseif ($lowercaseStatus === 'closed') {
            $lowercaseStatus = 'done';
        }
        $request = array(
            'status' => $lowercaseStatus,
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['startAt'] = $since;
        }
        if ($limit !== null) {
            $request['pageSize'] = $limit;
        }
        $till = $this->safe_integer($params, 'till');
        if ($till) {
            $request['endAt'] = $till;
        }
        $stop = $this->safe_value($params, 'stop');
        $params = $this->omit($params, 'stop');
        $method = 'privateGetOrders';
        if ($stop) {
            $method = 'privateGetStopOrder';
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         code => '200000',
        //         data => {
        //             "currentPage" => 1,
        //             "pageSize" => 1,
        //             "totalNum" => 153408,
        //             "totalPage" => 153408,
        //             "items" => array(
        //                 array(
        //                     "id" => "5c35c02703aa673ceec2a168",   //orderid
        //                     "symbol" => "BTC-USDT",   //symbol
        //                     "opType" => "DEAL",      // operation type,deal is pending order,cancel is cancel order
        //                     "type" => "limit",       // order type,e.g. $limit,markrt,stop_limit.
        //                     "side" => "buy",         // transaction direction,include buy and sell
        //                     "price" => "10",         // order price
        //                     "size" => "2",           // order quantity
        //                     "funds" => "0",          // order funds
        //                     "dealFunds" => "0.166",  // deal funds
        //                     "dealSize" => "2",       // deal quantity
        //                     "fee" => "0",            // fee
        //                     "feeCurrency" => "USDT", // charge fee currency
        //                     "stp" => "",             // self trade prevention,include CN,CO,DC,CB
        //                     "stop" => "",            // $stop type
        //                     "stopTriggered" => false,  // $stop order is triggered
        //                     "stopPrice" => "0",      // $stop price
        //                     "timeInForce" => "GTC",  // time InForce,include GTC,GTT,IOC,FOK
        //                     "postOnly" => false,     // postOnly
        //                     "hidden" => false,       // hidden order
        //                     "iceberg" => false,      // iceberg order
        //                     "visibleSize" => "0",    // display quantity for iceberg order
        //                     "cancelAfter" => 0,      // cancel $orders time，requires timeInForce to be GTT
        //                     "channel" => "IOS",      // order source
        //                     "clientOid" => "",       // user-entered order unique mark
        //                     "remark" => "",          // remark
        //                     "tags" => "",            // tag order source
        //                     "isActive" => false,     // $status before unfilled or uncancelled
        //                     "cancelExist" => false,   // order cancellation transaction record
        //                     "createdAt" => 1547026471000  // time
        //                 ),
        //             )
        //         }
        //    }
        $responseData = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($responseData, 'items', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch a list of orders
         * @param {str} $symbol unified market $symbol
         * @param {int} $since timestamp in ms of the earliest order
         * @param {int} $limit max number of orders to return
         * @param {dict} $params exchange specific $params
         * @param {int} $params->till end time in ms
         * @param {str} $params->side buy or sell
         * @param {str} $params->type $limit, market, limit_stop or market_stop
         * @param {str} $params->tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure array of order structures}
         */
        return yield $this->fetch_orders_by_status('done', $symbol, $since, $limit, $params);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch a list of orders
         * @param {str} $symbol unified market $symbol
         * @param {int} $since timestamp in ms of the earliest order
         * @param {int} $limit max number of orders to return
         * @param {dict} $params exchange specific $params
         * @param {int} $params->till end time in ms
         * @param {bool} $params->stop true if fetching stop orders
         * @param {str} $params->side buy or sell
         * @param {str} $params->type $limit, market, limit_stop or market_stop
         * @param {str} $params->tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
         * @param {int} $params->currentPage *stop orders only* current page
         * @param {str} $params->orderIds *stop orders only* comma seperated order ID list
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure array of order structures}
         */
        return yield $this->fetch_orders_by_status('active', $symbol, $since, $limit, $params);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        /**
         * fetch an order
         * @param {str} $id Order $id
         * @param {str} $symbol not sent to exchange except for $stop orders with clientOid, but used internally by CCXT to filter
         * @param {dict} $params exchange specific parameters
         * @param {bool} $params->stop true if fetching a $stop order
         * @param {bool} $params->clientOid unique order $id created by users to identify their orders
         * @return An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        yield $this->load_markets();
        $request = array();
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
        $stop = $this->safe_value($params, 'stop');
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $params = $this->omit($params, 'stop');
        $method = 'privateGetOrdersOrderId';
        if ($clientOrderId !== null) {
            $request['clientOid'] = $clientOrderId;
            if ($stop) {
                $method = 'privateGetStopOrderQueryOrderByClientOid';
                if ($symbol !== null) {
                    $request['symbol'] = $market['id'];
                }
            } else {
                $method = 'privateGetOrderClientOrderClientOid';
            }
        } else {
            // a special case for null ids
            // otherwise a wrong endpoint for all orders will be triggered
            // https://github.com/ccxt/ccxt/issues/7234
            if ($id === null) {
                throw new InvalidOrder($this->id . ' fetchOrder() requires an order id');
            }
            if ($stop) {
                $method = 'privateGetStopOrderOrderId';
            }
            $request['orderId'] = $id;
        }
        $params = $this->omit($params, array( 'clientOid', 'clientOrderId' ));
        $response = yield $this->$method (array_merge($request, $params));
        $responseData = $this->safe_value($response, 'data');
        if ($method === 'privateGetStopOrderQueryOrderByClientOid') {
            $responseData = $this->safe_value($responseData, 0);
        }
        return $this->parse_order($responseData, $market);
    }

    public function parse_order($order, $market = null) {
        //
        // fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "id" => "5c35c02703aa673ceec2a168",   //orderid
        //         "symbol" => "BTC-USDT",   //symbol
        //         "opType" => "DEAL",      // operation $type,deal is pending $order,cancel is cancel $order
        //         "type" => "limit",       // $order $type,e.g. limit,markrt,stop_limit.
        //         "side" => "buy",         // transaction direction,include buy and sell
        //         "price" => "10",         // $order $price
        //         "size" => "2",           // $order quantity
        //         "funds" => "0",          // $order funds
        //         "dealFunds" => "0.166",  // deal funds
        //         "dealSize" => "2",       // deal quantity
        //         "fee" => "0",            // $fee
        //         "feeCurrency" => "USDT", // charge $fee currency
        //         "stp" => "",             // self trade prevention,include CN,CO,DC,CB
        //         "stop" => "",            // $stop $type
        //         "stopTriggered" => false,  // $stop $order is triggered
        //         "stopPrice" => "0",      // $stop $price
        //         "timeInForce" => "GTC",  // time InForce,include GTC,GTT,IOC,FOK
        //         "postOnly" => false,     // $postOnly
        //         "hidden" => false,       // hidden $order
        //         "iceberg" => false,      // iceberg $order
        //         "visibleSize" => "0",    // display quantity for iceberg $order
        //         "cancelAfter" => 0,      // cancel orders time，requires $timeInForce to be GTT
        //         "channel" => "IOS",      // $order source
        //         "clientOid" => "",       // user-entered $order unique mark
        //         "remark" => "",          // remark
        //         "tags" => "",            // tag $order source
        //         "isActive" => false,     // $status before unfilled or uncancelled
        //         "cancelExist" => false,   // $order cancellation transaction record
        //         "createdAt" => 1547026471000  // time
        //     }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, '-');
        $orderId = $this->safe_string($order, 'id');
        $type = $this->safe_string($order, 'type');
        $timestamp = $this->safe_integer($order, 'createdAt');
        $datetime = $this->iso8601($timestamp);
        $price = $this->safe_string($order, 'price');
        // $price is zero for $market $order
        // omitZero is called in safeOrder2
        $side = $this->safe_string($order, 'side');
        $feeCurrencyId = $this->safe_string($order, 'feeCurrency');
        $feeCurrency = $this->safe_currency_code($feeCurrencyId);
        $feeCost = $this->safe_number($order, 'fee');
        $amount = $this->safe_string($order, 'size');
        $filled = $this->safe_string($order, 'dealSize');
        $cost = $this->safe_string($order, 'dealFunds');
        // bool
        $isActive = $this->safe_value($order, 'isActive', false);
        $cancelExist = $this->safe_value($order, 'cancelExist', false);
        $stop = $this->safe_string($order, 'stop');
        $stopTriggered = $this->safe_value($order, 'stopTriggered', false);
        $status = $isActive ? 'open' : 'closed';
        $cancelExistWithStop = $cancelExist || (!$isActive && $stop && !$stopTriggered);
        $status = $cancelExistWithStop ? 'canceled' : $status;
        $fee = array(
            'currency' => $feeCurrency,
            'cost' => $feeCost,
        );
        $clientOrderId = $this->safe_string($order, 'clientOid');
        $timeInForce = $this->safe_string($order, 'timeInForce');
        $stopPrice = $this->safe_number($order, 'stopPrice');
        $postOnly = $this->safe_value($order, 'postOnly');
        return $this->safe_order(array(
            'id' => $orderId,
            'clientOrderId' => $clientOrderId,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'cost' => $cost,
            'filled' => $filled,
            'remaining' => null,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'fee' => $fee,
            'status' => $status,
            'info' => $order,
            'lastTradeTimestamp' => null,
            'average' => null,
            'trades' => null,
        ), $market);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['pageSize'] = $limit;
        }
        $method = $this->options['fetchMyTradesMethod'];
        $parseResponseData = false;
        if ($method === 'private_get_fills') {
            // does not return $trades earlier than 2019-02-18T00:00:00Z
            if ($since !== null) {
                // only returns $trades up to one week after the $since param
                $request['startAt'] = $since;
            }
        } elseif ($method === 'private_get_limit_fills') {
            // does not return $trades earlier than 2019-02-18T00:00:00Z
            // takes no $params
            // only returns first 1000 $trades (not only "in the last 24 hours" as stated in the docs)
            $parseResponseData = true;
        } elseif ($method === 'private_get_hist_orders') {
            // despite that this endpoint is called `HistOrders`
            // it returns historical $trades instead of orders
            // returns $trades earlier than 2019-02-18T00:00:00Z only
            if ($since !== null) {
                $request['startAt'] = intval($since / 1000);
            }
        } else {
            throw new ExchangeError($this->id . ' fetchMyTradesMethod() invalid method');
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         "currentPage" => 1,
        //         "pageSize" => 50,
        //         "totalNum" => 1,
        //         "totalPage" => 1,
        //         "items" => array(
        //             array(
        //                 "symbol":"BTC-USDT",       // $symbol
        //                 "tradeId":"5c35c02709e4f67d5266954e",        // trade id
        //                 "orderId":"5c35c02703aa673ceec2a168",        // order id
        //                 "counterOrderId":"5c1ab46003aa676e487fa8e3", // counter order id
        //                 "side":"buy",              // transaction direction,include buy and sell
        //                 "liquidity":"taker",       // include taker and maker
        //                 "forceTaker":true,         // forced to become taker
        //                 "price":"0.083",           // order price
        //                 "size":"0.8424304",        // order quantity
        //                 "funds":"0.0699217232",    // order funds
        //                 "fee":"0",                 // fee
        //                 "feeRate":"0",             // fee rate
        //                 "feeCurrency":"USDT",      // charge fee currency
        //                 "stop":"",                 // stop type
        //                 "type":"limit",            // order type, e.g. $limit, $market, stop_limit.
        //                 "createdAt":1547026472000  // time
        //             ),
        //             //------------------------------------------------------
        //             // v1 (historical) trade $response structure
        //             {
        //                 "symbol" => "SNOV-ETH",
        //                 "dealPrice" => "0.0000246",
        //                 "dealValue" => "0.018942",
        //                 "amount" => "770",
        //                 "fee" => "0.00001137",
        //                 "side" => "sell",
        //                 "createdAt" => 1540080199
        //                 "id":"5c4d389e4c8c60413f78e2e5",
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $trades = null;
        if ($parseResponseData) {
            $trades = $data;
        } else {
            $trades = $this->safe_value($data, 'items', array());
        }
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        // pagination is not supported on the exchange side anymore
        // if ($since !== null) {
        //     $request['startAt'] = (int) floor($since / 1000);
        // }
        // if ($limit !== null) {
        //     $request['pageSize'] = $limit;
        // }
        $response = yield $this->publicGetMarketHistories (array_merge($request, $params));
        //
        //     {
        //         "code" => "200000",
        //         "data" => array(
        //             {
        //                 "sequence" => "1548764654235",
        //                 "side" => "sell",
        //                 "size":"0.6841354",
        //                 "price":"0.03202",
        //                 "time":1548848575203567174
        //             }
        //         )
        //     }
        //
        $trades = $this->safe_value($response, 'data', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades (public)
        //
        //     {
        //         "sequence" => "1548764654235",
        //         "side" => "sell",
        //         "size":"0.6841354",
        //         "price":"0.03202",
        //         "time":1548848575203567174
        //     }
        //
        //     {
        //         sequence => '1568787654360',
        //         symbol => 'BTC-USDT',
        //         $side => 'buy',
        //         size => '0.00536577',
        //         price => '9345',
        //         takerOrderId => '5e356c4a9f1a790008f8d921',
        //         time => '1580559434436443257',
        //         $type => 'match',
        //         makerOrderId => '5e356bffedf0010008fa5d7f',
        //         tradeId => '5e356c4aeefabd62c62a1ece'
        //     }
        //
        // fetchMyTrades (private) v2
        //
        //     {
        //         "symbol":"BTC-USDT",
        //         "tradeId":"5c35c02709e4f67d5266954e",
        //         "orderId":"5c35c02703aa673ceec2a168",
        //         "counterOrderId":"5c1ab46003aa676e487fa8e3",
        //         "side":"buy",
        //         "liquidity":"taker",
        //         "forceTaker":true,
        //         "price":"0.083",
        //         "size":"0.8424304",
        //         "funds":"0.0699217232",
        //         "fee":"0",
        //         "feeRate":"0",
        //         "feeCurrency":"USDT",
        //         "stop":"",
        //         "type":"limit",
        //         "createdAt":1547026472000
        //     }
        //
        // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162
        //
        //     {
        //         symbol => "OPEN-BTC",
        //         forceTaker =>  false,
        //         $orderId => "5ce36420054b4663b1fff2c9",
        //         $fee => "0",
        //         $feeCurrency => "",
        //         $type => "",
        //         feeRate => "0",
        //         createdAt => 1558417615000,
        //         size => "12.8206",
        //         stop => "",
        //         price => "0",
        //         funds => "0",
        //         tradeId => "5ce390cf6e0db23b861c6e80"
        //     }
        //
        // fetchMyTrades (private) v1 (historical)
        //
        //     {
        //         "symbol" => "SNOV-ETH",
        //         "dealPrice" => "0.0000246",
        //         "dealValue" => "0.018942",
        //         "amount" => "770",
        //         "fee" => "0.00001137",
        //         "side" => "sell",
        //         "createdAt" => 1540080199
        //         "id":"5c4d389e4c8c60413f78e2e5",
        //     }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market, '-');
        $id = $this->safe_string_2($trade, 'tradeId', 'id');
        $orderId = $this->safe_string($trade, 'orderId');
        $takerOrMaker = $this->safe_string($trade, 'liquidity');
        $timestamp = $this->safe_integer($trade, 'time');
        if ($timestamp !== null) {
            $timestamp = intval($timestamp / 1000000);
        } else {
            $timestamp = $this->safe_integer($trade, 'createdAt');
            // if it's a historical v1 $trade, the exchange returns $timestamp in seconds
            if ((is_array($trade) && array_key_exists('dealValue', $trade)) && ($timestamp !== null)) {
                $timestamp = $timestamp * 1000;
            }
        }
        $priceString = $this->safe_string_2($trade, 'price', 'dealPrice');
        $amountString = $this->safe_string_2($trade, 'size', 'amount');
        $side = $this->safe_string($trade, 'side');
        $fee = null;
        $feeCostString = $this->safe_string($trade, 'fee');
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'feeCurrency');
            $feeCurrency = $this->safe_currency_code($feeCurrencyId);
            if ($feeCurrency === null) {
                $feeCurrency = ($side === 'sell') ? $market['quote'] : $market['base'];
            }
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrency,
                'rate' => $this->safe_string($trade, 'feeRate'),
            );
        }
        $type = $this->safe_string($trade, 'type');
        if ($type === 'match') {
            $type = null;
        }
        $costString = $this->safe_string_2($trade, 'funds', 'dealValue');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'type' => $type,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbols' => $market['id'],
        );
        $response = yield $this->privateGetTradeFees (array_merge($request, $params));
        //
        //     {
        //         code => '200000',
        //         $data => array(
        //           {
        //             $symbol => 'BTC-USDT',
        //             takerFeeRate => '0.001',
        //             makerFeeRate => '0.001'
        //           }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0);
        $marketId = $this->safe_string($first, 'symbol');
        return array(
            'info' => $response,
            'symbol' => $this->safe_symbol($marketId, $market),
            'maker' => $this->safe_number($first, 'makerFeeRate'),
            'taker' => $this->safe_number($first, 'takerFeeRate'),
            'percentage' => true,
            'tierBased' => true,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        yield $this->load_markets();
        $this->check_address($address);
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'address' => $address,
            'amount' => $amount,
            // 'memo' => $tag,
            // 'isInner' => false, // internal transfer or external withdrawal
            // 'remark' => 'optional',
            // 'chain' => 'OMNI', // 'ERC20', 'TRC20', default is ERC20
        );
        if ($tag !== null) {
            $request['memo'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string_lower($networks, $network, $network); // handle ERC20>ETH alias
        if ($network !== null) {
            $request['chain'] = $network;
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privatePostWithdrawals (array_merge($request, $params));
        //
        // https://github.com/ccxt/ccxt/issues/5558
        //
        //     {
        //         "code" =>  200000,
        //         "data" => {
        //             "withdrawalId" =>  "5bffb63303aa675e8bbe18f9"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transaction($data, $currency);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'SUCCESS' => 'ok',
            'PROCESSING' => 'ok',
            'FAILURE' => 'failed',
        );
        return $this->safe_string($statuses, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //     {
        //         "address" => "0x5f047b29041bcfdbf0e4478cdfa753a336ba6989",
        //         "memo" => "5c247c8a03aa677cea2a251d",
        //         "amount" => 1,
        //         "fee" => 0.0001,
        //         "currency" => "KCS",
        //         "isInner" => false,
        //         "walletTxId" => "5bbb57386d99522d9f954c5a@test004",
        //         "status" => "SUCCESS",
        //         "createdAt" => 1544178843000,
        //         "updatedAt" => 1544178891000
        //         "remark":"foobar"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "id" => "5c2dc64e03aa675aa263f1ac",
        //         "address" => "0x5bedb060b8eb8d823e2414d82acce78d38be7fe9",
        //         "memo" => "",
        //         "currency" => "ETH",
        //         "amount" => 1.0000000,
        //         "fee" => 0.0100000,
        //         "walletTxId" => "3e2414d82acce78d38be7fe9",
        //         "isInner" => false,
        //         "status" => "FAILURE",
        //         "createdAt" => 1546503758000,
        //         "updatedAt" => 1546504603000
        //         "remark":"foobar"
        //     }
        //
        // withdraw
        //
        //     {
        //         "withdrawalId" =>  "5bffb63303aa675e8bbe18f9"
        //     }
        //
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $address = $this->safe_string($transaction, 'address');
        $amount = $this->safe_number($transaction, 'amount');
        $txid = $this->safe_string($transaction, 'walletTxId');
        if ($txid !== null) {
            $txidParts = explode('@', $txid);
            $numTxidParts = is_array($txidParts) ? count($txidParts) : 0;
            if ($numTxidParts > 1) {
                if ($address === null) {
                    if (strlen($txidParts[1]) > 1) {
                        $address = $txidParts[1];
                    }
                }
            }
            $txid = $txidParts[0];
        }
        $type = ($txid === null) ? 'withdrawal' : 'deposit';
        $rawStatus = $this->safe_string($transaction, 'status');
        $status = $this->parse_transaction_status($rawStatus);
        $fee = null;
        $feeCost = $this->safe_number($transaction, 'fee');
        if ($feeCost !== null) {
            $rate = null;
            if ($amount !== null) {
                $rate = $feeCost / $amount;
            }
            $fee = array(
                'cost' => $feeCost,
                'rate' => $rate,
                'currency' => $code,
            );
        }
        $tag = $this->safe_string($transaction, 'memo');
        $timestamp = $this->safe_integer_2($transaction, 'createdAt', 'createAt');
        $id = $this->safe_string_2($transaction, 'id', 'withdrawalId');
        $updated = $this->safe_integer($transaction, 'updatedAt');
        $isV1 = !(is_array($transaction) && array_key_exists('createdAt', $transaction));
        // if it's a v1 structure
        if ($isV1) {
            $type = (is_array($transaction) && array_key_exists('address', $transaction)) ? 'withdrawal' : 'deposit';
            if ($timestamp !== null) {
                $timestamp = $timestamp * 1000;
            }
            if ($updated !== null) {
                $updated = $updated * 1000;
            }
        }
        $comment = $this->safe_string($transaction, 'remark');
        return array(
            'id' => $id,
            'info' => $transaction,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'address' => $address,
            'addressTo' => $address,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => $tag,
            'tagFrom' => null,
            'currency' => $code,
            'amount' => $amount,
            'txid' => $txid,
            'type' => $type,
            'status' => $status,
            'comment' => $comment,
            'fee' => $fee,
            'updated' => $updated,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['pageSize'] = $limit;
        }
        $method = 'privateGetDeposits';
        if ($since !== null) {
            // if $since is earlier than 2019-02-18T00:00:00Z
            if ($since < 1550448000000) {
                $request['startAt'] = intval($since / 1000);
                $method = 'privateGetHistDeposits';
            } else {
                $request['startAt'] = $since;
            }
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         $code => '200000',
        //         data => {
        //             "currentPage" => 1,
        //             "pageSize" => 5,
        //             "totalNum" => 2,
        //             "totalPage" => 1,
        //             "items" => array(
        //                 //--------------------------------------------------
        //                 // version 2 deposit $response structure
        //                 array(
        //                     "address" => "0x5f047b29041bcfdbf0e4478cdfa753a336ba6989",
        //                     "memo" => "5c247c8a03aa677cea2a251d",
        //                     "amount" => 1,
        //                     "fee" => 0.0001,
        //                     "currency" => "KCS",
        //                     "isInner" => false,
        //                     "walletTxId" => "5bbb57386d99522d9f954c5a@test004",
        //                     "status" => "SUCCESS",
        //                     "createdAt" => 1544178843000,
        //                     "updatedAt" => 1544178891000
        //                     "remark":"foobar"
        //                 ),
        //                 //--------------------------------------------------
        //                 // version 1 (historical) deposit $response structure
        //                 {
        //                     "currency" => "BTC",
        //                     "createAt" => 1528536998,
        //                     "amount" => "0.03266638",
        //                     "walletTxId" => "55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234",
        //                     "isInner" => false,
        //                     "status" => "SUCCESS",
        //                 }
        //             )
        //         }
        //     }
        //
        $responseData = $response['data']['items'];
        return $this->parse_transactions($responseData, $currency, $since, $limit, array( 'type' => 'deposit' ));
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['pageSize'] = $limit;
        }
        $method = 'privateGetWithdrawals';
        if ($since !== null) {
            // if $since is earlier than 2019-02-18T00:00:00Z
            if ($since < 1550448000000) {
                $request['startAt'] = intval($since / 1000);
                $method = 'privateGetHistWithdrawals';
            } else {
                $request['startAt'] = $since;
            }
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         $code => '200000',
        //         data => {
        //             "currentPage" => 1,
        //             "pageSize" => 5,
        //             "totalNum" => 2,
        //             "totalPage" => 1,
        //             "items" => array(
        //                 //--------------------------------------------------
        //                 // version 2 withdrawal $response structure
        //                 array(
        //                     "id" => "5c2dc64e03aa675aa263f1ac",
        //                     "address" => "0x5bedb060b8eb8d823e2414d82acce78d38be7fe9",
        //                     "memo" => "",
        //                     "currency" => "ETH",
        //                     "amount" => 1.0000000,
        //                     "fee" => 0.0100000,
        //                     "walletTxId" => "3e2414d82acce78d38be7fe9",
        //                     "isInner" => false,
        //                     "status" => "FAILURE",
        //                     "createdAt" => 1546503758000,
        //                     "updatedAt" => 1546504603000
        //                 ),
        //                 //--------------------------------------------------
        //                 // version 1 (historical) withdrawal $response structure
        //                 {
        //                     "currency" => "BTC",
        //                     "createAt" => 1526723468,
        //                     "amount" => "0.534",
        //                     "address" => "33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV",
        //                     "walletTxId" => "aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4",
        //                     "isInner" => false,
        //                     "status" => "SUCCESS"
        //                 }
        //             )
        //         }
        //     }
        //
        $responseData = $response['data']['items'];
        return $this->parse_transactions($responseData, $currency, $since, $limit, array( 'type' => 'withdrawal' ));
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for $balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the kucoin api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#$balance-structure $balance structure~
         */
        yield $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchBalance', 'defaultType', 'spot');
        $requestedType = $this->safe_string($params, 'type', $defaultType);
        $accountsByType = $this->safe_value($this->options, 'accountsByType');
        $type = $this->safe_string($accountsByType, $requestedType, $requestedType);
        $params = $this->omit($params, 'type');
        $request = array(
            'type' => $type,
        );
        $response = yield $this->privateGetAccounts (array_merge($request, $params));
        //
        //     {
        //         "code":"200000",
        //         "data":array(
        //             array("balance":"0.00009788","available":"0.00009788","holds":"0","currency":"BTC","id":"5c6a4fd399a1d81c4f9cc4d0","type":"trade"),
        //             array("balance":"3.41060034","available":"3.41060034","holds":"0","currency":"SOUL","id":"5c6a4d5d99a1d8182d37046d","type":"trade"),
        //             array("balance":"0.01562641","available":"0.01562641","holds":"0","currency":"NEO","id":"5c6a4f1199a1d8165a99edb1","type":"trade"),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($data); $i++) {
            $balance = $data[$i];
            $balanceType = $this->safe_string($balance, 'type');
            if ($balanceType === $type) {
                $currencyId = $this->safe_string($balance, 'currency');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['total'] = $this->safe_string($balance, 'balance');
                $account['free'] = $this->safe_string($balance, 'available');
                $account['used'] = $this->safe_string($balance, 'holds');
                $result[$code] = $account;
            }
        }
        return $this->safe_balance($result);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $requestedAmount = $this->currency_to_precision($code, $amount);
        $accountsById = $this->safe_value($this->options, 'accountsByType', array());
        $fromId = $this->safe_string($accountsById, $fromAccount, $fromAccount);
        $toId = $this->safe_string($accountsById, $toAccount, $toAccount);
        if ($fromId === 'contract') {
            if ($toId !== 'main') {
                throw new ExchangeError($this->id . ' transfer() only supports transferring from futures account to main account');
            }
            $request = array(
                'currency' => $currency['id'],
                'amount' => $requestedAmount,
            );
            if (!(is_array($params) && array_key_exists('bizNo', $params))) {
                // it doesn't like more than 24 characters
                $request['bizNo'] = $this->uuid22();
            }
            $response = yield $this->futuresPrivatePostTransferOut (array_merge($request, $params));
            //
            //     {
            //         'code' => '200000',
            //         'data' => {
            //             'applyId' => '605a87217dff1500063d485d',
            //             'bizNo' => 'bcd6e5e1291f4905af84dc',
            //             'payAccountType' => 'CONTRACT',
            //             'payTag' => 'DEFAULT',
            //             'remark' => '',
            //             'recAccountType' => 'MAIN',
            //             'recTag' => 'DEFAULT',
            //             'recRemark' => '',
            //             'recSystem' => 'KUCOIN',
            //             'status' => 'PROCESSING',
            //             'currency' => 'XBT',
            //             'amount' => '0.00001',
            //             'fee' => '0',
            //             'sn' => '573688685663948',
            //             'reason' => '',
            //             'createdAt' => 1616545569000,
            //             'updatedAt' => 1616545569000
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_transfer($data, $currency);
        } else {
            $request = array(
                'currency' => $currency['id'],
                'from' => $fromId,
                'to' => $toId,
                'amount' => $requestedAmount,
            );
            if (!(is_array($params) && array_key_exists('clientOid', $params))) {
                $request['clientOid'] = $this->uuid();
            }
            $response = yield $this->privatePostAccountsInnerTransfer (array_merge($request, $params));
            //
            //     {
            //         'code' => '200000',
            //         'data' => {
            //              'orderId' => '605a6211e657f00006ad0ad6'
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_transfer($data, $currency);
        }
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        // $transfer (spot)
        //
        //     {
        //         'orderId' => '605a6211e657f00006ad0ad6'
        //     }
        //
        //
        // $transfer (futures)
        //
        //     {
        //         'applyId' => '605a87217dff1500063d485d',
        //         'bizNo' => 'bcd6e5e1291f4905af84dc',
        //         'payAccountType' => 'CONTRACT',
        //         'payTag' => 'DEFAULT',
        //         'remark' => '',
        //         'recAccountType' => 'MAIN',
        //         'recTag' => 'DEFAULT',
        //         'recRemark' => '',
        //         'recSystem' => 'KUCOIN',
        //         'status' => 'PROCESSING',
        //         'currency' => 'XBT',
        //         'amount' => '0.00001',
        //         'fee' => '0',
        //         'sn' => '573688685663948',
        //         'reason' => '',
        //         'createdAt' => 1616545569000,
        //         'updatedAt' => 1616545569000
        //     }
        //
        $timestamp = $this->safe_integer($transfer, 'createdAt');
        $currencyId = $this->safe_string($transfer, 'currency');
        $rawStatus = $this->safe_string($transfer, 'status');
        $accountFromRaw = $this->safe_string($transfer, 'payAccountType');
        $accountToRaw = $this->safe_string($transfer, 'recAccountType');
        $accountsByType = $this->safe_value($this->options, 'accountsByType');
        $accountFrom = $this->safe_string($accountsByType, strtolower($accountFromRaw));
        $accountTo = $this->safe_string($accountsByType, strtolower($accountToRaw));
        return array(
            'id' => $this->safe_string_2($transfer, 'applyId', 'orderId'),
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $accountFrom,
            'toAccount' => $accountTo,
            'status' => $this->parse_transfer_status($rawStatus),
            'info' => $transfer,
        );
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            'PROCESSING' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_ledger_entry_type($type) {
        $types = array(
            'Assets Transferred in After Upgrading' => 'transfer', // Assets Transferred in After V1 to V2 Upgrading
            'Deposit' => 'transaction', // Deposit
            'Withdrawal' => 'transaction', // Withdrawal
            'Transfer' => 'transfer', // Transfer
            'Trade_Exchange' => 'trade', // Trade
            // 'Vote for Coin' => 'Vote for Coin', // Vote for Coin
            'KuCoin Bonus' => 'bonus', // KuCoin Bonus
            'Referral Bonus' => 'referral', // Referral Bonus
            'Rewards' => 'bonus', // Activities Rewards
            // 'Distribution' => 'Distribution', // Distribution, such as get GAS by holding NEO
            'Airdrop/Fork' => 'airdrop', // Airdrop/Fork
            'Other rewards' => 'bonus', // Other rewards, except Vote, Airdrop, Fork
            'Fee Rebate' => 'rebate', // Fee Rebate
            'Buy Crypto' => 'trade', // Use credit card to buy crypto
            'Sell Crypto' => 'sell', // Use credit card to sell crypto
            'Public Offering Purchase' => 'trade', // Public Offering Purchase for Spotlight
            // 'Send red envelope' => 'Send red envelope', // Send red envelope
            // 'Open red envelope' => 'Open red envelope', // Open red envelope
            // 'Staking' => 'Staking', // Staking
            // 'LockDrop Vesting' => 'LockDrop Vesting', // LockDrop Vesting
            // 'Staking Profits' => 'Staking Profits', // Staking Profits
            // 'Redemption' => 'Redemption', // Redemption
            'Refunded Fees' => 'fee', // Refunded Fees
            'KCS Pay Fees' => 'fee', // KCS Pay Fees
            'Margin Trade' => 'trade', // Margin Trade
            'Loans' => 'Loans', // Loans
            // 'Borrowings' => 'Borrowings', // Borrowings
            // 'Debt Repayment' => 'Debt Repayment', // Debt Repayment
            // 'Loans Repaid' => 'Loans Repaid', // Loans Repaid
            // 'Lendings' => 'Lendings', // Lendings
            // 'Pool transactions' => 'Pool transactions', // Pool-X transactions
            'Instant Exchange' => 'trade', // Instant Exchange
            'Sub-account transfer' => 'transfer', // Sub-account transfer
            'Liquidation Fees' => 'fee', // Liquidation Fees
            // 'Soft Staking Profits' => 'Soft Staking Profits', // Soft Staking Profits
            // 'Voting Earnings' => 'Voting Earnings', // Voting Earnings on Pool-X
            // 'Redemption of Voting' => 'Redemption of Voting', // Redemption of Voting on Pool-X
            // 'Voting' => 'Voting', // Voting on Pool-X
            // 'Convert to KCS' => 'Convert to KCS', // Convert to KCS
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_ledger_entry($item, $currency = null) {
        //
        //     {
        //         "id" => "611a1e7c6a053300067a88d9", //unique key for each ledger entry
        //         "currency" => "USDT", //Currency
        //         "amount" => "10.00059547", //The total $amount of assets (fees included) involved in assets changes such as transaction, withdrawal and bonus distribution.
        //         "fee" => "0", //Deposit or withdrawal $fee
        //         "balance" => "0", //Total assets of a $currency remaining funds after transaction
        //         "accountType" => "MAIN", //Account Type
        //         "bizType" => "Loans Repaid", //business $type
        //         "direction" => "in", //side, in or out
        //         "createdAt" => 1629101692950, //Creation time
        //         "context" => "array(\"borrowerUserId\":\"601ad03e50dc810006d242ea\",\"loanRepayDetailNo\":\"611a1e7cc913d000066cf7ec\")" //Business core parameters
        //     }
        //
        $id = $this->safe_string($item, 'id');
        $currencyId = $this->safe_string($item, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $amount = $this->safe_number($item, 'amount');
        $balanceAfter = null;
        // $balanceAfter = $this->safe_number($item, 'balance'); only returns zero string
        $bizType = $this->safe_string($item, 'bizType');
        $type = $this->parse_ledger_entry_type($bizType);
        $direction = $this->safe_string($item, 'direction');
        $timestamp = $this->safe_integer($item, 'createdAt');
        $datetime = $this->iso8601($timestamp);
        $account = $this->safe_string($item, 'accountType'); // MAIN, TRADE, MARGIN, or CONTRACT
        $context = $this->safe_string($item, 'context'); // contains other information about the ledger entry
        //
        // withdrawal transaction
        //
        //     "array(\"orderId\":\"617bb2d09e7b3b000196dac8\",\"txId\":\"0x79bb9855f86b351a45cab4dc69d78ca09586a94c45dde49475722b98f401b054\")"
        //
        // deposit to MAIN, trade via MAIN
        //
        //     "array(\"orderId\":\"617ab9949e7b3b0001948081\",\"txId\":\"0x7a06b16bbd6b03dbc3d96df5683b15229fc35e7184fd7179a5f3a310bd67d1fa@default@0\")"
        //
        // sell trade
        //
        //     "array(\"symbol\":\"ETH-USDT\",\"orderId\":\"617adcd1eb3fa20001dd29a1\",\"tradeId\":\"617adcd12e113d2b91222ff9\")"
        //
        $referenceId = null;
        if ($context !== null && $context !== '') {
            $parsed = json_decode($context, $as_associative_array = true);
            $orderId = $this->safe_string($parsed, 'orderId');
            $tradeId = $this->safe_string($parsed, 'tradeId');
            // transactions only have an $orderId but for trades we wish to use $tradeId
            if ($tradeId !== null) {
                $referenceId = $tradeId;
            } else {
                $referenceId = $orderId;
            }
        }
        $fee = null;
        $feeCost = $this->safe_number($item, 'fee');
        $feeCurrency = null;
        if ($feeCost !== 0) {
            $feeCurrency = $code;
            $fee = array( 'cost' => $feeCost, 'currency' => $feeCurrency );
        }
        return array(
            'id' => $id,
            'direction' => $direction,
            'account' => $account,
            'referenceId' => $referenceId,
            'referenceAccount' => $account,
            'type' => $type,
            'currency' => $code,
            'amount' => $amount,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'before' => null,
            'after' => $balanceAfter, // null
            'status' => null,
            'fee' => $fee,
            'info' => $item,
        );
    }

    public function fetch_ledger($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        yield $this->load_accounts();
        $request = array(
            // 'currency' => $currency['id'], // can choose up to 10, if not provided returns for all currencies by default
            // 'direction' => 'in', // 'out'
            // 'bizType' => 'DEPOSIT', // DEPOSIT, WITHDRAW, TRANSFER, SUB_TRANSFER,TRADE_EXCHANGE, MARGIN_EXCHANGE, KUCOIN_BONUS (optional)
            // 'startAt' => $since,
            // 'endAt' => exchange.milliseconds (),
        );
        if ($since !== null) {
            $request['startAt'] = $since;
        }
        // atm only single $currency retrieval is supported
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        $response = yield $this->privateGetAccountsLedgers (array_merge($request, $params));
        //
        //     {
        //         "code":"200000",
        //         "data":{
        //             "currentPage":1,
        //             "pageSize":50,
        //             "totalNum":1,
        //             "totalPage":1,
        //             "items":array(
        //                 {
        //                     "id":"617cc528729f5f0001c03ceb",
        //                     "currency":"GAS",
        //                     "amount":"0.00000339",
        //                     "fee":"0",
        //                     "balance":"0",
        //                     "accountType":"MAIN",
        //                     "bizType":"Distribution",
        //                     "direction":"in",
        //                     "createdAt":1635566888183,
        //                     "context":"array(\"orderId\":\"617cc47a1c47ed0001ce3606\",\"description\":\"Holding NEO,distribute GAS(2021/10/30)\")"
        //                 }
        //                 array(
        //                     "id" => "611a1e7c6a053300067a88d9",//unique key
        //                     "currency" => "USDT", //Currency
        //                     "amount" => "10.00059547", //Change amount of the funds
        //                     "fee" => "0", //Deposit or withdrawal fee
        //                     "balance" => "0", //Total assets of a $currency
        //                     "accountType" => "MAIN", //Account Type
        //                     "bizType" => "Loans Repaid", //business type
        //                     "direction" => "in", //side, in or out
        //                     "createdAt" => 1629101692950, //Creation time
        //                     "context" => "array(\"borrowerUserId\":\"601ad03e50dc810006d242ea\",\"loanRepayDetailNo\":\"611a1e7cc913d000066cf7ec\")"
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        $items = $this->safe_value($data, 'items');
        return $this->parse_ledger($items, $currency, $since, $limit);
    }

    public function calculate_rate_limiter_cost($api, $method, $path, $params, $config = array (), $context = array ()) {
        $versions = $this->safe_value($this->options, 'versions', array());
        $apiVersions = $this->safe_value($versions, $api, array());
        $methodVersions = $this->safe_value($apiVersions, $method, array());
        $defaultVersion = $this->safe_string($methodVersions, $path, $this->options['version']);
        $version = $this->safe_string($params, 'version', $defaultVersion);
        if ($version === 'v3' && (is_array($config) && array_key_exists('v3', $config))) {
            return $config['v3'];
        } elseif ($version === 'v2' && (is_array($config) && array_key_exists('v2', $config))) {
            return $config['v2'];
        } elseif ($version === 'v1' && (is_array($config) && array_key_exists('v1', $config))) {
            return $config['v1'];
        }
        return $this->safe_integer($config, 'cost', 1);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        //
        // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint
        //                                †                 ↑
        //
        $versions = $this->safe_value($this->options, 'versions', array());
        $apiVersions = $this->safe_value($versions, $api, array());
        $methodVersions = $this->safe_value($apiVersions, $method, array());
        $defaultVersion = $this->safe_string($methodVersions, $path, $this->options['version']);
        $version = $this->safe_string($params, 'version', $defaultVersion);
        $params = $this->omit($params, 'version');
        $endpoint = '/api/' . $version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $endpart = '';
        $headers = ($headers !== null) ? $headers : array();
        if ($query) {
            if (($method === 'GET') || ($method === 'DELETE')) {
                $endpoint .= '?' . $this->rawencode($query);
            } else {
                $body = $this->json($query);
                $endpart = $body;
                $headers['Content-Type'] = 'application/json';
            }
        }
        $url = $this->urls['api'][$api] . $endpoint;
        if (($api === 'private') || ($api === 'futuresPrivate')) {
            $this->check_required_credentials();
            $timestamp = (string) $this->nonce();
            $headers = array_merge(array(
                'KC-API-KEY-VERSION' => '2',
                'KC-API-KEY' => $this->apiKey,
                'KC-API-TIMESTAMP' => $timestamp,
            ), $headers);
            $apiKeyVersion = $this->safe_string($headers, 'KC-API-KEY-VERSION');
            if ($apiKeyVersion === '2') {
                $passphrase = $this->hmac($this->encode($this->password), $this->encode($this->secret), 'sha256', 'base64');
                $headers['KC-API-PASSPHRASE'] = $passphrase;
            } else {
                $headers['KC-API-PASSPHRASE'] = $this->password;
            }
            $payload = $timestamp . $method . $endpoint . $endpart;
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret), 'sha256', 'base64');
            $headers['KC-API-SIGN'] = $signature;
            $partner = $this->safe_value($this->options, 'partner', array());
            $partnerId = $this->safe_string($partner, 'id');
            $partnerSecret = $this->safe_string($partner, 'secret');
            if (($partnerId !== null) && ($partnerSecret !== null)) {
                $partnerPayload = $timestamp . $partnerId . $this->apiKey;
                $partnerSignature = $this->hmac($this->encode($partnerPayload), $this->encode($partnerSecret), 'sha256', 'base64');
                $headers['KC-API-PARTNER-SIGN'] = $partnerSignature;
                $headers['KC-API-PARTNER'] = $partnerId;
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $body);
            return;
        }
        //
        // bad
        //     array( "code" => "400100", "msg" => "validation.createOrder.clientOidIsRequired" )
        // good
        //     array( $code => '200000', data => array( ... ))
        //
        $errorCode = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg', '');
        $feedback = $this->id . ' ' . $message;
        $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
        $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
    }
}
