<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\BadSymbol;
use \ccxt\InvalidOrder;
use \ccxt\Precise;

class hitbtc3 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'hitbtc3',
            'name' => 'HitBTC',
            'countries' => array( 'HK' ),
            // 300 requests per second => 1000ms / 300 = 3.333 (Trading => placing, replacing, deleting)
            // 30 requests per second => ( 1000ms / rateLimit ) / 30 = cost = 10 (Market Data and other Public Requests)
            // 20 requests per second => ( 1000ms / rateLimit ) / 20 = cost = 15 (All Other)
            'rateLimit' => 3.333, // TODO => optimize https://api.hitbtc.com/#rate-limiting
            'version' => '3',
            'pro' => true,
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => null,
                'addMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createOrder' => true,
                'createReduceOnlyOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => null,
                'fetchBorrowRateHistories' => null,
                'fetchBorrowRateHistory' => null,
                'fetchBorrowRates' => null,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => null,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => true,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => null,
                'fetchMarketLeverageTiers' => null,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => true,
                'fetchPosition' => true,
                'fetchPositions' => true,
                'fetchPremiumIndexOHLCV' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactions' => true,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'precisionMode' => TICK_SIZE,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
                'test' => array(
                    'public' => 'https://api.demo.hitbtc.com',
                    'private' => 'https://api.demo.hitbtc.com',
                ),
                'api' => array(
                    'public' => 'https://api.hitbtc.com/api/3',
                    'private' => 'https://api.hitbtc.com/api/3',
                ),
                'www' => 'https://hitbtc.com',
                'referral' => 'https://hitbtc.com/?ref_id=5a5d39a65d466',
                'doc' => array(
                    'https://api.hitbtc.com',
                    'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md',
                ),
                'fees' => array(
                    'https://hitbtc.com/fees-and-limits',
                    'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'public/currency' => 10,
                        'public/symbol' => 10,
                        'public/ticker' => 10,
                        'public/price/rate' => 10,
                        'public/trades' => 10,
                        'public/orderbook' => 10,
                        'public/candles' => 10,
                        'public/futures/info' => 10,
                        'public/futures/history/funding' => 10,
                        'public/futures/candles/index_price' => 10,
                        'public/futures/candles/mark_price' => 10,
                        'public/futures/candles/premium_index' => 10,
                        'public/futures/candles/open_interest' => 10,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'spot/balance' => 15,
                        'spot/order' => 15,
                        'spot/order/{client_order_id}' => 15,
                        'spot/fee' => 15,
                        'spot/fee/{symbol}' => 15,
                        'spot/history/order' => 15,
                        'spot/history/trade' => 15,
                        'margin/account' => 15,
                        'margin/account/isolated/{symbol}' => 15,
                        'margin/order' => 15,
                        'margin/order/{client_order_id}' => 15,
                        'margin/history/clearing' => 15,
                        'margin/history/order' => 15,
                        'margin/history/positions' => 15,
                        'margin/history/trade' => 15,
                        'futures/balance' => 15,
                        'futures/account' => 15,
                        'futures/account/isolated/{symbol}' => 15,
                        'futures/order' => 15,
                        'futures/order/{client_order_id}' => 15,
                        'futures/fee' => 15,
                        'futures/fee/{symbol}' => 15,
                        'futures/history/clearing' => 15,
                        'futures/history/order' => 15,
                        'futures/history/positions' => 15,
                        'futures/history/trade' => 15,
                        'wallet/balance' => 15,
                        'wallet/crypto/address' => 15,
                        'wallet/crypto/address/recent-deposit' => 15,
                        'wallet/crypto/address/recent-withdraw' => 15,
                        'wallet/crypto/address/check-mine' => 15,
                        'wallet/transactions' => 15,
                        'wallet/crypto/check-offchain-available' => 15,
                        'wallet/crypto/fee/estimate' => 15,
                        'sub-account' => 15,
                        'sub-account/acl' => 15,
                        'sub-account/balance/{subAccID}' => 15,
                        'sub-account/crypto/address/{subAccID}/{currency}' => 15,
                    ),
                    'post' => array(
                        'spot/order' => 1,
                        'margin/order' => 1,
                        'futures/order' => 1,
                        'wallet/convert' => 15,
                        'wallet/crypto/withdraw' => 15,
                        'wallet/transfer' => 15,
                        'sub-account/freeze' => 15,
                        'sub-account/activate' => 15,
                        'sub-account/transfer' => 15,
                        'sub-account/acl' => 15,
                    ),
                    'patch' => array(
                        'spot/order/{client_order_id}' => 1,
                        'margin/order/{client_order_id}' => 1,
                        'futures/order/{client_order_id}' => 1,
                    ),
                    'delete' => array(
                        'spot/order' => 1,
                        'spot/order/{client_order_id}' => 1,
                        'margin/position' => 1,
                        'margin/position/isolated/{symbol}' => 1,
                        'margin/order' => 1,
                        'margin/order/{client_order_id}' => 1,
                        'futures/position' => 1,
                        'futures/position/isolated/{symbol}' => 1,
                        'futures/order' => 1,
                        'futures/order/{client_order_id}' => 1,
                        'wallet/crypto/withdraw/{id}' => 1,
                    ),
                    'put' => array(
                        'margin/account/isolated/{symbol}' => 1,
                        'futures/account/isolated/{symbol}' => 1,
                        'wallet/crypto/withdraw/{id}' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0009'),
                    'maker' => $this->parse_number('0.0009'),
                    'tiers' => array(
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('10'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('100'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0002') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.0001') ),
                            array( $this->parse_number('20000'), $this->parse_number('0') ),
                            array( $this->parse_number('50000'), $this->parse_number('-0.0001') ),
                            array( $this->parse_number('100000'), $this->parse_number('-0.0001') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('10'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('100'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.0004') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.0002') ),
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => 'M1',
                '3m' => 'M3',
                '5m' => 'M5',
                '15m' => 'M15',
                '30m' => 'M30', // default
                '1h' => 'H1',
                '4h' => 'H4',
                '1d' => 'D1',
                '1w' => 'D7',
                '1M' => '1M',
            ),
            'exceptions' => array(
                'exact' => array(
                    '429' => '\\ccxt\\RateLimitExceeded',
                    '500' => '\\ccxt\\ExchangeError',
                    '503' => '\\ccxt\\ExchangeNotAvailable',
                    '504' => '\\ccxt\\ExchangeNotAvailable',
                    '600' => '\\ccxt\\PermissionDenied',
                    '800' => '\\ccxt\\ExchangeError',
                    '1002' => '\\ccxt\\AuthenticationError',
                    '1003' => '\\ccxt\\PermissionDenied',
                    '1004' => '\\ccxt\\AuthenticationError',
                    '1005' => '\\ccxt\\AuthenticationError',
                    '2001' => '\\ccxt\\BadSymbol',
                    '2002' => '\\ccxt\\BadRequest',
                    '2003' => '\\ccxt\\BadRequest',
                    '2010' => '\\ccxt\\BadRequest',
                    '2011' => '\\ccxt\\BadRequest',
                    '2012' => '\\ccxt\\BadRequest',
                    '2020' => '\\ccxt\\BadRequest',
                    '2022' => '\\ccxt\\BadRequest',
                    '10001' => '\\ccxt\\BadRequest',
                    '10021' => '\\ccxt\\AccountSuspended',
                    '10022' => '\\ccxt\\BadRequest',
                    '20001' => '\\ccxt\\InsufficientFunds',
                    '20002' => '\\ccxt\\OrderNotFound',
                    '20003' => '\\ccxt\\ExchangeError',
                    '20004' => '\\ccxt\\ExchangeError',
                    '20005' => '\\ccxt\\ExchangeError',
                    '20006' => '\\ccxt\\ExchangeError',
                    '20007' => '\\ccxt\\ExchangeError',
                    '20008' => '\\ccxt\\InvalidOrder',
                    '20009' => '\\ccxt\\InvalidOrder',
                    '20010' => '\\ccxt\\OnMaintenance',
                    '20011' => '\\ccxt\\ExchangeError',
                    '20012' => '\\ccxt\\ExchangeError',
                    '20014' => '\\ccxt\\ExchangeError',
                    '20016' => '\\ccxt\\ExchangeError',
                    '20031' => '\\ccxt\\ExchangeError',
                    '20032' => '\\ccxt\\ExchangeError',
                    '20033' => '\\ccxt\\ExchangeError',
                    '20034' => '\\ccxt\\ExchangeError',
                    '20040' => '\\ccxt\\ExchangeError',
                    '20041' => '\\ccxt\\ExchangeError',
                    '20042' => '\\ccxt\\ExchangeError',
                    '20043' => '\\ccxt\\ExchangeError',
                    '20044' => '\\ccxt\\PermissionDenied',
                    '20045' => '\\ccxt\\InvalidOrder',
                    '20080' => '\\ccxt\\ExchangeError',
                    '21001' => '\\ccxt\\ExchangeError',
                    '21003' => '\\ccxt\\AccountSuspended',
                    '21004' => '\\ccxt\\AccountSuspended',
                ),
                'broad' => array(),
            ),
            'options' => array(
                'networks' => array(
                    'ETH' => 'USDT20',
                    'ERC20' => 'USDT20',
                    'TRX' => 'USDTRX',
                    'TRC20' => 'USDTRX',
                    'OMNI' => 'USDT',
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'funding' => 'wallet',
                    'future' => 'derivatives',
                ),
            ),
            'commonCurrencies' => array(
                'AUTO' => 'Cube',
                'BCC' => 'BCC', // initial symbol for Bitcoin Cash, now inactive
                'BDP' => 'BidiPass',
                'BET' => 'DAO.Casino',
                'BIT' => 'BitRewards',
                'BOX' => 'BOX Token',
                'CPT' => 'Cryptaur', // conflict with CPT = Contents Protocol https://github.com/ccxt/ccxt/issues/4920 and https://github.com/ccxt/ccxt/issues/6081
                'GET' => 'Themis',
                'GMT' => 'GMT Token',
                'HSR' => 'HC',
                'IQ' => 'IQ.Cash',
                'LNC' => 'LinkerCoin',
                'PLA' => 'PlayChip',
                'PNT' => 'Penta',
                'SBTC' => 'Super Bitcoin',
                'STEPN' => 'GMT',
                'STX' => 'STOX',
                'TV' => 'Tokenville',
                'USD' => 'USDT',
                'XMT' => 'MTL',
                'XPNT' => 'PNT',
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for hitbtc3
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing $market data
         */
        $response = yield $this->publicGetPublicSymbol ($params);
        //
        //     {
        //         "AAVEUSDT_PERP":array(
        //             "type":"futures",
        //             "expiry":null,
        //             "underlying":"AAVE",
        //             "base_currency":null,
        //             "quote_currency":"USDT",
        //             "quantity_increment":"0.01",
        //             "tick_size":"0.001",
        //             "take_rate":"0.0005",
        //             "make_rate":"0.0002",
        //             "fee_currency":"USDT",
        //             "margin_trading":true,
        //             "max_initial_leverage":"50.00"
        //         ),
        //         "MANAUSDT":array(
        //             "type":"spot",
        //             "base_currency":"MANA",
        //             "quote_currency":"USDT",
        //             "quantity_increment":"1",
        //             "tick_size":"0.0000001",
        //             "take_rate":"0.0025",
        //             "make_rate":"0.001",
        //             "fee_currency":"USDT",
        //             "margin_trading":true,
        //             "max_initial_leverage":"5.00"
        //         ),
        //     }
        //
        $result = array();
        $ids = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            $market = $this->safe_value($response, $id);
            $marketType = $this->safe_string($market, 'type');
            $expiry = $this->safe_integer($market, 'expiry');
            $contract = ($marketType === 'futures');
            $spot = ($marketType === 'spot');
            $marginTrading = $this->safe_value($market, 'margin_trading', false);
            $margin = $spot && $marginTrading;
            $future = ($expiry !== null);
            $swap = ($contract && !$future);
            $option = false;
            $baseId = $this->safe_string_2($market, 'base_currency', 'underlying');
            $quoteId = $this->safe_string($market, 'quote_currency');
            $feeCurrencyId = $this->safe_string($market, 'fee_currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $feeCurrency = $this->safe_currency_code($feeCurrencyId);
            $settleId = null;
            $settle = null;
            $symbol = $base . '/' . $quote;
            $type = 'spot';
            $contractSize = null;
            $linear = null;
            $inverse = null;
            if ($contract) {
                $contractSize = $this->parse_number('1');
                $settleId = $feeCurrencyId;
                $settle = $this->safe_currency_code($settleId);
                $linear = (($quote !== null) && ($quote === $settle));
                $inverse = !$linear;
                $symbol = $symbol . ':' . $settle;
                if ($future) {
                    $symbol = $symbol . '-' . $expiry;
                    $type = 'future';
                } else {
                    $type = 'swap';
                }
            }
            $lotString = $this->safe_string($market, 'quantity_increment');
            $stepString = $this->safe_string($market, 'tick_size');
            $lot = $this->parse_number($lotString);
            $step = $this->parse_number($stepString);
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => $type,
                'spot' => $spot,
                'margin' => $margin,
                'swap' => $swap,
                'future' => $future,
                'option' => $option,
                'active' => true,
                'contract' => $contract,
                'linear' => $linear,
                'inverse' => $inverse,
                'taker' => $this->safe_number($market, 'take_rate'),
                'maker' => $this->safe_number($market, 'make_rate'),
                'contractSize' => $contractSize,
                'expiry' => $expiry,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'feeCurrency' => $feeCurrency,
                'precision' => array(
                    'amount' => $lot,
                    'price' => $step,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => $this->parse_number('1'),
                        'max' => $this->safe_number($market, 'max_initial_leverage', 1),
                    ),
                    'amount' => array(
                        'min' => $lot,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => $step,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->parse_number(Precise::string_mul($lotString, $stepString)),
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available $currencies on an exchange
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {dict} an associative dictionary of $currencies
         */
        $response = yield $this->publicGetPublicCurrency ($params);
        //
        //     {
        //       "WEALTH" => {
        //         "full_name" => "ConnectWealth",
        //         "payin_enabled" => false,
        //         "payout_enabled" => false,
        //         "transfer_enabled" => true,
        //         "precision_transfer" => "0.001",
        //         "networks" => array(
        //           {
        //             "network" => "ETH",
        //             "protocol" => "ERC20",
        //             "default" => true,
        //             "payin_enabled" => false,
        //             "payout_enabled" => false,
        //             "precision_payout" => "0.001",
        //             "payout_fee" => "0.016800000000",
        //             "payout_is_payment_id" => false,
        //             "payin_payment_id" => false,
        //             "payin_confirmations" => "2"
        //           }
        //         )
        //       }
        //     }
        //
        $result = array();
        $currencies = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($currencies); $i++) {
            $currencyId = $currencies[$i];
            $code = $this->safe_currency_code($currencyId);
            $entry = $response[$currencyId];
            $name = $this->safe_string($entry, 'full_name');
            $precision = $this->safe_number($entry, 'precision_transfer');
            $payinEnabled = $this->safe_value($entry, 'payin_enabled', false);
            $payoutEnabled = $this->safe_value($entry, 'payout_enabled', false);
            $transferEnabled = $this->safe_value($entry, 'transfer_enabled', false);
            $active = $payinEnabled && $payoutEnabled && $transferEnabled;
            $rawNetworks = $this->safe_value($entry, 'networks', array());
            $networks = array();
            $fee = null;
            $depositEnabled = null;
            $withdrawEnabled = null;
            for ($j = 0; $j < count($rawNetworks); $j++) {
                $rawNetwork = $rawNetworks[$j];
                $networkId = $this->safe_string_2($rawNetwork, 'protocol', 'network');
                $network = $this->safe_network($networkId);
                $fee = $this->safe_number($rawNetwork, 'payout_fee');
                $precision = $this->safe_number($rawNetwork, 'precision_payout');
                $payinEnabledNetwork = $this->safe_value($entry, 'payin_enabled', false);
                $payoutEnabledNetwork = $this->safe_value($entry, 'payout_enabled', false);
                $activeNetwork = $payinEnabledNetwork && $payoutEnabledNetwork;
                if ($payinEnabledNetwork && !$depositEnabled) {
                    $depositEnabled = true;
                } elseif (!$payinEnabledNetwork) {
                    $depositEnabled = false;
                }
                if ($payoutEnabledNetwork && !$withdrawEnabled) {
                    $withdrawEnabled = true;
                } elseif (!$payoutEnabledNetwork) {
                    $withdrawEnabled = false;
                }
                $networks[$network] = array(
                    'info' => $rawNetwork,
                    'id' => $networkId,
                    'network' => $network,
                    'fee' => $fee,
                    'active' => $activeNetwork,
                    'deposit' => $payinEnabledNetwork,
                    'withdraw' => $payoutEnabledNetwork,
                    'precision' => $precision,
                    'limits' => array(
                        'withdraw' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                );
            }
            $networksKeys = is_array($networks) ? array_keys($networks) : array();
            $networksLength = is_array($networksKeys) ? count($networksKeys) : 0;
            $result[$code] = array(
                'info' => $entry,
                'code' => $code,
                'id' => $currencyId,
                'precision' => $precision,
                'name' => $name,
                'active' => $active,
                'deposit' => $depositEnabled,
                'withdraw' => $withdrawEnabled,
                'networks' => $networks,
                'fee' => ($networksLength <= 1) ? $fee : null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function safe_network($networkId) {
        if ($networkId === null) {
            return null;
        } else {
            return strtoupper($networkId);
        }
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $network = $this->safe_string_upper($params, 'network');
        if (($network !== null) && ($code === 'USDT')) {
            $networks = $this->safe_value($this->options, 'networks');
            $parsedNetwork = $this->safe_string($networks, $network);
            if ($parsedNetwork !== null) {
                $request['currency'] = $parsedNetwork;
            }
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privateGetWalletCryptoAddress (array_merge($request, $params));
        //
        //  [array("currency":"ETH","address":"0xd0d9aea60c41988c3e68417e2616065617b7afd3")]
        //
        $firstAddress = $this->safe_value($response, 0);
        $address = $this->safe_string($firstAddress, 'address');
        $currencyId = $this->safe_string($firstAddress, 'currency');
        $tag = $this->safe_string($firstAddress, 'payment_id');
        $parsedCode = $this->safe_currency_code($currencyId);
        return array(
            'info' => $response,
            'address' => $address,
            'tag' => $tag,
            'code' => $parsedCode,
            'network' => null,
        );
    }

    public function parse_balance($response) {
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($entry, 'available');
            $account['used'] = $this->safe_string($entry, 'reserved');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $type = $this->safe_string_lower($params, 'type', 'spot');
        $params = $this->omit($params, array( 'type' ));
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $account = $this->safe_string($accountsByType, $type, $type);
        $response = null;
        if ($account === 'wallet') {
            $response = yield $this->privateGetWalletBalance ($params);
        } elseif ($account === 'spot') {
            $response = yield $this->privateGetSpotBalance ($params);
        } elseif ($account === 'derivatives') {
            $response = yield $this->privateGetFuturesBalance ($params);
        } else {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new BadRequest($this->id . ' fetchBalance() $type parameter must be one of ' . implode(', ', $keys));
        }
        //
        //     array(
        //       array(
        //         "currency" => "PAXG",
        //         "available" => "0",
        //         "reserved" => "0",
        //         "reserved_margin" => "0",
        //       ),
        //       ...
        //     )
        //
        return $this->parse_balance($response);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {str} $symbol unified $symbol of the market to fetch the ticker for
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        $response = yield $this->fetch_tickers(array( $symbol ), $params);
        return $this->safe_value($response, $symbol);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each $market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structures}
         */
        yield $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            $marketIds = $this->market_ids($symbols);
            $delimited = implode(',', $marketIds);
            $request['symbols'] = $delimited;
        }
        $response = yield $this->publicGetPublicTicker (array_merge($request, $params));
        //
        //     {
        //       "BTCUSDT" => {
        //         "ask" => "63049.06",
        //         "bid" => "63046.41",
        //         "last" => "63048.36",
        //         "low" => "62010.00",
        //         "high" => "66657.99",
        //         "open" => "64839.75",
        //         "volume" => "15272.13278",
        //         "volume_quote" => "976312127.6277998",
        //         "timestamp" => "2021-10-22T04:25:47.573Z"
        //       }
        //     }
        //
        $result = array();
        $keys = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $marketId = $keys[$i];
            $market = $this->safe_market($marketId);
            $symbol = $market['symbol'];
            $entry = $response[$marketId];
            $result[$symbol] = $this->parse_ticker($entry, $market);
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //       "ask" => "62756.01",
        //       "bid" => "62754.09",
        //       "last" => "62755.87",
        //       "low" => "62010.00",
        //       "high" => "66657.99",
        //       "open" => "65089.27",
        //       "volume" => "16719.50366",
        //       "volume_quote" => "1063422878.8156828",
        //       "timestamp" => "2021-10-22T07:29:14.585Z"
        //     }
        //
        $timestamp = $this->parse8601($ticker['timestamp']);
        $symbol = $this->safe_symbol(null, $market);
        $baseVolume = $this->safe_string($ticker, 'volume');
        $quoteVolume = $this->safe_string($ticker, 'volume_quote');
        $open = $this->safe_string($ticker, 'open');
        $last = $this->safe_string($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            // $symbol is optional for hitbtc fetchTrades
            $request['symbols'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['from'] = $since;
        }
        $response = yield $this->publicGetPublicTrades (array_merge($request, $params));
        $marketIds = is_array($response) ? array_keys($response) : array();
        $trades = array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->market($marketId);
            $rawTrades = $response[$marketId];
            $parsed = $this->parse_trades($rawTrades, $market);
            $trades = $this->array_concat($trades, $parsed);
        }
        return $trades;
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['from'] = $since;
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchMyTrades', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotHistoryTrade',
            'swap' => 'privateGetFuturesHistoryTrade',
            'margin' => 'privateGetMarginHistoryTrade',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // createOrder ($market)
        //
        //  {
        //      $id => '1569252895',
        //      position_id => '0',
        //      quantity => '10',
        //      price => '0.03919424',
        //      $fee => '0.000979856000',
        //      $timestamp => '2022-01-25T19:38:36.153Z',
        //      $taker => true
        //  }
        //
        // fetchTrades
        //
        //  {
        //      $id => 974786185,
        //      price => '0.032462',
        //      qty => '0.3673',
        //      $side => 'buy',
        //      $timestamp => '2020-10-16T12:57:39.846Z'
        //  }
        //
        // fetchMyTrades spot
        //
        //  {
        //      $id => 277210397,
        //      clientOrderId => '6e102f3e7f3f4e04aeeb1cdc95592f1a',
        //      $orderId => 28102855393,
        //      $symbol => 'ETHBTC',
        //      $side => 'sell',
        //      quantity => '0.002',
        //      price => '0.073365',
        //      $fee => '0.000000147',
        //      $timestamp => '2018-04-28T18:39:55.345Z',
        //      $taker => true
        //  }
        //
        // fetchMyTrades swap and margin
        //
        //  {
        //      "id" => 4718564,
        //      "order_id" => 58730811958,
        //      "client_order_id" => "475c47d97f867f09726186eb22b4c3d4",
        //      "symbol" => "BTCUSDT_PERP",
        //      "side" => "sell",
        //      "quantity" => "0.0001",
        //      "price" => "41118.51",
        //      "fee" => "0.002055925500",
        //      "timestamp" => "2022-03-17T05:23:17.795Z",
        //      "taker" => true,
        //      "position_id" => 2350122,
        //      "pnl" => "0.002255000000",
        //      "liquidation" => false
        //  }
        //
        $timestamp = $this->parse8601($trade['timestamp']);
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $fee = null;
        $feeCostString = $this->safe_string($trade, 'fee');
        $taker = $this->safe_value($trade, 'taker');
        $takerOrMaker = null;
        if ($taker !== null) {
            $takerOrMaker = $taker ? 'taker' : 'maker';
        }
        if ($feeCostString !== null) {
            $info = $this->safe_value($market, 'info', array());
            $feeCurrency = $this->safe_string($info, 'fee_currency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrency);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        // we use clientOrderId as the order $id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here => https://github.com/ccxt/ccxt/issues/5674
        $orderId = $this->safe_string($trade, 'clientOrderId');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string_2($trade, 'quantity', 'qty');
        $side = $this->safe_string($trade, 'side');
        $id = $this->safe_string($trade, 'id');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_transactions_helper($types, $code, $since, $limit, $params) {
        yield $this->load_markets();
        $request = array(
            'types' => $types,
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currencies'] = $currency['id'];
        }
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = yield $this->privateGetWalletTransactions (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "id" => "101609495",
        //         "created_at" => "2018-03-06T22:05:06.507Z",
        //         "updated_at" => "2018-03-06T22:11:45.03Z",
        //         "status" => "SUCCESS",
        //         "type" => "DEPOSIT",
        //         "subtype" => "BLOCKCHAIN",
        //         "native" => {
        //           "tx_id" => "e20b0965-4024-44d0-b63f-7fb8996a6706",
        //           "index" => "881652766",
        //           "currency" => "ETH",
        //           "amount" => "0.01418088",
        //           "hash" => "d95dbbff3f9234114f1211ab0ba2a94f03f394866fd5749d74a1edab80e6c5d3",
        //           "address" => "0xd9259302c32c0a0295d86a39185c9e14f6ba0a0d",
        //           "confirmations" => "20",
        //           "senders" => array(
        //             "0x243bec9256c9a3469da22103891465b47583d9f1"
        //           )
        //         }
        //       }
        //     )
        //
        return $this->parse_transactions($response, $currency, $since, $limit, $params);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'PENDING' => 'pending',
            'FAILED' => 'failed',
            'SUCCESS' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'DEPOSIT' => 'deposit',
            'WITHDRAW' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // $transaction
        //
        //     {
        //       "id" => "101609495",
        //       "created_at" => "2018-03-06T22:05:06.507Z",
        //       "updated_at" => "2018-03-06T22:11:45.03Z",
        //       "status" => "SUCCESS",
        //       "type" => "DEPOSIT", // DEPOSIT, WITHDRAW, ..
        //       "subtype" => "BLOCKCHAIN",
        //       "native" => {
        //         "tx_id" => "e20b0965-4024-44d0-b63f-7fb8996a6706",
        //         "index" => "881652766",
        //         "currency" => "ETH",
        //         "amount" => "0.01418088",
        //         "hash" => "d95dbbff3f9234114f1211ab0ba2a94f03f394866fd5749d74a1edab80e6c5d3",
        //         "address" => "0xd9259302c32c0a0295d86a39185c9e14f6ba0a0d",
        //         "confirmations" => "20",
        //         "senders" => array(
        //           "0x243bec9256c9a3469da22103891465b47583d9f1"
        //         ),
        //         "fee" => "1.22" // only for WITHDRAW
        //       }
        //     }
        //
        // withdraw
        //
        //     {
        //         "id":"084cfcd5-06b9-4826-882e-fdb75ec3625d"
        //     }
        //
        $id = $this->safe_string($transaction, 'id');
        $timestamp = $this->parse8601($this->safe_string($transaction, 'created_at'));
        $updated = $this->parse8601($this->safe_string($transaction, 'updated_at'));
        $type = $this->parse_transaction_type($this->safe_string($transaction, 'type'));
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $native = $this->safe_value($transaction, 'native', array());
        $currencyId = $this->safe_string($native, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $txhash = $this->safe_string($native, 'hash');
        $address = $this->safe_string($native, 'address');
        $addressTo = $address;
        $tag = $this->safe_string($native, 'payment_id');
        $tagTo = $tag;
        $sender = $this->safe_value($native, 'senders');
        $addressFrom = $this->safe_string($sender, 0);
        $amount = $this->safe_number($native, 'amount');
        $fee = null;
        $feeCost = $this->safe_number($native, 'fee');
        if ($feeCost !== null) {
            $fee = array(
                'code' => $code,
                'cost' => $feeCost,
            );
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txhash,
            'code' => $code,
            'amount' => $amount,
            'network' => null,
            'address' => $address,
            'addressFrom' => $addressFrom,
            'addressTo' => $addressTo,
            'tag' => $tag,
            'tagFrom' => null,
            'tagTo' => $tagTo,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'updated' => $updated,
            'status' => $status,
            'type' => $type,
            'fee' => $fee,
        );
    }

    public function fetch_transactions($code = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_transactions_helper('DEPOSIT,WITHDRAW', $code, $since, $limit, $params);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_transactions_helper('DEPOSIT', $code, $since, $limit, $params);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_transactions_helper('WITHDRAW', $code, $since, $limit, $params);
    }

    public function fetch_order_books($symbols = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            $marketIds = $this->market_ids($symbols);
            $request['symbols'] = implode(',', $marketIds);
        }
        if ($limit !== null) {
            $request['depth'] = $limit;
        }
        $response = yield $this->publicGetPublicOrderbook (array_merge($request, $params));
        $result = array();
        $marketIds = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $orderbook = $response[$marketId];
            $symbol = $this->safe_symbol($marketId);
            $timestamp = $this->parse8601($this->safe_string($orderbook, 'timestamp'));
            $result[$symbol] = $this->parse_order_book($response[$marketId], $symbol, $timestamp, 'bid', 'ask');
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by market symbols
         */
        $result = yield $this->fetch_order_books(array( $symbol ), $limit, $params);
        return $result[$symbol];
    }

    public function parse_trading_fee($fee, $market = null) {
        //
        //     {
        //         "symbol":"ARVUSDT", // returned from fetchTradingFees only
        //         "take_rate":"0.0009",
        //         "make_rate":"0.0009"
        //     }
        //
        $taker = $this->safe_number($fee, 'take_rate');
        $maker = $this->safe_number($fee, 'make_rate');
        $marketId = $this->safe_string($fee, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'taker' => $taker,
            'maker' => $maker,
        );
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'privateGetSpotFeeSymbol',
            'swap' => 'privateGetFuturesFeeSymbol',
        ));
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         "take_rate":"0.0009",
        //         "make_rate":"0.0009"
        //     }
        //
        return $this->parse_trading_fee($response, $market);
    }

    public function fetch_trading_fees($symbols = null, $params = array ()) {
        yield $this->load_markets();
        list($marketType, $query) = $this->handle_market_type_and_params('fetchTradingFees', null, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotFee',
            'swap' => 'privateGetFuturesFee',
        ));
        $response = yield $this->$method ($query);
        //
        //     array(
        //         {
        //             "symbol":"ARVUSDT",
        //             "take_rate":"0.0009",
        //             "make_rate":"0.0009"
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $fee = $this->parse_trading_fee($response[$i]);
            $symbol = $fee['symbol'];
            $result[$symbol] = $fee;
        }
        return $result;
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close $price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbols' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $price = $this->safe_string($params, 'price');
        $params = $this->omit($params, 'price');
        $method = 'publicGetPublicCandles';
        if ($price === 'mark') {
            $method = 'publicGetPublicFuturesCandlesMarkPrice';
        } elseif ($price === 'index') {
            $method = 'publicGetPublicFuturesCandlesIndexPrice';
        } elseif ($price === 'premiumIndex') {
            $method = 'publicGetPublicFuturesCandlesPremiumIndex';
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot and Swap
        //
        //     {
        //         "ETHUSDT" => array(
        //             {
        //                 "timestamp" => "2021-10-25T07:38:00.000Z",
        //                 "open" => "4173.391",
        //                 "close" => "4170.923",
        //                 "min" => "4170.923",
        //                 "max" => "4173.986",
        //                 "volume" => "0.1879",
        //                 "volume_quote" => "784.2517846"
        //             }
        //         )
        //     }
        //
        // Mark, Index and Premium Index
        //
        //     {
        //         "BTCUSDT_PERP" => array(
        //             array(
        //                 "timestamp" => "2022-04-01T01:28:00.000Z",
        //                 "open" => "45146.39",
        //                 "close" => "45219.43",
        //                 "min" => "45146.39",
        //                 "max" => "45219.43"
        //             ),
        //         )
        //     }
        //
        $ohlcvs = $this->safe_value($response, $market['id']);
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        // Spot and Swap
        //
        //     {
        //         "timestamp":"2015-08-20T19:01:00.000Z",
        //         "open":"0.006",
        //         "close":"0.006",
        //         "min":"0.006",
        //         "max":"0.006",
        //         "volume":"0.003",
        //         "volume_quote":"0.000018"
        //     }
        //
        // Mark, Index and Premium Index
        //
        //     array(
        //         "timestamp" => "2022-04-01T01:28:00.000Z",
        //         "open" => "45146.39",
        //         "close" => "45219.43",
        //         "min" => "45146.39",
        //         "max" => "45219.43"
        //     ),
        //
        return array(
            $this->parse8601($this->safe_string($ohlcv, 'timestamp')),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'max'),
            $this->safe_number($ohlcv, 'min'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchClosedOrders', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotHistoryOrder',
            'swap' => 'privateGetFuturesHistoryOrder',
            'margin' => 'privateGetMarginHistoryOrder',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        $parsed = $this->parse_orders($response, $market, $since, $limit);
        return $this->filter_by_array($parsed, 'status', array( 'closed', 'canceled' ), false);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotHistoryOrder',
            'swap' => 'privateGetFuturesHistoryOrder',
            'margin' => 'privateGetMarginHistoryOrder',
        ));
        $request = array(
            'client_order_id' => $id,
        );
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     array(
        //       {
        //         "id" => "685965182082",
        //         "client_order_id" => "B3CBm9uGg9oYQlw96bBSEt38-6gbgBO0",
        //         "symbol" => "BTCUSDT",
        //         "side" => "buy",
        //         "status" => "new",
        //         "type" => "limit",
        //         "time_in_force" => "GTC",
        //         "quantity" => "0.00010",
        //         "quantity_cumulative" => "0",
        //         "price" => "50000.00",
        //         "price_average" => "0",
        //         "created_at" => "2021-10-26T11:40:09.287Z",
        //         "updated_at" => "2021-10-26T11:40:09.287Z"
        //       }
        //     )
        //
        $order = $this->safe_value($response, 0);
        return $this->parse_order($order, $market);
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'order_id' => $id, // exchange assigned order $id as oppose to the client order $id
        );
        list($marketType, $query) = $this->handle_market_type_and_params('fetchOrderTrades', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotHistoryTrade',
            'swap' => 'privateGetFuturesHistoryTrade',
            'margin' => 'privateGetMarginHistoryTrade',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        //
        // Spot
        //
        //     array(
        //       {
        //         "id" => 1393448977,
        //         "order_id" => 653496804534,
        //         "client_order_id" => "065f6f0ff9d54547848454182263d7b4",
        //         "symbol" => "DICEETH",
        //         "side" => "buy",
        //         "quantity" => "1.4",
        //         "price" => "0.00261455",
        //         "fee" => "0.000003294333",
        //         "timestamp" => "2021-09-19T05:35:56.601Z",
        //         "taker" => true
        //       }
        //     )
        //
        // Swap and Margin
        //
        //     array(
        //         {
        //             "id" => 4718551,
        //             "order_id" => 58730748700,
        //             "client_order_id" => "dcbcd8549e3445ee922665946002ef67",
        //             "symbol" => "BTCUSDT_PERP",
        //             "side" => "buy",
        //             "quantity" => "0.0001",
        //             "price" => "41095.96",
        //             "fee" => "0.002054798000",
        //             "timestamp" => "2022-03-17T05:23:02.217Z",
        //             "taker" => true,
        //             "position_id" => 2350122,
        //             "pnl" => "0",
        //             "liquidation" => false
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchOpenOrders', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotOrder',
            'swap' => 'privateGetFuturesOrder',
            'margin' => 'privateGetMarginOrder',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     array(
        //       {
        //         "id" => "488953123149",
        //         "client_order_id" => "103ad305301e4c3590045b13de15b36e",
        //         "symbol" => "BTCUSDT",
        //         "side" => "buy",
        //         "status" => "new",
        //         "type" => "limit",
        //         "time_in_force" => "GTC",
        //         "quantity" => "0.00001",
        //         "quantity_cumulative" => "0",
        //         "price" => "0.01",
        //         "post_only" => false,
        //         "created_at" => "2021-04-13T13:06:16.567Z",
        //         "updated_at" => "2021-04-13T13:06:16.567Z"
        //       }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchOpenOrder', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateGetSpotOrderClientOrderId',
            'swap' => 'privateGetFuturesOrderClientOrderId',
            'margin' => 'privateGetMarginOrderClientOrderId',
        ));
        $request = array(
            'client_order_id' => $id,
        );
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        list($marketType, $query) = $this->handle_market_type_and_params('cancelAllOrders', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateDeleteSpotOrder',
            'swap' => 'privateDeleteFuturesOrder',
            'margin' => 'privateDeleteMarginOrder',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_orders($response, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array(
            'client_order_id' => $id,
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($marketType, $query) = $this->handle_market_type_and_params('cancelOrder', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privateDeleteSpotOrderClientOrderId',
            'swap' => 'privateDeleteFuturesOrderClientOrderId',
            'margin' => 'privateDeleteMarginOrderClientOrderId',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array(
            'client_order_id' => $id,
            'quantity' => $this->amount_to_precision($symbol, $amount),
        );
        if (($type === 'limit') || ($type === 'stopLimit')) {
            if ($price === null) {
                throw new ExchangeError($this->id . ' editOrder() limit order requires price');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($marketType, $query) = $this->handle_market_type_and_params('editOrder', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privatePatchSpotOrderClientOrderId',
            'swap' => 'privatePatchFuturesOrderClientOrderId',
            'margin' => 'privatePatchMarginOrderClientOrderId',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'type' => $type,
            'side' => $side,
            'quantity' => $this->amount_to_precision($symbol, $amount),
            'symbol' => $market['id'],
            // 'client_order_id' => 'r42gdPjNMZN-H_xs8RKl2wljg_dfgdg4', // Optional
            // 'time_in_force' => 'GTC', // Optional GTC, IOC, FOK, Day, GTD
            // 'price' => $this->price_to_precision($symbol, $price), // Required if $type is limit, stopLimit, or takeProfitLimit
            // 'stop_price' => $this->safe_number($params, 'stop_price'), // Required if $type is stopLimit, stopMarket, takeProfitLimit, takeProfitMarket
            // 'expire_time' => '2021-06-15T17:01:05.092Z', // Required if $timeInForce is GTD
            // 'strict_validate' => false,
            // 'post_only' => false, // Optional
            // 'reduce_only' => false, // Optional
            // 'display_quantity' => '0', // Optional
            // 'take_rate' => 0.001, // Optional
            // 'make_rate' => 0.001, // Optional
        );
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        if ($reduceOnly !== null) {
            if (($market['type'] !== 'swap') && ($market['type'] !== 'margin')) {
                throw new InvalidOrder($this->id . ' createOrder() does not support reduce_only for ' . $market['type'] . ' orders, reduce_only orders are supported for swap and margin markets only');
            }
        }
        if ($reduceOnly === true) {
            $request['reduce_only'] = $reduceOnly;
        }
        $timeInForce = $this->safe_string_2($params, 'timeInForce', 'time_in_force');
        $expireTime = $this->safe_string($params, 'expire_time');
        $stopPrice = $this->safe_number_2($params, 'stopPrice', 'stop_price');
        if (($type === 'limit') || ($type === 'stopLimit') || ($type === 'takeProfitLimit')) {
            if ($price === null) {
                throw new ExchangeError($this->id . ' createOrder() requires a $price argument for limit orders');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        if (($timeInForce === 'GTD')) {
            if ($expireTime === null) {
                throw new ExchangeError($this->id . ' createOrder() requires an expire_time parameter for a GTD order');
            }
            $request['expire_time'] = $expireTime;
        }
        if (($type === 'stopLimit') || ($type === 'stopMarket') || ($type === 'takeProfitLimit') || ($type === 'takeProfitMarket')) {
            if ($stopPrice === null) {
                throw new ExchangeError($this->id . ' createOrder() requires a $stopPrice parameter for stop-loss and take-profit orders');
            }
            $request['stop_price'] = $this->price_to_precision($symbol, $stopPrice);
        }
        list($marketType, $query) = $this->handle_market_type_and_params('createOrder', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'spot' => 'privatePostSpotOrder',
            'swap' => 'privatePostFuturesOrder',
            'margin' => 'privatePostMarginOrder',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'new' => 'open',
            'suspended' => 'open',
            'partiallyFilled' => 'open',
            'filled' => 'closed',
            'canceled' => 'canceled',
            'expired' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // limit
        //     {
        //       "id" => 488953123149,
        //       "client_order_id" => "103ad305301e4c3590045b13de15b36e",
        //       "symbol" => "BTCUSDT",
        //       "side" => "buy",
        //       "status" => "new",
        //       "type" => "limit",
        //       "time_in_force" => "GTC",
        //       "quantity" => "0.00001",
        //       "quantity_cumulative" => "0",
        //       "price" => "0.01",
        //       "price_average" => "0.01",
        //       "post_only" => false,
        //       "created_at" => "2021-04-13T13:06:16.567Z",
        //       "updated_at" => "2021-04-13T13:06:16.567Z"
        //     }
        //
        // $market
        //     {
        //       "id" => "685877626834",
        //       "client_order_id" => "Yshl7G-EjaREyXQYaGbsmdtVbW-nzQwu",
        //       "symbol" => "BTCUSDT",
        //       "side" => "buy",
        //       "status" => "filled",
        //       "type" => "market",
        //       "time_in_force" => "GTC",
        //       "quantity" => "0.00010",
        //       "quantity_cumulative" => "0.00010",
        //       "post_only" => false,
        //       "created_at" => "2021-10-26T08:55:55.1Z",
        //       "updated_at" => "2021-10-26T08:55:55.1Z",
        //       "trades" => array(
        //         {
        //           "id" => "1437229630",
        //           "position_id" => "0",
        //           "quantity" => "0.00010",
        //           "price" => "62884.78",
        //           "fee" => "0.005659630200",
        //           "timestamp" => "2021-10-26T08:55:55.1Z",
        //           "taker" => true
        //         }
        //       )
        //     }
        //
        // swap and margin
        //
        //     {
        //         "id" => 58418961892,
        //         "client_order_id" => "r42gdPjNMZN-H_xs8RKl2wljg_dfgdg4",
        //         "symbol" => "BTCUSDT_PERP",
        //         "side" => "buy",
        //         "status" => "new",
        //         "type" => "limit",
        //         "time_in_force" => "GTC",
        //         "quantity" => "0.0005",
        //         "quantity_cumulative" => "0",
        //         "price" => "30000.00",
        //         "post_only" => false,
        //         "reduce_only" => false,
        //         "created_at" => "2022-03-16T08:16:53.039Z",
        //         "updated_at" => "2022-03-16T08:16:53.039Z"
        //     }
        //
        $id = $this->safe_string($order, 'client_order_id');
        // we use clientOrderId as the $order $id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here => https://github.com/ccxt/ccxt/issues/5674
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'type');
        $amount = $this->safe_string($order, 'quantity');
        $price = $this->safe_string($order, 'price');
        $average = $this->safe_string($order, 'price_average');
        $created = $this->safe_string($order, 'created_at');
        $timestamp = $this->parse8601($created);
        $updated = $this->safe_string($order, 'updated_at');
        $lastTradeTimestamp = null;
        if ($updated !== $created) {
            $lastTradeTimestamp = $this->parse8601($updated);
        }
        $filled = $this->safe_string($order, 'quantity_cumulative');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $postOnly = $this->safe_value($order, 'post_only');
        $timeInForce = $this->safe_string($order, 'time_in_force');
        $rawTrades = $this->safe_value($order, 'trades');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'price' => $price,
            'amount' => $amount,
            'type' => $type,
            'side' => $side,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'reduceOnly' => $this->safe_value($order, 'reduce_only'),
            'filled' => $filled,
            'remaining' => null,
            'cost' => null,
            'status' => $status,
            'average' => $average,
            'trades' => $rawTrades,
            'fee' => null,
        ), $market);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        // account can be "spot", "wallet", or "derivatives"
        yield $this->load_markets();
        $currency = $this->currency($code);
        $requestAmount = $this->currency_to_precision($code, $amount);
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromAccount = strtolower($fromAccount);
        $toAccount = strtolower($toAccount);
        $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
        $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
        if ($fromId === $toId) {
            throw new BadRequest($this->id . ' $transfer() $fromAccount and $toAccount arguments cannot be the same account');
        }
        $request = array(
            'currency' => $currency['id'],
            'amount' => $requestAmount,
            'source' => $fromId,
            'destination' => $toId,
        );
        $response = yield $this->privatePostWalletTransfer (array_merge($request, $params));
        //
        //     array(
        //         '2db6ebab-fb26-4537-9ef8-1a689472d236'
        //     )
        //
        $transfer = $this->parse_transfer($response, $currency);
        return array_merge($transfer, array(
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'amount' => $this->parse_number($requestAmount),
        ));
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        // $transfer
        //
        //     array(
        //         '2db6ebab-fb26-4537-9ef8-1a689472d236'
        //     )
        //
        $timestamp = $this->milliseconds();
        return array(
            'id' => $this->safe_string($transfer, 0),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $this->safe_currency_code(null, $currency),
            'amount' => null,
            'fromAccount' => null,
            'toAccount' => null,
            'status' => null,
            'info' => $transfer,
        );
    }

    public function convert_currency_network($code, $amount, $fromNetwork, $toNetwork, $params) {
        yield $this->load_markets();
        if ($code !== 'USDT') {
            throw new ExchangeError($this->id . ' convertCurrencyNetwork() only supports USDT currently');
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $fromNetwork = strtoupper($fromNetwork);
        $toNetwork = strtoupper($toNetwork);
        $fromNetwork = $this->safe_string($networks, $fromNetwork); // handle ETH>ERC20 alias
        $toNetwork = $this->safe_string($networks, $toNetwork); // handle ETH>ERC20 alias
        if ($fromNetwork === $toNetwork) {
            throw new BadRequest($this->id . ' convertCurrencyNetwork() $fromNetwork cannot be the same as toNetwork');
        }
        if (($fromNetwork === null) || ($toNetwork === null)) {
            $keys = is_array($networks) ? array_keys($networks) : array();
            throw new ArgumentsRequired($this->id . ' convertCurrencyNetwork() requires a $fromNetwork parameter and a $toNetwork parameter, supported $networks are ' . implode(', ', $keys));
        }
        $request = array(
            'from_currency' => $fromNetwork,
            'to_currency' => $toNetwork,
            'amount' => $this->currency_to_precision($code, $amount),
        );
        $response = yield $this->privatePostWalletConvert (array_merge($request, $params));
        // array("result":["587a1868-e62d-4d8e-b27c-dbdb2ee96149","e168df74-c041-41f2-b76c-e43e4fed5bc7"])
        return array(
            'info' => $response,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        yield $this->load_markets();
        $this->check_address($address);
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address,
        );
        if ($tag !== null) {
            $request['payment_id'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network');
        if (($network !== null) && ($code === 'USDT')) {
            $parsedNetwork = $this->safe_string($networks, $network);
            if ($parsedNetwork !== null) {
                $request['currency'] = $parsedNetwork;
            }
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privatePostWalletCryptoWithdraw (array_merge($request, $params));
        //
        //     {
        //         "id":"084cfcd5-06b9-4826-882e-fdb75ec3625d"
        //     }
        //
        return $this->parse_transaction($response, $currency);
    }

    public function fetch_funding_rate_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical funding rate prices
         * @param {str|null} $symbol unified $symbol of the $market to fetch the funding rate history for
         * @param {int|null} $since timestamp in ms of the earliest funding rate to fetch
         * @param {int|null} $limit the maximum amount of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~ to fetch
         * @param {dict} $params extra parameters specific to the hitbtc3 api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~
         */
        yield $this->load_markets();
        $market = null;
        $request = array(
            // all arguments are optional
            // 'symbols' => Comma separated list of $symbol codes,
            // 'sort' => 'DESC' or 'ASC'
            // 'from' => 'Datetime or Number',
            // 'till' => 'Datetime or Number',
            // 'limit' => 100,
            // 'offset' => 0,
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $symbol = $market['symbol'];
            $request['symbols'] = $market['id'];
        }
        if ($since !== null) {
            $request['from'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = yield $this->publicGetPublicFuturesHistoryFunding (array_merge($request, $params));
        //
        //    {
        //        "BTCUSDT_PERP" => array(
        //            array(
        //                "timestamp" => "2021-07-29T16:00:00.271Z",
        //                "funding_rate" => "0.0001",
        //                "avg_premium_index" => "0.000061858585213222",
        //                "next_funding_time" => "2021-07-30T00:00:00.000Z",
        //                "interest_rate" => "0.0001"
        //            ),
        //            ...
        //        ),
        //        ...
        //    }
        //
        $contracts = is_array($response) ? array_keys($response) : array();
        $rates = array();
        for ($i = 0; $i < count($contracts); $i++) {
            $marketId = $contracts[$i];
            $market = $this->safe_market($marketId);
            $fundingRateData = $response[$marketId];
            for ($i = 0; $i < count($fundingRateData); $i++) {
                $entry = $fundingRateData[$i];
                $symbol = $this->safe_symbol($market['symbol']);
                $fundingRate = $this->safe_number($entry, 'funding_rate');
                $datetime = $this->safe_string($entry, 'timestamp');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $symbol,
                    'fundingRate' => $fundingRate,
                    'timestamp' => $this->parse8601($datetime),
                    'datetime' => $datetime,
                );
            }
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $symbol, $since, $limit);
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        list($marketType, $query) = $this->handle_market_type_and_params('fetchPositions', null, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'swap' => 'privateGetFuturesAccount',
            'margin' => 'privateGetMarginAccount',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     array(
        //         {
        //             "symbol" => "ETHUSDT_PERP",
        //             "type" => "isolated",
        //             "leverage" => "10.00",
        //             "created_at" => "2022-03-19T07:54:35.24Z",
        //             "updated_at" => "2022-03-19T07:54:58.922Z",
        //             currencies" => array(
        //                 {
        //                     "code" => "USDT",
        //                     "margin_balance" => "7.478100643043",
        //                     "reserved_orders" => "0",
        //                     "reserved_positions" => "0.303530761300"
        //                 }
        //             ),
        //             "positions" => array(
        //                 array(
        //                     "id" => 2470568,
        //                     "symbol" => "ETHUSDT_PERP",
        //                     "quantity" => "0.001",
        //                     "price_entry" => "2927.509",
        //                     "price_margin_call" => "0",
        //                     "price_liquidation" => "0",
        //                     "pnl" => "0",
        //                     "created_at" => "2022-03-19T07:54:35.24Z",
        //                     "updated_at" => "2022-03-19T07:54:58.922Z"
        //                 }
        //             )
        //         ),
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $result[] = $this->parse_position($response[$i]);
        }
        return $result;
    }

    public function fetch_position($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        list($marketType, $query) = $this->handle_market_type_and_params('fetchPosition', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'swap' => 'privateGetFuturesAccountIsolatedSymbol',
            'margin' => 'privateGetMarginAccountIsolatedSymbol',
        ));
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     array(
        //         {
        //             "symbol" => "ETHUSDT_PERP",
        //             "type" => "isolated",
        //             "leverage" => "10.00",
        //             "created_at" => "2022-03-19T07:54:35.24Z",
        //             "updated_at" => "2022-03-19T07:54:58.922Z",
        //             currencies" => array(
        //                 {
        //                     "code" => "USDT",
        //                     "margin_balance" => "7.478100643043",
        //                     "reserved_orders" => "0",
        //                     "reserved_positions" => "0.303530761300"
        //                 }
        //             ),
        //             "positions" => array(
        //                 array(
        //                     "id" => 2470568,
        //                     "symbol" => "ETHUSDT_PERP",
        //                     "quantity" => "0.001",
        //                     "price_entry" => "2927.509",
        //                     "price_margin_call" => "0",
        //                     "price_liquidation" => "0",
        //                     "pnl" => "0",
        //                     "created_at" => "2022-03-19T07:54:35.24Z",
        //                     "updated_at" => "2022-03-19T07:54:58.922Z"
        //                 }
        //             )
        //         ),
        //     )
        //
        return $this->parse_position($response, $market);
    }

    public function parse_position($position, $market = null) {
        //
        //     array(
        //         {
        //             "symbol" => "ETHUSDT_PERP",
        //             "type" => "isolated",
        //             "leverage" => "10.00",
        //             "created_at" => "2022-03-19T07:54:35.24Z",
        //             "updated_at" => "2022-03-19T07:54:58.922Z",
        //             $currencies" => array(
        //                 {
        //                     "code" => "USDT",
        //                     "margin_balance" => "7.478100643043",
        //                     "reserved_orders" => "0",
        //                     "reserved_positions" => "0.303530761300"
        //                 }
        //             ),
        //             "positions" => array(
        //                 array(
        //                     "id" => 2470568,
        //                     "symbol" => "ETHUSDT_PERP",
        //                     "quantity" => "0.001",
        //                     "price_entry" => "2927.509",
        //                     "price_margin_call" => "0",
        //                     "price_liquidation" => "0",
        //                     "pnl" => "0",
        //                     "created_at" => "2022-03-19T07:54:35.24Z",
        //                     "updated_at" => "2022-03-19T07:54:58.922Z"
        //                 }
        //             )
        //         ),
        //     )
        //
        $marginMode = $this->safe_string($position, 'type');
        $leverage = $this->safe_number($position, 'leverage');
        $datetime = $this->safe_string($position, 'updated_at');
        $positions = $this->safe_value($position, 'positions', array());
        $liquidationPrice = null;
        $entryPrice = null;
        $contracts = null;
        for ($i = 0; $i < count($positions); $i++) {
            $entry = $positions[$i];
            $liquidationPrice = $this->safe_number($entry, 'price_liquidation');
            $entryPrice = $this->safe_number($entry, 'price_entry');
            $contracts = $this->safe_number($entry, 'quantity');
        }
        $currencies = $this->safe_value($position, 'currencies', array());
        $collateral = null;
        for ($i = 0; $i < count($currencies); $i++) {
            $entry = $currencies[$i];
            $collateral = $this->safe_number($entry, 'margin_balance');
        }
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        return array(
            'info' => $position,
            'symbol' => $symbol,
            'notional' => null,
            'marginMode' => $marginMode,
            'marginType' => $marginMode,
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $entryPrice,
            'unrealizedPnl' => null,
            'percentage' => null,
            'contracts' => $contracts,
            'contractSize' => null,
            'markPrice' => null,
            'side' => null,
            'hedged' => null,
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'maintenanceMargin' => null,
            'maintenanceMarginPercentage' => null,
            'collateral' => $collateral,
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'leverage' => $leverage,
            'marginRatio' => null,
        );
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
        }
        $request = array();
        if ($symbol !== null) {
            $symbol = $market['symbol'];
            $request['symbols'] = $market['id'];
        }
        $response = yield $this->publicGetPublicFuturesInfo (array_merge($request, $params));
        //
        //     {
        //         "BTCUSDT_PERP" => {
        //             "contract_type" => "perpetual",
        //             "mark_price" => "42307.43",
        //             "index_price" => "42303.27",
        //             "funding_rate" => "0.0001",
        //             "open_interest" => "30.9826",
        //             "next_funding_time" => "2022-03-22T16:00:00.000Z",
        //             "indicative_funding_rate" => "0.0001",
        //             "premium_index" => "0",
        //             "avg_premium_index" => "0.000029587712038098",
        //             "interest_rate" => "0.0001",
        //             "timestamp" => "2022-03-22T08:08:26.687Z"
        //         }
        //     }
        //
        $data = $this->safe_value($response, $market['id'], array());
        return $this->parse_funding_rate($data, $market);
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        //     {
        //         "contract_type" => "perpetual",
        //         "mark_price" => "42307.43",
        //         "index_price" => "42303.27",
        //         "funding_rate" => "0.0001",
        //         "open_interest" => "30.9826",
        //         "next_funding_time" => "2022-03-22T16:00:00.000Z",
        //         "indicative_funding_rate" => "0.0001",
        //         "premium_index" => "0",
        //         "avg_premium_index" => "0.000029587712038098",
        //         "interest_rate" => "0.0001",
        //         "timestamp" => "2022-03-22T08:08:26.687Z"
        //     }
        //
        $nextFundingDatetime = $this->safe_string($contract, 'next_funding_time');
        $datetime = $this->safe_string($contract, 'timestamp');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol(null, $market),
            'markPrice' => $this->safe_number($contract, 'mark_price'),
            'indexPrice' => $this->safe_number($contract, 'index_price'),
            'interestRate' => $this->safe_number($contract, 'interest_rate'),
            'estimatedSettlePrice' => null,
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'fundingRate' => $this->safe_number($contract, 'funding_rate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => $this->safe_number($contract, 'indicative_funding_rate'),
            'nextFundingTimestamp' => $this->parse8601($nextFundingDatetime),
            'nextFundingDatetime' => $nextFundingDatetime,
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function modify_margin_helper($symbol, $amount, $type, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $leverage = $this->safe_string($params, 'leverage');
        if ($market['type'] === 'swap') {
            if ($leverage === null) {
                throw new ArgumentsRequired($this->id . ' modifyMarginHelper() requires a $leverage parameter for swap markets');
            }
        }
        $amount = $this->amount_to_precision($symbol, $amount);
        $request = array(
            'symbol' => $market['id'], // swap and margin
            'margin_balance' => $amount, // swap and margin
            // 'leverage' => '10', // swap only required
            // 'strict_validate' => false, // swap and margin
        );
        if ($leverage !== null) {
            $request['leverage'] = $leverage;
        }
        list($marketType, $query) = $this->handle_market_type_and_params('modifyMarginHelper', $market, $params);
        $method = $this->get_supported_mapping($marketType, array(
            'swap' => 'privatePutFuturesAccountIsolatedSymbol',
            'margin' => 'privatePutMarginAccountIsolatedSymbol',
        ));
        $response = yield $this->$method (array_merge($request, $query));
        //
        //     {
        //         "symbol" => "BTCUSDT_PERP",
        //         "type" => "isolated",
        //         "leverage" => "8.00",
        //         "created_at" => "2022-03-30T23:34:27.161Z",
        //         "updated_at" => "2022-03-30T23:34:27.161Z",
        //         "currencies" => array(
        //             {
        //                 "code" => "USDT",
        //                 "margin_balance" => "7.000000000000",
        //                 "reserved_orders" => "0",
        //                 "reserved_positions" => "0"
        //             }
        //         ),
        //         "positions" => null
        //     }
        //
        return array_merge($this->parse_margin_modification($response, $market), array(
            'amount' => $this->safe_number($amount),
            'type' => $type,
        ));
    }

    public function parse_margin_modification($data, $market = null) {
        $currencies = $this->safe_value($data, 'currencies', array());
        $currencyInfo = $this->safe_value($currencies, 0);
        return array(
            'info' => $data,
            'type' => null,
            'amount' => null,
            'code' => $this->safe_string($currencyInfo, 'code'),
            'symbol' => $market['symbol'],
            'status' => null,
        );
    }

    public function reduce_margin($symbol, $amount, $params = array ()) {
        if ($amount !== 0) {
            throw new BadRequest($this->id . ' reduceMargin() on hitbtc3 requires the $amount to be 0 and that will remove the entire margin amount');
        }
        return yield $this->modify_margin_helper($symbol, $amount, 'reduce', $params);
    }

    public function add_margin($symbol, $amount, $params = array ()) {
        return yield $this->modify_margin_helper($symbol, $amount, 'add', $params);
    }

    public function fetch_leverage($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'privateGetMarginAccountIsolatedSymbol',
            'margin' => 'privateGetMarginAccountIsolatedSymbol',
            'swap' => 'privateGetFuturesAccountIsolatedSymbol',
        ));
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "type" => "isolated",
        //         "leverage" => "12.00",
        //         "created_at" => "2022-03-29T22:31:29.067Z",
        //         "updated_at" => "2022-03-30T00:00:00.125Z",
        //         "currencies" => array(
        //             {
        //                 "code" => "USDT",
        //                 "margin_balance" => "20.824360374174",
        //                 "reserved_orders" => "0",
        //                 "reserved_positions" => "0.973330435000"
        //             }
        //         ),
        //         "positions" => array(
        //             {
        //                 "id" => 631301,
        //                 "symbol" => "BTCUSDT",
        //                 "quantity" => "0.00022",
        //                 "price_entry" => "47425.57",
        //                 "price_margin_call" => "",
        //                 "price_liquidation" => "0",
        //                 "pnl" => "0",
        //                 "created_at" => "2022-03-29T22:31:29.067Z",
        //                 "updated_at" => "2022-03-30T00:00:00.125Z"
        //             }
        //         )
        //     }
        //
        return $this->safe_number($response, 'leverage');
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        if ($params['margin_balance'] === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a margin_balance parameter that will transfer margin to the specified trading pair');
        }
        $market = $this->market($symbol);
        $amount = $this->safe_number($params, 'margin_balance');
        $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 50);
        if ($market['type'] !== 'swap') {
            throw new BadSymbol($this->id . ' setLeverage() supports swap contracts only');
        }
        if (($leverage < 1) || ($leverage > $maxLeverage)) {
            throw new BadRequest($this->id . ' setLeverage() $leverage should be between 1 and ' . (string) $maxLeverage . ' for ' . $symbol);
        }
        $request = array(
            'symbol' => $market['id'],
            'leverage' => (string) $leverage,
            'margin_balance' => $this->amount_to_precision($symbol, $amount),
            // 'strict_validate' => false,
        );
        return yield $this->privatePutFuturesAccountIsolatedSymbol (array_merge($request, $params));
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        //
        //     {
        //       "error" => {
        //         "code" => 20001,
        //         "message" => "Insufficient funds",
        //         "description" => "Check that the funds are sufficient, given commissions"
        //       }
        //     }
        //
        //     {
        //       "error" => {
        //         "code" => "600",
        //         "message" => "Action not allowed"
        //       }
        //     }
        //
        $error = $this->safe_value($response, 'error');
        $errorCode = $this->safe_string($error, 'code');
        if ($errorCode !== null) {
            $feedback = $this->id . ' ' . $body;
            $message = $this->safe_string_2($error, 'message', 'description');
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $implodedPath = $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . '/' . $implodedPath;
        $getRequest = null;
        $keys = is_array($query) ? array_keys($query) : array();
        $queryLength = is_array($keys) ? count($keys) : 0;
        $headers = array(
            'Content-Type' => 'application/json',
        );
        if ($method === 'GET') {
            if ($queryLength) {
                $getRequest = '?' . $this->urlencode($query);
                $url = $url . $getRequest;
            }
        } else {
            $body = $this->json($params);
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = (string) $this->nonce();
            $payload = array( $method, '/api/3/' . $implodedPath );
            if ($method === 'GET') {
                if ($getRequest !== null) {
                    $payload[] = $getRequest;
                }
            } else {
                $payload[] = $body;
            }
            $payload[] = $timestamp;
            $payloadString = implode('', $payload);
            $signature = $this->hmac($this->encode($payloadString), $this->encode($this->secret), 'sha256', 'hex');
            $secondPayload = $this->apiKey . ':' . $signature . ':' . $timestamp;
            $encoded = $this->decode(base64_encode($secondPayload));
            $headers['Authorization'] = 'HS256 ' . $encoded;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
