<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\BadSymbol;
use \ccxt\InvalidOrder;
use \ccxt\Precise;

class coinex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'coinex',
            'name' => 'CoinEx',
            'version' => 'v1',
            'countries' => array( 'CN' ),
            'rateLimit' => 50, // Normal limit frequency is single IPï¼š200 times / 10 seconds
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => null, // has but unimplemented
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createDepositAddress' => true,
                'createOrder' => true,
                'createReduceOnlyOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowRate' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddressByNetwork' => false,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => true,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPosition' => true,
                'fetchPositions' => true,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactionFee:' => false,
                'fetchTransactoinFees' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => true,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1min',
                '3m' => '3min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '1hour',
                '2h' => '2hour',
                '4h' => '4hour',
                '6h' => '6hour',
                '12h' => '12hour',
                '1d' => '1day',
                '3d' => '3day',
                '1w' => '1week',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',
                'api' => array(
                    'public' => 'https://api.coinex.com',
                    'private' => 'https://api.coinex.com',
                    'perpetualPublic' => 'https://api.coinex.com/perpetual',
                    'perpetualPrivate' => 'https://api.coinex.com/perpetual',
                ),
                'www' => 'https://www.coinex.com',
                'doc' => 'https://github.com/coinexcom/coinex_exchange_api/wiki',
                'fees' => 'https://www.coinex.com/fees',
                'referral' => 'https://www.coinex.com/register?refer_code=yw5fz',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'amm/market' => 1,
                        'common/currency/rate' => 1,
                        'common/asset/config' => 1,
                        'common/maintain/info' => 1,
                        'common/temp-maintain/info' => 1,
                        'margin/market' => 1,
                        'market/info' => 1,
                        'market/list' => 1,
                        'market/ticker' => 1,
                        'market/ticker/all' => 1,
                        'market/depth' => 1,
                        'market/deals' => 1,
                        'market/kline' => 1,
                        'market/detail' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/amm/balance' => 1,
                        'account/investment/balance' => 1,
                        'account/balance/history' => 1,
                        'account/market/fee' => 1,
                        'balance/coin/deposit' => 1,
                        'balance/coin/withdraw' => 1,
                        'balance/info' => 1,
                        'balance/deposit/address/{coin_type}' => 1,
                        'contract/transfer/history' => 1,
                        'credit/info' => 1,
                        'credit/balance' => 1,
                        'investment/transfer/history' => 1,
                        'margin/account' => 1,
                        'margin/config' => 1,
                        'margin/loan/history' => 1,
                        'margin/transfer/history' => 1,
                        'order/deals' => 1,
                        'order/finished' => 1,
                        'order/pending' => 1,
                        'order/status' => 1,
                        'order/status/batch' => 1,
                        'order/user/deals' => 1,
                        'order/stop/finished' => 1,
                        'order/stop/pending' => 1,
                        'order/user/trade/fee' => 1,
                        'order/market/trade/info' => 1,
                        'sub_account/balance' => 1,
                        'sub_account/transfer/history' => 1,
                        'sub_account/auth/api/{user_auth_id}' => 1,
                    ),
                    'post' => array(
                        'balance/coin/withdraw' => 1,
                        'contract/balance/transfer' => 1,
                        'margin/flat' => 1,
                        'margin/loan' => 1,
                        'margin/transfer' => 1,
                        'order/limit/batch' => 1,
                        'order/ioc' => 1,
                        'order/limit' => 1,
                        'order/market' => 1,
                        'order/stop/limit' => 1,
                        'order/stop/market' => 1,
                        'sub_account/transfer' => 1,
                        'sub_account/register' => 1,
                        'sub_account/unfrozen' => 1,
                        'sub_account/frozen' => 1,
                        'sub_account/auth/api' => 1,
                    ),
                    'put' => array(
                        'balance/deposit/address/{coin_type}' => 1,
                        'sub_account/auth/api/{user_auth_id}' => 1,
                        'v1/account/settings' => 1,
                    ),
                    'delete' => array(
                        'balance/coin/withdraw' => 1,
                        'order/pending/batch' => 1,
                        'order/pending' => 1,
                        'order/stop/pending' => 1,
                        'order/stop/pending/{id}' => 1,
                        'sub_account/auth/api/{user_auth_id}' => 1,
                    ),
                ),
                'perpetualPublic' => array(
                    'get' => array(
                        'ping' => 1,
                        'time' => 1,
                        'market/list' => 1,
                        'market/limit_config' => 1,
                        'market/ticker' => 1,
                        'market/ticker/all' => 1,
                        'market/depth' => 1,
                        'market/deals' => 1,
                        'market/funding_history' => 1,
                        'market/user_deals' => 1,
                        'market/kline' => 1,
                    ),
                ),
                'perpetualPrivate' => array(
                    'get' => array(
                        'asset/query' => 1,
                        'order/pending' => 1,
                        'order/finished' => 1,
                        'order/stop_pending' => 1,
                        'order/status' => 1,
                        'order/stop_status' => 1,
                        'position/pending' => 1,
                        'position/funding' => 1,
                    ),
                    'post' => array(
                        'market/adjust_leverage' => 1,
                        'market/position_expect' => 1,
                        'order/put_limit' => 1,
                        'order/put_market' => 1,
                        'order/put_stop_limit' => 1,
                        'order/put_stop_market' => 1,
                        'order/cancel' => 1,
                        'order/cancel_all' => 1,
                        'order/cancel_stop' => 1,
                        'order/cancel_stop_all' => 1,
                        'order/close_limit' => 1,
                        'order/close_market' => 1,
                        'position/adjust_margin' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => 0.001,
                    'taker' => 0.001,
                ),
                'funding' => array(
                    'withdraw' => array(
                        'BCH' => 0.0,
                        'BTC' => 0.001,
                        'LTC' => 0.001,
                        'ETH' => 0.001,
                        'ZEC' => 0.0001,
                        'DASH' => 0.0001,
                    ),
                ),
            ),
            'limits' => array(
                'amount' => array(
                    'min' => 0.001,
                    'max' => null,
                ),
            ),
            'precision' => array(
                'amount' => 8,
                'price' => 8,
            ),
            'options' => array(
                'createMarketBuyOrderRequiresPrice' => true,
                'defaultType' => 'spot', // spot, swap, margin
                'defaultSubType' => 'linear', // linear, inverse
                'defaultMarginMode' => 'isolated', // isolated, cross
                'fetchDepositAddress' => array(
                    'fillResponseFromRequest' => true,
                ),
                'accountsById' => array(
                    'spot' => '0',
                ),
            ),
            'commonCurrencies' => array(
                'ACM' => 'Actinium',
            ),
        ));
    }

    public function fetch_currencies($params = array ()) {
        $response = yield $this->publicGetCommonAssetConfig ($params);
        //
        //     {
        //         $code => 0,
        //         $data => {
        //           'CET-CSC' => array(
        //               asset => 'CET',
        //               chain => 'CSC',
        //               withdrawal_precision => 8,
        //               can_deposit => true,
        //               can_withdraw => true,
        //               deposit_least_amount => '0.026',
        //               withdraw_least_amount => '20',
        //               withdraw_tx_fee => '0.026'
        //           ),
        //           ...
        //           message => 'Success',
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $coins = is_array($data) ? array_keys($data) : array();
        $result = array();
        for ($i = 0; $i < count($coins); $i++) {
            $coin = $coins[$i];
            $currency = $data[$coin];
            $currencyId = $this->safe_string($currency, 'asset');
            $networkId = $this->safe_string($currency, 'chain');
            $code = $this->safe_currency_code($currencyId);
            if ($this->safe_value($result, $code) === null) {
                $result[$code] = array(
                    'id' => $currencyId,
                    'numericId' => null,
                    'code' => $code,
                    'info' => $currency,
                    'name' => null,
                    'active' => true,
                    'deposit' => $this->safe_value($currency, 'can_deposit'),
                    'withdraw' => $this->safe_value($currency, 'can_withdraw'),
                    'fee' => $this->safe_number($currency, 'withdraw_tx_fee'),
                    'precision' => $this->safe_number($currency, 'withdrawal_precision'),
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'deposit' => array(
                            'min' => $this->safe_number($currency, 'deposit_least_amount'),
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'withdraw_least_amount'),
                            'max' => null,
                        ),
                    ),
                );
            }
            $networks = $this->safe_value($result[$code], 'networks', array());
            $network = array(
                'info' => $currency,
                'id' => $networkId,
                'network' => $networkId,
                'name' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => $this->safe_number($currency, 'deposit_least_amount'),
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->safe_number($currency, 'withdraw_least_amount'),
                        'max' => null,
                    ),
                ),
                'active' => true,
                'deposit' => $this->safe_value($currency, 'can_deposit'),
                'withdraw' => $this->safe_value($currency, 'can_withdraw'),
                'fee' => $this->safe_number($currency, 'withdraw_tx_fee'),
                'precision' => $this->safe_number($currency, 'withdrawal_precision'),
            );
            $networks[$networkId] = $network;
            $result[$code]['networks'] = $networks;
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for coinex
         * @param {dict} $params extra parameters specific to the exchange api endpoint
         * @return {[dict]} an array of objects representing market data
         */
        $result = array();
        list($type, $query) = $this->handle_market_type_and_params('fetchMarkets', null, $params);
        if ($type === 'spot' || $type === 'margin') {
            $result = yield $this->fetch_spot_markets($query);
        } elseif ($type === 'swap') {
            $result = yield $this->fetch_contract_markets($query);
        } else {
            throw new ExchangeError($this->id . " does not support the '" . $type . "' market $type, set exchange.options['defaultType'] to 'spot', 'margin' or 'swap'");
        }
        return $result;
    }

    public function fetch_spot_markets($params) {
        $response = yield $this->publicGetMarketInfo ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "WAVESBTC" => {
        //                 "name" => "WAVESBTC",
        //                 "min_amount" => "1",
        //                 "maker_fee_rate" => "0.001",
        //                 "taker_fee_rate" => "0.001",
        //                 "pricing_name" => "BTC",
        //                 "pricing_decimal" => 8,
        //                 "trading_name" => "WAVES",
        //                 "trading_decimal" => 8
        //             }
        //         }
        //     }
        //
        $markets = $this->safe_value($response, 'data', array());
        $result = array();
        $keys = is_array($markets) ? array_keys($markets) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $key = $keys[$i];
            $market = $markets[$key];
            $id = $this->safe_string($market, 'name');
            $tradingName = $this->safe_string($market, 'trading_name');
            $baseId = $tradingName;
            $quoteId = $this->safe_string($market, 'pricing_name');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            if ($tradingName === $id) {
                $symbol = $id;
            }
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => null,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => null,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => $this->safe_number($market, 'taker_fee_rate'),
                'maker' => $this->safe_number($market, 'maker_fee_rate'),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_integer($market, 'trading_decimal'),
                    'price' => $this->safe_integer($market, 'pricing_decimal'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'min_amount'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_contract_markets($params) {
        $response = yield $this->perpetualPublicGetMarketList ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => [
        //             array(
        //                 "name" => "BTCUSD",
        //                 "type" => 2, // 1 => USDT-M Contracts, 2 => Coin-M Contracts
        //                 "leverages" => ["3", "5", "8", "10", "15", "20", "30", "50", "100"],
        //                 "stock" => "BTC",
        //                 "money" => "USD",
        //                 "fee_prec" => 5,
        //                 "stock_prec" => 8,
        //                 "money_prec" => 1,
        //                 "amount_prec" => 0,
        //                 "amount_min" => "10",
        //                 "multiplier" => "1",
        //                 "tick_size" => "0.1", // Min. Price Increment
        //                 "available" => true
        //             ),
        //         ],
        //         "message" => "OK"
        //     }
        //
        $markets = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $entry = $markets[$i];
            $fees = $this->fees;
            $leverages = $this->safe_value($entry, 'leverages', array());
            $subType = $this->safe_integer($entry, 'type');
            $linear = ($subType === 1) ? true : false;
            $inverse = ($subType === 2) ? true : false;
            $id = $this->safe_string($entry, 'name');
            $baseId = $this->safe_string($entry, 'stock');
            $quoteId = $this->safe_string($entry, 'money');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $settleId = ($subType === 1) ? 'USDT' : $baseId;
            $settle = $this->safe_currency_code($settleId);
            $symbol = $base . '/' . $quote . ':' . $settle;
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => 'swap',
                'spot' => false,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'active' => $this->safe_value($entry, 'available'),
                'contract' => true,
                'linear' => $linear,
                'inverse' => $inverse,
                'taker' => $fees['trading']['taker'],
                'maker' => $fees['trading']['maker'],
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_integer($entry, 'stock_prec'),
                    'price' => $this->safe_integer($entry, 'money_prec'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => $this->safe_string($leverages, 0),
                        'max' => $this->safe_string($leverages, strlen($leverages) - 1),
                    ),
                    'amount' => array(
                        'min' => $this->safe_string($entry, 'amount_min'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $entry,
            );
        }
        return $result;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // Spot fetchTicker, fetchTickers
        //
        //     {
        //         "vol" => "293.19415130",
        //         "low" => "38200.00",
        //         "open" => "39514.99",
        //         "high" => "39530.00",
        //         "last" => "38649.57",
        //         "buy" => "38640.20",
        //         "buy_amount" => "0.22800000",
        //         "sell" => "38640.21",
        //         "sell_amount" => "0.02828439"
        //     }
        //
        // Swap fetchTicker, fetchTickers
        //
        //     {
        //         "vol" => "7714.2175",
        //         "low" => "38200.00",
        //         "open" => "39569.23",
        //         "high" => "39569.23",
        //         "last" => "38681.37",
        //         "buy" => "38681.36",
        //         "period" => 86400,
        //         "funding_time" => 462,
        //         "position_amount" => "296.7552",
        //         "funding_rate_last" => "0.00009395",
        //         "funding_rate_next" => "0.00000649",
        //         "funding_rate_predict" => "-0.00007176",
        //         "insurance" => "16464465.09431942163278132918",
        //         "sign_price" => "38681.93",
        //         "index_price" => "38681.69500000",
        //         "sell_total" => "16.6039",
        //         "buy_total" => "19.8481",
        //         "buy_amount" => "4.6315",
        //         "sell" => "38681.37",
        //         "sell_amount" => "11.4044"
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'date');
        $symbol = $this->safe_symbol(null, $market);
        $ticker = $this->safe_value($ticker, 'ticker', array());
        $last = $this->safe_string($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'buy'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'sell'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_string_2($ticker, 'vol', 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {str} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {dict} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        $method = $market['swap'] ? 'perpetualPublicGetMarketTicker' : 'publicGetMarketTicker';
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "date" => 1651306913414,
        //             "ticker" => array(
        //                 "vol" => "293.19415130",
        //                 "low" => "38200.00",
        //                 "open" => "39514.99",
        //                 "high" => "39530.00",
        //                 "last" => "38649.57",
        //                 "buy" => "38640.20",
        //                 "buy_amount" => "0.22800000",
        //                 "sell" => "38640.21",
        //                 "sell_amount" => "0.02828439"
        //             }
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "date" => 1651306641500,
        //             "ticker" => array(
        //                 "vol" => "7714.2175",
        //                 "low" => "38200.00",
        //                 "open" => "39569.23",
        //                 "high" => "39569.23",
        //                 "last" => "38681.37",
        //                 "buy" => "38681.36",
        //                 "period" => 86400,
        //                 "funding_time" => 462,
        //                 "position_amount" => "296.7552",
        //                 "funding_rate_last" => "0.00009395",
        //                 "funding_rate_next" => "0.00000649",
        //                 "funding_rate_predict" => "-0.00007176",
        //                 "insurance" => "16464465.09431942163278132918",
        //                 "sign_price" => "38681.93",
        //                 "index_price" => "38681.69500000",
        //                 "sell_total" => "16.6039",
        //                 "buy_total" => "19.8481",
        //                 "buy_amount" => "4.6315",
        //                 "sell" => "38681.37",
        //                 "sell_amount" => "11.4044"
        //             }
        //         ),
        //         "message" => "OK"
        //     }
        //
        return $this->parse_ticker($response['data'], $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price $tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each $market
         * @param {[str]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {dict} an array of {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structures}
         */
        yield $this->load_markets();
        list($marketType, $query) = $this->handle_market_type_and_params('fetchTickers', null, $params);
        $method = ($marketType === 'swap') ? 'perpetualPublicGetMarketTickerAll' : 'publicGetMarketTickerAll';
        $response = yield $this->$method ($query);
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "date" => 1651519857284,
        //             "ticker" => array(
        //                 "PSPUSDT" => array(
        //                     "vol" => "127131.55227034",
        //                     "low" => "0.0669",
        //                     "open" => "0.0688",
        //                     "high" => "0.0747",
        //                     "last" => "0.0685",
        //                     "buy" => "0.0676",
        //                     "buy_amount" => "702.70117866",
        //                     "sell" => "0.0690",
        //                     "sell_amount" => "686.76861562"
        //                 ),
        //             }
        //         ),
        //         "message" => "Ok"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "date" => 1651520268644,
        //             "ticker" => array(
        //                 "KAVAUSDT" => array(
        //                     "vol" => "834924",
        //                     "low" => "3.9418",
        //                     "open" => "4.1834",
        //                     "high" => "4.4328",
        //                     "last" => "4.0516",
        //                     "buy" => "4.0443",
        //                     "period" => 86400,
        //                     "funding_time" => 262,
        //                     "position_amount" => "16111",
        //                     "funding_rate_last" => "-0.00069514",
        //                     "funding_rate_next" => "-0.00061009",
        //                     "funding_rate_predict" => "-0.00055812",
        //                     "insurance" => "16532425.53026084124483989548",
        //                     "sign_price" => "4.0516",
        //                     "index_price" => "4.0530",
        //                     "sell_total" => "59446",
        //                     "buy_total" => "62423",
        //                     "buy_amount" => "959",
        //                     "sell" => "4.0466",
        //                     "sell_amount" => "141"
        //                 ),
        //             }
        //         ),
        //         "message" => "Ok"
        //     }
        //
        $data = $this->safe_value($response, 'data');
        $timestamp = $this->safe_integer($data, 'date');
        $tickers = $this->safe_value($data, 'ticker', array());
        $marketIds = is_array($tickers) ? array_keys($tickers) : array();
        $result = array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->safe_market($marketId);
            $symbol = $market['symbol'];
            $ticker = $this->parse_ticker(array(
                'date' => $timestamp,
                'ticker' => $tickers[$marketId],
            ), $market);
            $ticker['symbol'] = $symbol;
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = yield $this->perpetualPublicGetTime ($params);
        //
        //     {
        //         code => '0',
        //         data => '1653261274414',
        //         message => 'OK'
        //     }
        //
        return $this->safe_number($response, 'data');
    }

    public function fetch_order_book($symbol, $limit = 20, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {str} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {dict} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderBook() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        if ($limit === null) {
            $limit = 20; // default
        }
        $request = array(
            'market' => $this->market_id($symbol),
            'merge' => '0',
            'limit' => (string) $limit,
        );
        $method = $market['swap'] ? 'perpetualPublicGetMarketDepth' : 'publicGetMarketDepth';
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "asks" => [
        //                 ["41056.33", "0.31727613"],
        //                 ["41056.34", "1.05657294"],
        //                 ["41056.35", "0.02346648"]
        //             ],
        //             "bids" => [
        //                 ["41050.61", "0.40618608"],
        //                 ["41046.98", "0.13800000"],
        //                 ["41046.56", "0.22579234"]
        //             ],
        //             "last" => "41050.61",
        //             "time" => 1650573220346
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "asks" => [
        //                 ["40620.90", "0.0384"],
        //                 ["40625.50", "0.0219"],
        //                 ["40625.90", "0.3506"]
        //             ],
        //             "bids" => [
        //                 ["40620.89", "19.6861"],
        //                 ["40620.80", "0.0012"],
        //                 ["40619.87", "0.0365"]
        //             ],
        //             "last" => "40620.89",
        //             "time" => 1650587672406,
        //             "sign_price" => "40619.32",
        //             "index_price" => "40609.93"
        //         ),
        //         "message" => "OK"
        //     }
        //
        $result = $this->safe_value($response, 'data', array());
        $timestamp = $this->safe_integer($result, 'time');
        return $this->parse_order_book($result, $symbol, $timestamp);
    }

    public function parse_trade($trade, $market = null) {
        //
        // Spot and Swap fetchTrades (public)
        //
        //      array(
        //          "id" =>  2611511379,
        //          "type" => "buy",
        //          "price" => "192.63",
        //          "amount" => "0.02266931",
        //          "date" =>  1638990110,
        //          "date_ms" =>  1638990110518
        //      ),
        //
        // Spot and Margin fetchMyTrades (private)
        //
        //      {
        //          "id" => 2611520950,
        //          "order_id" => 63286573298,
        //          "account_id" => 0,
        //          "create_time" => 1638990636,
        //          "type" => "sell",
        //          "role" => "taker",
        //          "price" => "192.29",
        //          "amount" => "0.098",
        //          "fee" => "0.03768884",
        //          "fee_asset" => "USDT",
        //          "market" => "AAVEUSDT",
        //          "deal_money" => "18.84442"
        //      }
        //
        // Swap fetchMyTrades (private)
        //
        //     {
        //         "amount" => "0.0012",
        //         "deal_fee" => "0.0237528",
        //         "deal_insurance" => "0",
        //         "deal_margin" => "15.8352",
        //         "deal_order_id" => 17797031903,
        //         "deal_profit" => "0",
        //         "deal_stock" => "47.5056",
        //         "deal_type" => 1,
        //         "deal_user_id" => 2969195,
        //         "fee_asset" => "",
        //         "fee_discount" => "0",
        //         "fee_price" => "0",
        //         "fee_rate" => "0.0005",
        //         "fee_real_rate" => "0.0005",
        //         "id" => 379044296,
        //         "leverage" => "3",
        //         "margin_amount" => "15.8352",
        //         "market" => "BTCUSDT",
        //         "open_price" => "39588",
        //         "order_id" => 17797092987,
        //         "position_amount" => "0.0012",
        //         "position_id" => 62052321,
        //         "position_type" => 1,
        //         "price" => "39588",
        //         "role" => 2,
        //         "side" => 2,
        //         "time" => 1650675936.016103,
        //         "user_id" => 3620173
        //     }
        //
        $timestamp = $this->safe_timestamp_2($trade, 'create_time', 'time');
        if ($timestamp === null) {
            $timestamp = $this->safe_integer($trade, 'date_ms');
        }
        $tradeId = $this->safe_string($trade, 'id');
        $orderId = $this->safe_string($trade, 'order_id');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $marketId = $this->safe_string($trade, 'market');
        $symbol = $this->safe_symbol($marketId, $market);
        $costString = $this->safe_string($trade, 'deal_money');
        $fee = null;
        $feeCostString = $this->safe_string_2($trade, 'fee', 'deal_fee');
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fee_asset');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        $takerOrMaker = $this->safe_string($trade, 'role');
        if ($takerOrMaker === '1') {
            $takerOrMaker = 'maker';
        } elseif ($takerOrMaker === '2') {
            $takerOrMaker = 'taker';
        }
        $side = null;
        if ($market['type'] === 'swap') {
            $side = $this->safe_integer($trade, 'side');
            if ($side === 1) {
                $side = 'sell';
            } elseif ($side === 2) {
                $side = 'buy';
            }
            if ($side === null) {
                $side = $this->safe_string($trade, 'type');
            }
        } else {
            $side = $this->safe_string($trade, 'type');
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $tradeId,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent trades for a particular $symbol
         * @param {str} $symbol unified $symbol of the $market to fetch trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of trades to fetch
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            // 'last_id' => 0,
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $method = $market['swap'] ? 'perpetualPublicGetMarketDeals' : 'publicGetMarketDeals';
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot and Swap
        //
        //      {
        //          "code" =>    0,
        //          "data" => array(
        //              array(
        //                  "id" =>  2611511379,
        //                  "type" => "buy",
        //                  "price" => "192.63",
        //                  "amount" => "0.02266931",
        //                  "date" =>  1638990110,
        //                  "date_ms" =>  1638990110518
        //                  ),
        //              ),
        //          "message" => "OK"
        //      }
        //
        return $this->parse_trades($response['data'], $market, $since, $limit);
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        $response = yield $this->publicGetMarketDetail (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //           "name" => "BTCUSDC",
        //           "min_amount" => "0.0005",
        //           "maker_fee_rate" => "0.002",
        //           "taker_fee_rate" => "0.002",
        //           "pricing_name" => "USDC",
        //           "pricing_decimal" => 2,
        //           "trading_name" => "BTC",
        //           "trading_decimal" => 8
        //         ),
        //         "message" => "OK"
        //      }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trading_fee($data);
    }

    public function fetch_trading_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->publicGetMarketInfo ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "WAVESBTC" => {
        //                 "name" => "WAVESBTC",
        //                 "min_amount" => "1",
        //                 "maker_fee_rate" => "0.001",
        //                 "taker_fee_rate" => "0.001",
        //                 "pricing_name" => "BTC",
        //                 "pricing_decimal" => 8,
        //                 "trading_name" => "WAVES",
        //                 "trading_decimal" => 8
        //             }
        //             ...
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $market = $this->market($symbol);
            $fee = $this->safe_value($data, $market['id'], array());
            $result[$symbol] = $this->parse_trading_fee($fee, $market);
        }
        return $result;
    }

    public function parse_trading_fee($fee, $market = null) {
        $marketId = $this->safe_value($fee, 'name');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'maker_fee_rate'),
            'taker' => $this->safe_number($fee, 'taker_fee_rate'),
            'percentage' => true,
            'tierBased' => true,
        );
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         1591484400,
        //         "0.02505349",
        //         "0.02506988",
        //         "0.02507000",
        //         "0.02505304",
        //         "343.19716223",
        //         "8.6021323866383196",
        //         "ETHBTC"
        //     )
        //
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '5m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @param {str} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {str} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'type' => $this->timeframes[$timeframe],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $method = $market['swap'] ? 'perpetualPublicGetMarketKline' : 'publicGetMarketKline';
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => [
        //             [1591484400, "0.02505349", "0.02506988", "0.02507000", "0.02505304", "343.19716223", "8.6021323866383196", "ETHBTC"],
        //             [1591484700, "0.02506990", "0.02508109", "0.02508109", "0.02506979", "91.59841581", "2.2972047780447000", "ETHBTC"],
        //             [1591485000, "0.02508106", "0.02507996", "0.02508106", "0.02507500", "65.15307697", "1.6340597822306000", "ETHBTC"],
        //         ],
        //         "message" => "OK"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => [
        //             [1650569400, "41524.64", "41489.31", "41564.61", "41480.58", "29.7060", "1233907.099562"],
        //             [1650569700, "41489.31", "41438.29", "41489.31", "41391.87", "42.4115", "1756154.189061"],
        //             [1650570000, "41438.29", "41482.21", "41485.05", "41427.31", "22.2892", "924000.317861"]
        //         ],
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function fetch_margin_balance($params = array ()) {
        yield $this->load_markets();
        $symbol = $this->safe_string($params, 'symbol');
        $marketId = $this->safe_string($params, 'market');
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $marketId = $market['id'];
        } elseif ($marketId === null) {
            throw new ArgumentsRequired($this->id . ' fetchMarginBalance() fetching a margin account requires a $market parameter or a $symbol parameter');
        }
        $params = $this->omit($params, array( 'symbol', 'market' ));
        $request = array(
            'market' => $marketId,
        );
        $response = yield $this->privateGetMarginAccount (array_merge($request, $params));
        //
        //      {
        //          "code" =>    0,
        //           "data" => array(
        //              "account_id" =>    126,
        //              "leverage" =>    3,
        //              "market_type" =>   "AAVEUSDT",
        //              "sell_asset_type" =>   "AAVE",
        //              "buy_asset_type" =>   "USDT",
        //              "balance" => array(
        //                  "sell_type" => "0.3",     // borrowed
        //                  "buy_type" => "30"
        //                  ),
        //              "frozen" => array(
        //                  "sell_type" => "0",
        //                  "buy_type" => "0"
        //                  ),
        //              "loan" => array(
        //                  "sell_type" => "0.3", // loan
        //                  "buy_type" => "0"
        //                  ),
        //              "interest" => array(
        //                  "sell_type" => "0.0000125",
        //                  "buy_type" => "0"
        //                  ),
        //              "can_transfer" => array(
        //                  "sell_type" => "0.02500646",
        //                  "buy_type" => "4.28635738"
        //                  ),
        //              "warn_rate" =>   "",
        //              "liquidation_price" =>   ""
        //              ),
        //          "message" => "Success"
        //      }
        //
        $result = array( 'info' => $response );
        $data = $this->safe_value($response, 'data', array());
        $free = $this->safe_value($data, 'can_transfer', array());
        $total = $this->safe_value($data, 'balance', array());
        //
        $sellAccount = $this->account();
        $sellCurrencyId = $this->safe_string($data, 'sell_asset_type');
        $sellCurrencyCode = $this->safe_currency_code($sellCurrencyId);
        $sellAccount['free'] = $this->safe_string($free, 'sell_type');
        $sellAccount['total'] = $this->safe_string($total, 'sell_type');
        $result[$sellCurrencyCode] = $sellAccount;
        //
        $buyAccount = $this->account();
        $buyCurrencyId = $this->safe_string($data, 'buy_asset_type');
        $buyCurrencyCode = $this->safe_currency_code($buyCurrencyId);
        $buyAccount['free'] = $this->safe_string($free, 'buy_type');
        $buyAccount['total'] = $this->safe_string($total, 'buy_type');
        $result[$buyCurrencyCode] = $buyAccount;
        //
        return $this->safe_balance($result);
    }

    public function fetch_spot_balance($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateGetBalanceInfo ($params);
        //
        //     {
        //       "code" => 0,
        //       "data" => {
        //         "BCH" => array(                     # BCH $account
        //           "available" => "13.60109",   # Available BCH
        //           "frozen" => "0.00000"        # Frozen BCH
        //         ),
        //         "BTC" => array(                     # BTC $account
        //           "available" => "32590.16",   # Available BTC
        //           "frozen" => "7000.00"        # Frozen BTC
        //         ),
        //         "ETH" => array(                     # ETH $account
        //           "available" => "5.06000",    # Available ETH
        //           "frozen" => "0.00000"        # Frozen ETH
        //         }
        //       ),
        //       "message" => "Ok"
        //     }
        //
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'data', array());
        $currencyIds = is_array($balances) ? array_keys($balances) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $code = $this->safe_currency_code($currencyId);
            $balance = $this->safe_value($balances, $currencyId, array());
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'frozen');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_swap_balance($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->perpetualPrivateGetAssetQuery ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "USDT" => array(
        //                 "available" => "37.24817690383456000000",
        //                 "balance_total" => "37.24817690383456000000",
        //                 "frozen" => "0.00000000000000000000",
        //                 "margin" => "0.00000000000000000000",
        //                 "profit_unreal" => "0.00000000000000000000",
        //                 "transfer" => "37.24817690383456000000"
        //             }
        //         ),
        //         "message" => "OK"
        //     }
        //
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'data', array());
        $currencyIds = is_array($balances) ? array_keys($balances) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $code = $this->safe_currency_code($currencyId);
            $balance = $this->safe_value($balances, $currencyId, array());
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'frozen');
            $account['total'] = $this->safe_string($balance, 'balance_total');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {dict} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $accountType = $this->safe_string($params, 'type', 'main');
        $params = $this->omit($params, 'type');
        if ($accountType === 'margin') {
            return yield $this->fetch_margin_balance($params);
        } elseif ($accountType === 'swap') {
            return yield $this->fetch_swap_balance($params);
        } else {
            return yield $this->fetch_spot_balance($params);
        }
    }

    public function parse_order_status($status) {
        $statuses = array(
            'not_deal' => 'open',
            'part_deal' => 'open',
            'done' => 'closed',
            'cancel' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // fetchOrder
        //
        //     {
        //         "amount" => "0.1",
        //         "asset_fee" => "0.22736197736197736197",
        //         "avg_price" => "196.85000000000000000000",
        //         "create_time" => 1537270135,
        //         "deal_amount" => "0.1",
        //         "deal_fee" => "0",
        //         "deal_money" => "19.685",
        //         "fee_asset" => "CET",
        //         "fee_discount" => "0.5",
        //         "id" => 1788259447,
        //         "left" => "0",
        //         "maker_fee_rate" => "0",
        //         "market" => "ETHUSDT",
        //         "order_type" => "limit",
        //         "price" => "170.00000000",
        //         "status" => "done",
        //         "taker_fee_rate" => "0.0005",
        //         "type" => "sell",
        //     }
        //
        // Spot and Margin createOrder, cancelOrder, fetchOrder
        //
        //      {
        //          "amount":"1.5",
        //          "asset_fee":"0",
        //          "avg_price":"0.14208538",
        //          "client_id":"",
        //          "create_time":1650993819,
        //          "deal_amount":"10.55703267",
        //          "deal_fee":"0.0029999999971787292",
        //          "deal_money":"1.4999999985893646",
        //          "fee_asset":null,
        //          "fee_discount":"1",
        //          "finished_time":null,
        //          "id":74556296907,
        //          "left":"0.0000000014106354",
        //          "maker_fee_rate":"0",
        //          "market":"DOGEUSDT",
        //          "money_fee":"0.0029999999971787292",
        //          "order_type":"market",
        //          "price":"0",
        //          "status":"done",
        //          "stock_fee":"0",
        //          "taker_fee_rate":"0.002",
        //          "type":"buy"
        //      }
        //
        // Swap createOrder, cancelOrder, fetchOrder
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651004578.618224,
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "deal_fee" => "0.00000000000000000000",
        //         "deal_profit" => "0.00000000000000000000",
        //         "deal_stock" => "0.00000000000000000000",
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "last_deal_amount" => "0.00000000000000000000",
        //         "last_deal_id" => 0,
        //         "last_deal_price" => "0.00000000000000000000",
        //         "last_deal_role" => 0,
        //         "last_deal_time" => 0,
        //         "last_deal_type" => 0,
        //         "left" => "0.0005",
        //         "leverage" => "3",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18221659097,
        //         "position_id" => 0,
        //         "position_type" => 1,
        //         "price" => "30000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "stop_id" => 0,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651004578.618224,
        //         "user_id" => 3620173
        //     }
        //
        // Stop $order createOrder
        //
        //     array("status":"success")
        //
        // Swap Stop cancelOrder, fetchOrder
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651034023.008771,
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18256915101,
        //         "price" => "31000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "state" => 1,
        //         "stop_price" => "31500.00",
        //         "stop_type" => 1,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651034397.193624,
        //         "user_id" => 3620173
        //     }
        //
        //
        // Spot fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "account_id" => 0,
        //         "amount" => "0.0005",
        //         "asset_fee" => "0",
        //         "avg_price" => "0.00",
        //         "client_id" => "",
        //         "create_time" => 1651089247,
        //         "deal_amount" => "0",
        //         "deal_fee" => "0",
        //         "deal_money" => "0",
        //         "fee_asset" => null,
        //         "fee_discount" => "1",
        //         "finished_time" => 0,
        //         "id" => 74660190839,
        //         "left" => "0.0005",
        //         "maker_fee_rate" => "0.002",
        //         "market" => "BTCUSDT",
        //         "money_fee" => "0",
        //         "order_type" => "limit",
        //         "price" => "31000",
        //         "status" => "not_deal",
        //         "stock_fee" => "0",
        //         "taker_fee_rate" => "0.002",
        //         "type" => "buy"
        //     }
        //
        // Swap fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651030414.088431,
        //         "deal_asset_fee" => "0",
        //         "deal_fee" => "0.00960069",
        //         "deal_profit" => "0.009825",
        //         "deal_stock" => "19.20138",
        //         "effect_type" => 0,
        //         "fee_asset" => "",
        //         "fee_discount" => "0",
        //         "left" => "0",
        //         "leverage" => "3",
        //         "maker_fee" => "0",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18253447431,
        //         "position_id" => 0,
        //         "position_type" => 1,
        //         "price" => "0",
        //         "side" => 1,
        //         "source" => "web",
        //         "stop_id" => 0,
        //         "taker_fee" => "0.0005",
        //         "target" => 0,
        //         "type" => 2,
        //         "update_time" => 1651030414.08847,
        //         "user_id" => 3620173
        //     }
        //
        // Spot Stop fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "account_id" => 0,
        //         "amount" => "155",
        //         "client_id" => "",
        //         "create_time" => 1651089182,
        //         "fee_asset" => null,
        //         "fee_discount" => "1",
        //         "maker_fee" => "0.002",
        //         "market" => "BTCUSDT",
        //         "order_id" => 74660111965,
        //         "order_type" => "market",
        //         "price" => "0",
        //         "state" => 0,
        //         "stop_price" => "31500",
        //         "taker_fee" => "0.002",
        //         "type" => "buy"
        //     }
        //
        // Swap Stop fetchOpenOrders
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651089147.321691,
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18332143848,
        //         "price" => "31000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "state" => 1,
        //         "stop_price" => "31500.00",
        //         "stop_type" => 1,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651089147.321691,
        //         "user_id" => 3620173
        //     }
        //
        $timestamp = $this->safe_timestamp($order, 'create_time');
        $priceString = $this->safe_string($order, 'price');
        $costString = $this->safe_string($order, 'deal_money');
        $amountString = $this->safe_string($order, 'amount');
        $filledString = $this->safe_string($order, 'deal_amount');
        $averageString = $this->safe_string($order, 'avg_price');
        $remainingString = $this->safe_string($order, 'left');
        $marketId = $this->safe_string($order, 'market');
        $market = $this->safe_market($marketId, $market);
        $feeCurrencyId = $this->safe_string($order, 'fee_asset');
        $feeCurrency = $this->safe_currency_code($feeCurrencyId);
        if ($feeCurrency === null) {
            $feeCurrency = $market['quote'];
        }
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $side = $this->safe_integer($order, 'side');
        if ($side === 1) {
            $side = 'sell';
        } elseif ($side === 2) {
            $side = 'buy';
        } else {
            $side = $this->safe_string($order, 'type');
        }
        $type = $this->safe_string($order, 'order_type');
        if ($type === null) {
            $type = $this->safe_integer($order, 'type');
            if ($type === 1) {
                $type = 'limit';
            } elseif ($type === 2) {
                $type = 'market';
            }
        }
        return $this->safe_order(array(
            'id' => $this->safe_string_2($order, 'id', 'order_id'),
            'clientOrderId' => null,
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => $this->safe_timestamp($order, 'update_time'),
            'status' => $status,
            'symbol' => $market['symbol'],
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'reduceOnly' => null,
            'side' => $side,
            'price' => $priceString,
            'stopPrice' => $this->safe_string($order, 'stop_price'),
            'cost' => $costString,
            'average' => $averageString,
            'amount' => $amountString,
            'filled' => $filledString,
            'remaining' => $remainingString,
            'trades' => null,
            'fee' => array(
                'currency' => $feeCurrency,
                'cost' => $this->safe_string($order, 'deal_fee'),
            ),
            'info' => $order,
        ), $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $swap = $market['swap'];
        $stopPrice = $this->safe_string_2($params, 'stopPrice', 'stop_price');
        $postOnly = $this->safe_value($params, 'postOnly', false);
        $positionId = $this->safe_integer_2($params, 'position_id', 'positionId'); // Required for closing $swap positions
        $timeInForce = $this->safe_string($params, 'timeInForce'); // Spot => IOC, FOK, PO, GTC, ... NORMAL (default), MAKER_ONLY
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        if ($reduceOnly !== null) {
            if ($market['type'] !== 'swap') {
                throw new InvalidOrder($this->id . ' createOrder() does not support $reduceOnly for ' . $market['type'] . ' orders, $reduceOnly orders are supported for $swap markets only');
            }
        }
        $method = null;
        $request = array(
            'market' => $market['id'],
        );
        if ($swap) {
            $method = 'perpetualPrivatePostOrderPut' . $this->capitalize($type);
            $side = ($side === 'buy') ? 2 : 1;
            if ($stopPrice !== null) {
                $stopType = $this->safe_integer($params, 'stop_type'); // 1 => triggered by the latest transaction, 2 => mark $price, 3 => index $price
                if ($stopType === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() $swap stop orders require a stop_type parameter');
                }
                $request['stop_price'] = $this->price_to_precision($symbol, $stopPrice);
                $request['stop_type'] = $this->price_to_precision($symbol, $stopType);
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
                $request['side'] = $side;
                if ($type === 'limit') {
                    $method = 'perpetualPrivatePostOrderPutStopLimit';
                    $request['price'] = $this->price_to_precision($symbol, $price);
                } elseif ($type === 'market') {
                    $method = 'perpetualPrivatePostOrderPutStopMarket';
                }
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if (($type !== 'market') || ($stopPrice !== null)) {
                if (($timeInForce !== null) || ($postOnly !== null)) {
                    $isMakerOrder = false;
                    if (($timeInForce === 'PO') || ($postOnly)) {
                        $isMakerOrder = true;
                    }
                    if ($isMakerOrder) {
                        $request['option'] = 1;
                    } else {
                        if ($timeInForce === 'IOC') {
                            $timeInForce = 2;
                        } elseif ($timeInForce === 'FOK') {
                            $timeInForce = 3;
                        } else {
                            $timeInForce = 1;
                        }
                        if ($timeInForce !== null) {
                            $request['effect_type'] = $timeInForce; // exchange takes 'IOC' and 'FOK'
                        }
                    }
                }
            }
            if ($type === 'limit' && $stopPrice === null) {
                if ($reduceOnly) {
                    $method = 'perpetualPrivatePostOrderCloseLimit';
                    $request['position_id'] = $positionId;
                } else {
                    $request['side'] = $side;
                }
                $request['price'] = $this->price_to_precision($symbol, $price);
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            } elseif ($type === 'market' && $stopPrice === null) {
                if ($reduceOnly) {
                    $method = 'perpetualPrivatePostOrderCloseMarket';
                    $request['position_id'] = $positionId;
                } else {
                    $request['side'] = $side;
                    $request['amount'] = $this->amount_to_precision($symbol, $amount);
                }
            }
        } else {
            $method = 'privatePostOrder' . $this->capitalize($type);
            $request['type'] = $side;
            if (($type === 'market') && ($side === 'buy')) {
                if ($this->options['createMarketBuyOrderRequiresPrice']) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . " createOrder() requires the $price argument with $market buy orders to calculate total order cost ($amount to spend), where cost = $amount * $price-> Supply a $price argument to createOrder() call if you want the cost to be calculated for you from $price and $amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the $amount argument (the exchange-specific behaviour)");
                    } else {
                        $amountString = $this->amount_to_precision($symbol, $amount);
                        $priceString = $this->price_to_precision($symbol, $price);
                        $costString = Precise::string_mul($amountString, $priceString);
                        $costNumber = $this->parse_number($costString);
                        $request['amount'] = $this->cost_to_precision($symbol, $costNumber);
                    }
                } else {
                    $request['amount'] = $this->cost_to_precision($symbol, $amount);
                }
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if (($type === 'limit') || ($type === 'ioc')) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            if ($stopPrice !== null) {
                $request['stop_price'] = $this->price_to_precision($symbol, $stopPrice);
                if ($type === 'limit') {
                    $method = 'privatePostOrderStopLimit';
                } elseif ($type === 'market') {
                    $method = 'privatePostOrderStopMarket';
                }
            }
            if (($type !== 'market') || ($stopPrice !== null)) {
                // following options cannot be applied to vanilla $market orders (but can be applied to stop-$market orders)
                if (($timeInForce !== null) || ($postOnly !== null)) {
                    $isMakerOrder = false;
                    if (($timeInForce === 'PO') || ($postOnly)) {
                        $isMakerOrder = true;
                    }
                    if (($isMakerOrder || ($timeInForce !== 'IOC')) && (($type === 'limit') && ($stopPrice !== null))) {
                        throw new InvalidOrder($this->id . ' createOrder() only supports the IOC option for stop-limit orders');
                    }
                    if ($isMakerOrder) {
                        $request['option'] = 'MAKER_ONLY';
                    } else {
                        if ($timeInForce !== null) {
                            $request['option'] = $timeInForce; // exchange takes 'IOC' and 'FOK'
                        }
                    }
                }
            }
        }
        $accountId = $this->safe_integer($params, 'account_id');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        if ($defaultType === 'margin') {
            if ($accountId === null) {
                throw new BadRequest($this->id . ' createOrder() requires an account_id parameter for margin orders');
            }
            $request['account_id'] = $accountId;
        }
        $params = $this->omit($params, array( 'account_id', 'reduceOnly', 'position_id', 'positionId', 'timeInForce', 'postOnly', 'stopPrice', 'stop_price', 'stop_type' ));
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot and Margin
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "asset_fee" => "0",
        //             "avg_price" => "0.00",
        //             "client_id" => "",
        //             "create_time" => 1650951627,
        //             "deal_amount" => "0",
        //             "deal_fee" => "0",
        //             "deal_money" => "0",
        //             "fee_asset" => null,
        //             "fee_discount" => "1",
        //             "finished_time" => null,
        //             "id" => 74510932594,
        //             "left" => "0.0005",
        //             "maker_fee_rate" => "0.002",
        //             "market" => "BTCUSDT",
        //             "money_fee" => "0",
        //             "order_type" => "limit",
        //             "price" => "30000",
        //             "status" => "not_deal",
        //             "stock_fee" => "0",
        //             "taker_fee_rate" => "0.002",
        //             "type" => "buy"
        //         ),
        //         "message" => "Success"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "client_id" => "",
        //             "create_time" => 1651004578.618224,
        //             "deal_asset_fee" => "0.00000000000000000000",
        //             "deal_fee" => "0.00000000000000000000",
        //             "deal_profit" => "0.00000000000000000000",
        //             "deal_stock" => "0.00000000000000000000",
        //             "effect_type" => 1,
        //             "fee_asset" => "",
        //             "fee_discount" => "0.00000000000000000000",
        //             "last_deal_amount" => "0.00000000000000000000",
        //             "last_deal_id" => 0,
        //             "last_deal_price" => "0.00000000000000000000",
        //             "last_deal_role" => 0,
        //             "last_deal_time" => 0,
        //             "last_deal_type" => 0,
        //             "left" => "0.0005",
        //             "leverage" => "3",
        //             "maker_fee" => "0.00030",
        //             "market" => "BTCUSDT",
        //             "order_id" => 18221659097,
        //             "position_id" => 0,
        //             "position_type" => 1,
        //             "price" => "30000.00",
        //             "side" => 2,
        //             "source" => "api.v1",
        //             "stop_id" => 0,
        //             "taker_fee" => "0.00050",
        //             "target" => 0,
        //             "type" => 1,
        //             "update_time" => 1651004578.618224,
        //             "user_id" => 3620173
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Stop Order
        //
        //     array("code":0,"data":array("status":"success"),"message":"OK")
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_order($data, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $stop = $this->safe_value($params, 'stop');
        $swap = $market['swap'];
        $request = array(
            'market' => $market['id'],
        );
        $idRequest = $swap ? 'order_id' : 'id';
        $request[$idRequest] = $id;
        $method = $swap ? 'perpetualPrivatePostOrderCancel' : 'privateDeleteOrderPending';
        if ($stop) {
            if ($swap) {
                $method = 'perpetualPrivatePostOrderCancelStop';
            } else {
                $method = 'privateDeleteOrderStopPendingId';
            }
        }
        $accountId = $this->safe_integer($params, 'account_id');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        if ($defaultType === 'margin') {
            if ($accountId === null) {
                throw new BadRequest($this->id . ' cancelOrder() requires an account_id parameter for margin orders');
            }
            $request['account_id'] = $accountId;
        }
        $query = $this->omit($params, array( 'stop', 'account_id' ));
        $response = yield $this->$method (array_merge($request, $query));
        //
        // Spot and Margin
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "asset_fee" => "0",
        //             "avg_price" => "0.00",
        //             "client_id" => "",
        //             "create_time" => 1650951627,
        //             "deal_amount" => "0",
        //             "deal_fee" => "0",
        //             "deal_money" => "0",
        //             "fee_asset" => null,
        //             "fee_discount" => "1",
        //             "finished_time" => null,
        //             "id" => 74510932594,
        //             "left" => "0.0005",
        //             "maker_fee_rate" => "0.002",
        //             "market" => "BTCUSDT",
        //             "money_fee" => "0",
        //             "order_type" => "limit",
        //             "price" => "30000",
        //             "status" => "not_deal",
        //             "stock_fee" => "0",
        //             "taker_fee_rate" => "0.002",
        //             "type" => "buy"
        //         ),
        //         "message" => "Success"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "client_id" => "",
        //             "create_time" => 1651004578.618224,
        //             "deal_asset_fee" => "0.00000000000000000000",
        //             "deal_fee" => "0.00000000000000000000",
        //             "deal_profit" => "0.00000000000000000000",
        //             "deal_stock" => "0.00000000000000000000",
        //             "effect_type" => 1,
        //             "fee_asset" => "",
        //             "fee_discount" => "0.00000000000000000000",
        //             "last_deal_amount" => "0.00000000000000000000",
        //             "last_deal_id" => 0,
        //             "last_deal_price" => "0.00000000000000000000",
        //             "last_deal_role" => 0,
        //             "last_deal_time" => 0,
        //             "last_deal_type" => 0,
        //             "left" => "0.0005",
        //             "leverage" => "3",
        //             "maker_fee" => "0.00030",
        //             "market" => "BTCUSDT",
        //             "order_id" => 18221659097,
        //             "position_id" => 0,
        //             "position_type" => 1,
        //             "price" => "30000.00",
        //             "side" => 2,
        //             "source" => "api.v1",
        //             "stop_id" => 0,
        //             "taker_fee" => "0.00050",
        //             "target" => 0,
        //             "type" => 1,
        //             "update_time" => 1651004578.618224,
        //             "user_id" => 3620173
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Swap Stop
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "client_id" => "",
        //             "create_time" => 1651034023.008771,
        //             "effect_type" => 1,
        //             "fee_asset" => "",
        //             "fee_discount" => "0.00000000000000000000",
        //             "maker_fee" => "0.00030",
        //             "market" => "BTCUSDT",
        //             "order_id" => 18256915101,
        //             "price" => "31000.00",
        //             "side" => 2,
        //             "source" => "api.v1",
        //             "state" => 1,
        //             "stop_price" => "31500.00",
        //             "stop_type" => 1,
        //             "taker_fee" => "0.00050",
        //             "target" => 0,
        //             "type" => 1,
        //             "update_time" => 1651034397.193624,
        //             "user_id" => 3620173
        //         ),
        //         "message":"OK"
        //     }
        //
        // Spot and Margin Stop
        //
        //     array("code":0,"data":array(),"message":"Success")
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_order($data, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancellAllOrders() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $accountId = $this->safe_integer($params, 'account_id', 0);
        $request = array(
            'market' => $marketId,
            // 'account_id' => $accountId, // SPOT, main account ID => 0, margin account ID => See < Inquire Margin Account Market Info >, future account ID => See < Inquire Future Account Market Info >
            // 'side' => 0, // SWAP, 0 => All, 1 => Sell, 2 => Buy
        );
        $swap = $market['swap'];
        $stop = $this->safe_value($params, 'stop');
        $method = null;
        if ($swap) {
            $method = 'perpetualPrivatePostOrderCancelAll';
            if ($stop) {
                $method = 'perpetualPrivatePostOrderCancelStopAll';
            }
        } else {
            $method = 'privateDeleteOrderPending';
            if ($stop) {
                $method = 'privateDeleteOrderStopPending';
            }
            $request['account_id'] = $accountId;
        }
        $params = $this->omit($params, array( 'stop', 'account_id' ));
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot and Margin
        //
        //     array("code" => 0, "data" => null, "message" => "Success")
        //
        // Swap
        //
        //     array("code" => 0, "data" => array("status":"success"), "message" => "OK")
        //
        return $response;
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $swap = $market['swap'];
        $stop = $this->safe_value($params, 'stop');
        $request = array(
            'market' => $market['id'],
            // 'id' => $id, // SPOT
            // 'order_id' => $id, // SWAP
        );
        $idRequest = $swap ? 'order_id' : 'id';
        $request[$idRequest] = $id;
        $method = null;
        if ($swap) {
            $method = $stop ? 'perpetualPrivateGetOrderStopStatus' : 'perpetualPrivateGetOrderStatus';
        } else {
            $method = 'privateGetOrderStatus';
        }
        $params = $this->omit($params, 'stop');
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.1",
        //             "asset_fee" => "0.22736197736197736197",
        //             "avg_price" => "196.85000000000000000000",
        //             "create_time" => 1537270135,
        //             "deal_amount" => "0.1",
        //             "deal_fee" => "0",
        //             "deal_money" => "19.685",
        //             "fee_asset" => "CET",
        //             "fee_discount" => "0.5",
        //             "id" => 1788259447,
        //             "left" => "0",
        //             "maker_fee_rate" => "0",
        //             "market" => "ETHUSDT",
        //             "order_type" => "limit",
        //             "price" => "170.00000000",
        //             "status" => "done",
        //             "taker_fee_rate" => "0.0005",
        //             "type" => "sell",
        //         ),
        //         "message" => "Ok"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "client_id" => "",
        //             "create_time" => 1651004578.618224,
        //             "deal_asset_fee" => "0.00000000000000000000",
        //             "deal_fee" => "0.00000000000000000000",
        //             "deal_profit" => "0.00000000000000000000",
        //             "deal_stock" => "0.00000000000000000000",
        //             "effect_type" => 1,
        //             "fee_asset" => "",
        //             "fee_discount" => "0.00000000000000000000",
        //             "last_deal_amount" => "0.00000000000000000000",
        //             "last_deal_id" => 0,
        //             "last_deal_price" => "0.00000000000000000000",
        //             "last_deal_role" => 0,
        //             "last_deal_time" => 0,
        //             "last_deal_type" => 0,
        //             "left" => "0.0005",
        //             "leverage" => "3",
        //             "maker_fee" => "0.00030",
        //             "market" => "BTCUSDT",
        //             "order_id" => 18221659097,
        //             "position_id" => 0,
        //             "position_type" => 1,
        //             "price" => "30000.00",
        //             "side" => 2,
        //             "source" => "api.v1",
        //             "stop_id" => 0,
        //             "taker_fee" => "0.00050",
        //             "target" => 0,
        //             "type" => 1,
        //             "update_time" => 1651004578.618224,
        //             "user_id" => 3620173
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Swap Stop
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "amount" => "0.0005",
        //             "client_id" => "",
        //             "create_time" => 1651034023.008771,
        //             "effect_type" => 1,
        //             "fee_asset" => "",
        //             "fee_discount" => "0.00000000000000000000",
        //             "maker_fee" => "0.00030",
        //             "market" => "BTCUSDT",
        //             "order_id" => 18256915101,
        //             "price" => "31000.00",
        //             "side" => 2,
        //             "source" => "api.v1",
        //             "state" => 1,
        //             "stop_price" => "31500.00",
        //             "stop_type" => 1,
        //             "taker_fee" => "0.00050",
        //             "target" => 0,
        //             "type" => 1,
        //             "update_time" => 1651034397.193624,
        //             "user_id" => 3620173
        //         ),
        //         "message":"OK"
        //     }
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_order($data, $market);
    }

    public function fetch_orders_by_status($status, $symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $limit = ($limit === null) ? 100 : $limit;
        $request = array(
            'limit' => $limit,
            // 'page' => 1, // SPOT
            // 'offset' => 0, // SWAP
            // 'side' => 0, // SWAP, 0 => All, 1 => Sell, 2 => Buy
        );
        $stop = $this->safe_value($params, 'stop');
        $side = $this->safe_integer($params, 'side');
        $params = $this->omit($params, 'stop');
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['market'] = $market['id'];
        }
        list($marketType, $query) = $this->handle_market_type_and_params('fetchOrdersByStatus', $market, $params);
        $method = null;
        if ($marketType === 'swap') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrdersByStatus() requires a $symbol argument for swap markets');
            }
            $method = 'perpetualPrivateGetOrder' . $this->capitalize($status);
            if ($stop) {
                $method = 'perpetualPrivateGetOrderStopPending';
            }
            if ($side !== null) {
                $request['side'] = $side;
            } else {
                $request['side'] = 0;
            }
            $request['offset'] = 0;
        } else {
            $method = 'privateGetOrder' . $this->capitalize($status);
            if ($stop) {
                $method = 'privateGetOrderStop' . $this->capitalize($status);
            }
            $request['page'] = 1;
        }
        $response = yield $this->$method (array_merge($request, $query));
        //
        // Spot
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "count" => 1,
        //             "curr_page" => 1,
        //             "data" => array(
        //                 array(
        //                     "account_id" => 0,
        //                     "amount" => "0.0005",
        //                     "asset_fee" => "0",
        //                     "avg_price" => "0.00",
        //                     "client_id" => "",
        //                     "create_time" => 1651089247,
        //                     "deal_amount" => "0",
        //                     "deal_fee" => "0",
        //                     "deal_money" => "0",
        //                     "fee_asset" => null,
        //                     "fee_discount" => "1",
        //                     "finished_time" => 0,
        //                     "id" => 74660190839,
        //                     "left" => "0.0005",
        //                     "maker_fee_rate" => "0.002",
        //                     "market" => "BTCUSDT",
        //                     "money_fee" => "0",
        //                     "order_type" => "limit",
        //                     "price" => "31000",
        //                     "status" => "not_deal",
        //                     "stock_fee" => "0",
        //                     "taker_fee_rate" => "0.002",
        //                     "type" => "buy"
        //                 }
        //             ),
        //             "has_next" => false,
        //             "total" => 1
        //         ),
        //         "message" => "Success"
        //     }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "limit" => 100,
        //             "offset" => 0,
        //             "records" => array(
        //                 array(
        //                     "amount" => "0.0005",
        //                     "client_id" => "",
        //                     "create_time" => 1651030414.088431,
        //                     "deal_asset_fee" => "0",
        //                     "deal_fee" => "0.00960069",
        //                     "deal_profit" => "0.009825",
        //                     "deal_stock" => "19.20138",
        //                     "effect_type" => 0,
        //                     "fee_asset" => "",
        //                     "fee_discount" => "0",
        //                     "left" => "0",
        //                     "leverage" => "3",
        //                     "maker_fee" => "0",
        //                     "market" => "BTCUSDT",
        //                     "order_id" => 18253447431,
        //                     "position_id" => 0,
        //                     "position_type" => 1,
        //                     "price" => "0",
        //                     "side" => 1,
        //                     "source" => "web",
        //                     "stop_id" => 0,
        //                     "taker_fee" => "0.0005",
        //                     "target" => 0,
        //                     "type" => 2,
        //                     "update_time" => 1651030414.08847,
        //                     "user_id" => 3620173
        //                 ),
        //             )
        //         ),
        //         "message" => "OK"
        //     }
        //
        // Spot Stop
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "count" => 1,
        //             "curr_page" => 1,
        //             "data" => array(
        //                 array(
        //                     "account_id" => 0,
        //                     "amount" => "155",
        //                     "client_id" => "",
        //                     "create_time" => 1651089182,
        //                     "fee_asset" => null,
        //                     "fee_discount" => "1",
        //                     "maker_fee" => "0.002",
        //                     "market" => "BTCUSDT",
        //                     "order_id" => 74660111965,
        //                     "order_type" => "market",
        //                     "price" => "0",
        //                     "state" => 0,
        //                     "stop_price" => "31500",
        //                     "taker_fee" => "0.002",
        //                     "type" => "buy"
        //                 }
        //             ),
        //             "has_next" => false,
        //             "total" => 0
        //         ),
        //         "message" => "Success"
        //     }
        //
        // Swap Stop
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "limit" => 100,
        //             "offset" => 0,
        //             "records" => array(
        //                 array(
        //                     "amount" => "0.0005",
        //                     "client_id" => "",
        //                     "create_time" => 1651089147.321691,
        //                     "effect_type" => 1,
        //                     "fee_asset" => "",
        //                     "fee_discount" => "0.00000000000000000000",
        //                     "maker_fee" => "0.00030",
        //                     "market" => "BTCUSDT",
        //                     "order_id" => 18332143848,
        //                     "price" => "31000.00",
        //                     "side" => 2,
        //                     "source" => "api.v1",
        //                     "state" => 1,
        //                     "stop_price" => "31500.00",
        //                     "stop_type" => 1,
        //                     "taker_fee" => "0.00050",
        //                     "target" => 0,
        //                     "type" => 1,
        //                     "update_time" => 1651089147.321691,
        //                     "user_id" => 3620173
        //                 }
        //             ),
        //             "total" => 1
        //         ),
        //         "message" => "OK"
        //     }
        //
        $tradeRequest = ($marketType === 'swap') ? 'records' : 'data';
        $data = $this->safe_value($response, 'data');
        $orders = $this->safe_value($data, $tradeRequest, array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_orders_by_status('pending', $symbol, $since, $limit, $params);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_orders_by_status('finished', $symbol, $since, $limit, $params);
    }

    public function create_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin_type' => $currency['id'],
        );
        if (is_array($params) && array_key_exists('network', $params)) {
            $network = $this->safe_string($params, 'network');
            $params = $this->omit($params, 'network');
            $request['smart_contract_name'] = $network;
        }
        $response = yield $this->privatePutBalanceDepositAddressCoinType (array_merge($request, $params));
        //
        //     {
        //         $code => 0,
        //         $data => array(
        //             coin_address => 'TV639dSpb9iGRtoFYkCp4AoaaDYKrK1pw5',
        //             is_bitcoin_cash => false
        //         ),
        //         message => 'Success'
        //     }
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_deposit_address($data, $currency);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin_type' => $currency['id'],
        );
        $networks = $this->safe_value($currency, 'networks', array());
        $network = $this->safe_string($params, 'network');
        $params = $this->omit($params, 'network');
        $networksKeys = is_array($networks) ? array_keys($networks) : array();
        $numOfNetworks = is_array($networksKeys) ? count($networksKeys) : 0;
        if ($networks !== null && $numOfNetworks > 1) {
            if ($network === null) {
                throw new ArgumentsRequired($this->id . ' fetchDepositAddress() ' . $code . ' requires a $network parameter');
            }
            if (!(is_array($networks) && array_key_exists($network, $networks))) {
                throw new ExchangeError($this->id . ' fetchDepositAddress() ' . $network . ' $network not supported for ' . $code);
            }
        }
        if ($network !== null) {
            $request['smart_contract_name'] = $network;
        }
        $response = yield $this->privateGetBalanceDepositAddressCoinType (array_merge($request, $params));
        //
        //      {
        //          $code => 0,
        //          $data => array(
        //            coin_address => '1P1JqozxioQwaqPwgMAQdNDYNyaVSqgARq',
        //            is_bitcoin_cash => false
        //          ),
        //          message => 'Success'
        //      }
        //
        $data = $this->safe_value($response, 'data', array());
        $depositAddress = $this->parse_deposit_address($data, $currency);
        $options = $this->safe_value($this->options, 'fetchDepositAddress', array());
        $fillResponseFromRequest = $this->safe_value($options, 'fillResponseFromRequest', true);
        if ($fillResponseFromRequest) {
            $depositAddress['network'] = $this->safe_network_code($network, $currency);
        }
        return $depositAddress;
    }

    public function safe_network($networkId, $currency = null) {
        $networks = $this->safe_value($currency, 'networks', array());
        $networksCodes = is_array($networks) ? array_keys($networks) : array();
        if ($networkId === null && strlen($networksCodes) === 1) {
            return $networks[$networksCodes[0]];
        }
        return array(
            'id' => $networkId,
            'network' => ($networkId === null) ? null : strtoupper($networkId),
        );
    }

    public function safe_network_code($networkId, $currency = null) {
        $network = $this->safe_network($networkId, $currency);
        return $network['network'];
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        //
        //     {
        //         coin_address => '1P1JqozxioQwaqPwgMAQdNDYNyaVSqgARq',
        //         is_bitcoin_cash => false
        //     }
        //
        $address = $this->safe_string($depositAddress, 'coin_address');
        return array(
            'info' => $depositAddress,
            'currency' => $this->safe_currency_code(null, $currency),
            'address' => $address,
            'tag' => null,
            'network' => null,
        );
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $swap = $market['swap'];
        if ($limit === null) {
            $limit = 100;
        }
        $request = array(
            'market' => $market['id'], // SPOT and SWAP
            'limit' => $limit, // SPOT and SWAP
            'offset' => 0, // SWAP, means query from a certain record
            // 'page' => 1, // SPOT
            // 'side' => 2, // SWAP, 0 for no $limit, 1 for sell, 2 for buy
            // 'start_time' => $since, // SWAP
            // 'end_time' => 1524228297, // SWAP
        );
        $method = null;
        if ($swap) {
            $method = 'perpetualPublicGetMarketUserDeals';
            $side = $this->safe_integer($params, 'side');
            if ($side === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $side parameter for $swap markets');
            }
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            $request['side'] = $side;
            $params = $this->omit($params, 'side');
        } else {
            $method = 'privateGetOrderUserDeals';
            $request['page'] = 1;
        }
        $accountId = $this->safe_integer($params, 'account_id');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        if ($defaultType === 'margin') {
            if ($accountId === null) {
                throw new BadRequest($this->id . ' fetchMyTrades() requires an account_id parameter for margin trades');
            }
            $request['account_id'] = $accountId;
            $params = $this->omit($params, 'account_id');
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Spot and Margin
        //
        //      {
        //          "code" => 0,
        //          "data" => array(
        //              "data" => array(
        //                  array(
        //                      "id" => 2611520950,
        //                      "order_id" => 63286573298,
        //                      "account_id" => 0,
        //                      "create_time" => 1638990636,
        //                      "type" => "sell",
        //                      "role" => "taker",
        //                      "price" => "192.29",
        //                      "amount" => "0.098",
        //                      "fee" => "0.03768884",
        //                      "fee_asset" => "USDT",
        //                      "market" => "AAVEUSDT",
        //                      "deal_money" => "18.84442"
        //                          ),
        //                      ),
        //              "curr_page" => 1,
        //              "has_next" => false,
        //              "count" => 3
        //              ),
        //          "message" => "Success"
        //      }
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "limit" => 100,
        //             "offset" => 0,
        //             "records" => array(
        //                 array(
        //                     "amount" => "0.0012",
        //                     "deal_fee" => "0.0237528",
        //                     "deal_insurance" => "0",
        //                     "deal_margin" => "15.8352",
        //                     "deal_order_id" => 17797031903,
        //                     "deal_profit" => "0",
        //                     "deal_stock" => "47.5056",
        //                     "deal_type" => 1,
        //                     "deal_user_id" => 2969195,
        //                     "fee_asset" => "",
        //                     "fee_discount" => "0",
        //                     "fee_price" => "0",
        //                     "fee_rate" => "0.0005",
        //                     "fee_real_rate" => "0.0005",
        //                     "id" => 379044296,
        //                     "leverage" => "3",
        //                     "margin_amount" => "15.8352",
        //                     "market" => "BTCUSDT",
        //                     "open_price" => "39588",
        //                     "order_id" => 17797092987,
        //                     "position_amount" => "0.0012",
        //                     "position_id" => 62052321,
        //                     "position_type" => 1,
        //                     "price" => "39588",
        //                     "role" => 2,
        //                     "side" => 2,
        //                     "time" => 1650675936.016103,
        //                     "user_id" => 3620173
        //                 }
        //             )
        //         ),
        //         "message" => "OK"
        //     }
        //
        $tradeRequest = $swap ? 'records' : 'data';
        $data = $this->safe_value($response, 'data');
        $trades = $this->safe_value($data, $tradeRequest, array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $market = null;
        if ($symbols !== null) {
            $symbol = null;
            if (gettype($symbols) === 'array' && count(array_filter(array_keys($symbols), 'is_string')) == 0) {
                $symbolsLength = is_array($symbols) ? count($symbols) : 0;
                if ($symbolsLength > 1) {
                    throw new BadRequest($this->id . ' fetchPositions() $symbols argument cannot contain more than 1 symbol');
                }
                $symbol = $symbols[0];
            } else {
                $symbol = $symbols;
            }
            $market = $this->market($symbol);
            $request['market'] = $market['id'];
        }
        $response = yield $this->perpetualPrivateGetPositionPending (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             array(
        //                 "adl_sort" => 3396,
        //                 "adl_sort_val" => "0.00007786",
        //                 "amount" => "0.0005",
        //                 "amount_max" => "0.0005",
        //                 "amount_max_margin" => "6.42101333333333333333",
        //                 "bkr_price" => "25684.05333333333333346175",
        //                 "bkr_price_imply" => "0.00000000000000000000",
        //                 "close_left" => "0.0005",
        //                 "create_time" => 1651294226.110899,
        //                 "deal_all" => "19.26000000000000000000",
        //                 "deal_asset_fee" => "0.00000000000000000000",
        //                 "fee_asset" => "",
        //                 "finish_type" => 1,
        //                 "first_price" => "38526.08",
        //                 "insurance" => "0.00000000000000000000",
        //                 "latest_price" => "38526.08",
        //                 "leverage" => "3",
        //                 "liq_amount" => "0.00000000000000000000",
        //                 "liq_order_price" => "0",
        //                 "liq_order_time" => 0,
        //                 "liq_price" => "25876.68373333333333346175",
        //                 "liq_price_imply" => "0.00000000000000000000",
        //                 "liq_profit" => "0.00000000000000000000",
        //                 "liq_time" => 0,
        //                 "mainten_margin" => "0.005",
        //                 "mainten_margin_amount" => "0.09631520000000000000",
        //                 "maker_fee" => "0.00000000000000000000",
        //                 "margin_amount" => "6.42101333333333333333",
        //                 "market" => "BTCUSDT",
        //                 "open_margin" => "0.33333333333333333333",
        //                 "open_margin_imply" => "0.00000000000000000000",
        //                 "open_price" => "38526.08000000000000000000",
        //                 "open_val" => "19.26304000000000000000",
        //                 "open_val_max" => "19.26304000000000000000",
        //                 "position_id" => 65847227,
        //                 "profit_clearing" => "-0.00963152000000000000",
        //                 "profit_real" => "-0.00963152000000000000",
        //                 "profit_unreal" => "0.00",
        //                 "side" => 2,
        //                 "stop_loss_price" => "0.00000000000000000000",
        //                 "stop_loss_type" => 0,
        //                 "sys" => 0,
        //                 "take_profit_price" => "0.00000000000000000000",
        //                 "take_profit_type" => 0,
        //                 "taker_fee" => "0.00000000000000000000",
        //                 "total" => 4661,
        //                 "type" => 1,
        //                 "update_time" => 1651294226.111196,
        //                 "user_id" => 3620173
        //             ),
        //         ),
        //         "message" => "OK"
        //     }
        //
        $position = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($position); $i++) {
            $result[] = $this->parse_position($position[$i], $market);
        }
        return $this->filter_by_array($result, 'symbol', $symbols, false);
    }

    public function fetch_position($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        $response = yield $this->perpetualPrivateGetPositionPending (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             {
        //                 "adl_sort" => 3396,
        //                 "adl_sort_val" => "0.00007786",
        //                 "amount" => "0.0005",
        //                 "amount_max" => "0.0005",
        //                 "amount_max_margin" => "6.42101333333333333333",
        //                 "bkr_price" => "25684.05333333333333346175",
        //                 "bkr_price_imply" => "0.00000000000000000000",
        //                 "close_left" => "0.0005",
        //                 "create_time" => 1651294226.110899,
        //                 "deal_all" => "19.26000000000000000000",
        //                 "deal_asset_fee" => "0.00000000000000000000",
        //                 "fee_asset" => "",
        //                 "finish_type" => 1,
        //                 "first_price" => "38526.08",
        //                 "insurance" => "0.00000000000000000000",
        //                 "latest_price" => "38526.08",
        //                 "leverage" => "3",
        //                 "liq_amount" => "0.00000000000000000000",
        //                 "liq_order_price" => "0",
        //                 "liq_order_time" => 0,
        //                 "liq_price" => "25876.68373333333333346175",
        //                 "liq_price_imply" => "0.00000000000000000000",
        //                 "liq_profit" => "0.00000000000000000000",
        //                 "liq_time" => 0,
        //                 "mainten_margin" => "0.005",
        //                 "mainten_margin_amount" => "0.09631520000000000000",
        //                 "maker_fee" => "0.00000000000000000000",
        //                 "margin_amount" => "6.42101333333333333333",
        //                 "market" => "BTCUSDT",
        //                 "open_margin" => "0.33333333333333333333",
        //                 "open_margin_imply" => "0.00000000000000000000",
        //                 "open_price" => "38526.08000000000000000000",
        //                 "open_val" => "19.26304000000000000000",
        //                 "open_val_max" => "19.26304000000000000000",
        //                 "position_id" => 65847227,
        //                 "profit_clearing" => "-0.00963152000000000000",
        //                 "profit_real" => "-0.00963152000000000000",
        //                 "profit_unreal" => "0.00",
        //                 "side" => 2,
        //                 "stop_loss_price" => "0.00000000000000000000",
        //                 "stop_loss_type" => 0,
        //                 "sys" => 0,
        //                 "take_profit_price" => "0.00000000000000000000",
        //                 "take_profit_type" => 0,
        //                 "taker_fee" => "0.00000000000000000000",
        //                 "total" => 4661,
        //                 "type" => 1,
        //                 "update_time" => 1651294226.111196,
        //                 "user_id" => 3620173
        //             }
        //         ),
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_position($data[0], $market);
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //         "adl_sort" => 3396,
        //         "adl_sort_val" => "0.00007786",
        //         "amount" => "0.0005",
        //         "amount_max" => "0.0005",
        //         "amount_max_margin" => "6.42101333333333333333",
        //         "bkr_price" => "25684.05333333333333346175",
        //         "bkr_price_imply" => "0.00000000000000000000",
        //         "close_left" => "0.0005",
        //         "create_time" => 1651294226.110899,
        //         "deal_all" => "19.26000000000000000000",
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "fee_asset" => "",
        //         "finish_type" => 1,
        //         "first_price" => "38526.08",
        //         "insurance" => "0.00000000000000000000",
        //         "latest_price" => "38526.08",
        //         "leverage" => "3",
        //         "liq_amount" => "0.00000000000000000000",
        //         "liq_order_price" => "0",
        //         "liq_order_time" => 0,
        //         "liq_price" => "25876.68373333333333346175",
        //         "liq_price_imply" => "0.00000000000000000000",
        //         "liq_profit" => "0.00000000000000000000",
        //         "liq_time" => 0,
        //         "mainten_margin" => "0.005",
        //         "mainten_margin_amount" => "0.09631520000000000000",
        //         "maker_fee" => "0.00000000000000000000",
        //         "margin_amount" => "6.42101333333333333333",
        //         "market" => "BTCUSDT",
        //         "open_margin" => "0.33333333333333333333",
        //         "open_margin_imply" => "0.00000000000000000000",
        //         "open_price" => "38526.08000000000000000000",
        //         "open_val" => "19.26304000000000000000",
        //         "open_val_max" => "19.26304000000000000000",
        //         "position_id" => 65847227,
        //         "profit_clearing" => "-0.00963152000000000000",
        //         "profit_real" => "-0.00963152000000000000",
        //         "profit_unreal" => "0.00",
        //         "side" => 2,
        //         "stop_loss_price" => "0.00000000000000000000",
        //         "stop_loss_type" => 0,
        //         "sys" => 0,
        //         "take_profit_price" => "0.00000000000000000000",
        //         "take_profit_type" => 0,
        //         "taker_fee" => "0.00000000000000000000",
        //         "total" => 4661,
        //         "type" => 1,
        //         "update_time" => 1651294226.111196,
        //         "user_id" => 3620173
        //     }
        //
        $marketId = $this->safe_string($position, 'market');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $positionId = $this->safe_integer($position, 'position_id');
        $marginModeInteger = $this->safe_integer($position, 'type');
        $marginMode = ($marginModeInteger === 1) ? 'isolated' : 'cross';
        $liquidationPrice = $this->safe_string($position, 'liq_price');
        $entryPrice = $this->safe_string($position, 'open_price');
        $unrealizedPnl = $this->safe_string($position, 'profit_unreal');
        $contractSize = $this->safe_string($position, 'amount');
        $sideInteger = $this->safe_integer($position, 'side');
        $side = ($sideInteger === 1) ? 'short' : 'long';
        $timestamp = $this->safe_timestamp($position, 'update_time');
        $maintenanceMargin = $this->safe_string($position, 'mainten_margin_amount');
        $maintenanceMarginPercentage = $this->safe_string($position, 'mainten_margin');
        $collateral = $this->safe_string($position, 'margin_amount');
        $leverage = $this->safe_number($position, 'leverage');
        return array(
            'info' => $position,
            'id' => $positionId,
            'symbol' => $symbol,
            'notional' => null,
            'marginMode' => $marginMode,
            'marginType' => $marginMode, // deprecated
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $entryPrice,
            'unrealizedPnl' => $unrealizedPnl,
            'percentage' => null,
            'contracts' => null,
            'contractSize' => $contractSize,
            'markPrice' => null,
            'side' => $side,
            'hedged' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'maintenanceMargin' => $maintenanceMargin,
            'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            'collateral' => $collateral,
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'leverage' => $leverage,
            'marginRatio' => null,
        );
    }

    public function set_margin_mode($marginMode, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
        }
        $marginMode = strtolower($marginMode);
        if ($marginMode !== 'isolated' && $marginMode !== 'cross') {
            throw new BadRequest($this->id . ' setMarginMode() $marginMode argument should be isolated or cross');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        if ($market['type'] !== 'swap') {
            throw new BadSymbol($this->id . ' setMarginMode() supports swap contracts only');
        }
        $defaultMarginMode = $this->safe_string_2($this->options, 'defaultMarginMode', $marginMode);
        $defaultPositionType = null;
        if ($defaultMarginMode === 'isolated') {
            $defaultPositionType = 1;
        } elseif ($defaultMarginMode === 'cross') {
            $defaultPositionType = 2;
        }
        $leverage = $this->safe_integer($params, 'leverage');
        $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
        $positionType = $this->safe_integer($params, 'position_type', $defaultPositionType);
        if ($leverage === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $leverage parameter');
        }
        if ($positionType === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a position_type parameter that will transfer margin to the specified trading pair');
        }
        if (($leverage < 3) || ($leverage > $maxLeverage)) {
            throw new BadRequest($this->id . ' setMarginMode() $leverage should be between 3 and ' . (string) $maxLeverage . ' for ' . $symbol);
        }
        $request = array(
            'market' => $market['id'],
            'leverage' => (string) $leverage,
            'position_type' => $positionType, // 1 => isolated, 2 => cross
        );
        return yield $this->perpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params));
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        yield $this->load_markets();
        $defaultMarginMode = $this->safe_string_2($this->options, 'defaultMarginMode', 'marginMode');
        $defaultPositionType = null;
        if ($defaultMarginMode === 'isolated') {
            $defaultPositionType = 1;
        } elseif ($defaultMarginMode === 'cross') {
            $defaultPositionType = 2;
        }
        $positionType = $this->safe_integer($params, 'position_type', $defaultPositionType);
        if ($positionType === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a position_type parameter that will transfer margin to the specified trading pair');
        }
        $market = $this->market($symbol);
        $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
        if ($market['type'] !== 'swap') {
            throw new BadSymbol($this->id . ' setLeverage() supports swap contracts only');
        }
        if (($leverage < 3) || ($leverage > $maxLeverage)) {
            throw new BadRequest($this->id . ' setLeverage() $leverage should be between 3 and ' . (string) $maxLeverage . ' for ' . $symbol);
        }
        $request = array(
            'market' => $market['id'],
            'leverage' => (string) $leverage,
            'position_type' => $positionType, // 1 => isolated, 2 => cross
        );
        return yield $this->perpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params));
    }

    public function fetch_leverage_tiers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->perpetualPublicGetMarketLimitConfig ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "BTCUSD" => [
        //                 ["500001", "100", "0.005"],
        //                 ["1000001", "50", "0.01"],
        //                 ["2000001", "30", "0.015"],
        //                 ["5000001", "20", "0.02"],
        //                 ["10000001", "15", "0.025"],
        //                 ["20000001", "10", "0.03"]
        //             ],
        //             ...
        //         ),
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_leverage_tiers($data, $symbols, null);
    }

    public function parse_leverage_tiers($response, $symbols = null, $marketIdKey = null) {
        //
        //     {
        //         "BTCUSD" => [
        //             ["500001", "100", "0.005"],
        //             ["1000001", "50", "0.01"],
        //             ["2000001", "30", "0.015"],
        //             ["5000001", "20", "0.02"],
        //             ["10000001", "15", "0.025"],
        //             ["20000001", "10", "0.03"]
        //         ],
        //         ...
        //     }
        //
        $tiers = array();
        $marketIds = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->safe_market($marketId);
            $symbol = $this->safe_string($market, 'symbol');
            $symbolsLength = 0;
            if ($symbols !== null) {
                $symbolsLength = is_array($symbols) ? count($symbols) : 0;
            }
            if ($symbol !== null && ($symbolsLength === 0 || $this->in_array($symbols, $symbol))) {
                $tiers[$symbol] = $this->parse_market_leverage_tiers($response[$marketId], $market);
            }
        }
        return $tiers;
    }

    public function parse_market_leverage_tiers($item, $market = null) {
        $tiers = array();
        $minNotional = 0;
        for ($j = 0; $j < count($item); $j++) {
            $bracket = $item[$j];
            $maxNotional = $this->safe_number($bracket, 0);
            $tiers[] = array(
                'tier' => $j + 1,
                'currency' => $market['linear'] ? $market['base'] : $market['quote'],
                'minNotional' => $minNotional,
                'maxNotional' => $maxNotional,
                'maintenanceMarginRate' => $this->safe_number($bracket, 2),
                'maxLeverage' => $this->safe_integer($bracket, 1),
                'info' => $bracket,
            );
            $minNotional = $maxNotional;
        }
        return $tiers;
    }

    public function modify_margin_helper($symbol, $amount, $addOrReduce, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'amount' => $this->amount_to_precision($symbol, $amount),
            'type' => $addOrReduce,
        );
        $response = yield $this->perpetualPrivatePostPositionAdjustMargin (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "adl_sort" => 1,
        //             "adl_sort_val" => "0.00004320",
        //             "amount" => "0.0005",
        //             "amount_max" => "0.0005",
        //             "amount_max_margin" => "6.57352000000000000000",
        //             "bkr_price" => "16294.08000000000000011090",
        //             "bkr_price_imply" => "0.00000000000000000000",
        //             "close_left" => "0.0005",
        //             "create_time" => 1651202571.320778,
        //             "deal_all" => "19.72000000000000000000",
        //             "deal_asset_fee" => "0.00000000000000000000",
        //             "fee_asset" => "",
        //             "finish_type" => 1,
        //             "first_price" => "39441.12",
        //             "insurance" => "0.00000000000000000000",
        //             "latest_price" => "39441.12",
        //             "leverage" => "3",
        //             "liq_amount" => "0.00000000000000000000",
        //             "liq_order_price" => "0",
        //             "liq_order_time" => 0,
        //             "liq_price" => "16491.28560000000000011090",
        //             "liq_price_imply" => "0.00000000000000000000",
        //             "liq_profit" => "0.00000000000000000000",
        //             "liq_time" => 0,
        //             "mainten_margin" => "0.005",
        //             "mainten_margin_amount" => "0.09860280000000000000",
        //             "maker_fee" => "0.00000000000000000000",
        //             "margin_amount" => "11.57352000000000000000",
        //             "market" => "BTCUSDT",
        //             "open_margin" => "0.58687582908396110455",
        //             "open_margin_imply" => "0.00000000000000000000",
        //             "open_price" => "39441.12000000000000000000",
        //             "open_val" => "19.72056000000000000000",
        //             "open_val_max" => "19.72056000000000000000",
        //             "position_id" => 65171206,
        //             "profit_clearing" => "-0.00986028000000000000",
        //             "profit_real" => "-0.00986028000000000000",
        //             "profit_unreal" => "0.00",
        //             "side" => 2,
        //             "stop_loss_price" => "0.00000000000000000000",
        //             "stop_loss_type" => 0,
        //             "sys" => 0,
        //             "take_profit_price" => "0.00000000000000000000",
        //             "take_profit_type" => 0,
        //             "taker_fee" => "0.00000000000000000000",
        //             "total" => 3464,
        //             "type" => 1,
        //             "update_time" => 1651202638.911212,
        //             "user_id" => 3620173
        //         ),
        //         "message":"OK"
        //     }
        //
        $status = $this->safe_string($response, 'message');
        $type = ($addOrReduce === 1) ? 'add' : 'reduce';
        return array_merge($this->parse_margin_modification($response, $market), array(
            'amount' => $this->parse_number($amount),
            'type' => $type,
            'status' => $status,
        ));
    }

    public function parse_margin_modification($data, $market = null) {
        return array(
            'info' => $data,
            'type' => null,
            'amount' => null,
            'code' => $market['quote'],
            'symbol' => $this->safe_symbol(null, $market),
            'status' => null,
        );
    }

    public function add_margin($symbol, $amount, $params = array ()) {
        return yield $this->modify_margin_helper($symbol, $amount, 1, $params);
    }

    public function reduce_margin($symbol, $amount, $params = array ()) {
        return yield $this->modify_margin_helper($symbol, $amount, 2, $params);
    }

    public function fetch_funding_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingHistory() requires a $symbol argument');
        }
        $limit = ($limit === null) ? 100 : $limit;
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'limit' => $limit,
            // 'offset' => 0,
            // 'end_time' => 1638990636000,
            // 'windowtime' => 1638990636000,
        );
        if ($since !== null) {
            $request['start_time'] = $since;
        }
        $response = yield $this->perpetualPrivateGetPositionFunding (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "limit" => 100,
        //             "offset" => 0,
        //             "records" => array(
        //                 array(
        //                     "amount" => "0.0012",
        //                     "asset" => "USDT",
        //                     "funding" => "-0.0095688273996",
        //                     "funding_rate" => "0.00020034",
        //                     "market" => "BTCUSDT",
        //                     "position_id" => 62052321,
        //                     "price" => "39802.45",
        //                     "real_funding_rate" => "0.00020034",
        //                     "side" => 2,
        //                     "time" => 1650729623.933885,
        //                     "type" => 1,
        //                     "user_id" => 3620173,
        //                     "value" => "47.76294"
        //                 ),
        //             )
        //         ),
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $resultList = $this->safe_value($data, 'records', array());
        $result = array();
        for ($i = 0; $i < count($resultList); $i++) {
            $entry = $resultList[$i];
            $timestamp = $this->safe_timestamp($entry, 'time');
            $currencyId = $this->safe_string($entry, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $result[] = array(
                'info' => $entry,
                'symbol' => $symbol,
                'code' => $code,
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'id' => $this->safe_number($entry, 'position_id'),
                'amount' => $this->safe_number($entry, 'funding'),
            );
        }
        return $result;
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
        }
        $request = array(
            'market' => $market['id'],
        );
        $response = yield $this->perpetualPublicGetMarketTicker (array_merge($request, $params));
        //
        //     {
        //          "code" => 0,
        //         "data":
        //         {
        //             "date" => 1650678472474,
        //             "ticker" => array(
        //                 "vol" => "6090.9430",
        //                 "low" => "39180.30",
        //                 "open" => "40474.97",
        //                 "high" => "40798.01",
        //                 "last" => "39659.30",
        //                 "buy" => "39663.79",
        //                 "period" => 86400,
        //                 "funding_time" => 372,
        //                 "position_amount" => "270.1956",
        //                 "funding_rate_last" => "0.00022913",
        //                 "funding_rate_next" => "0.00013158",
        //                 "funding_rate_predict" => "0.00016552",
        //                 "insurance" => "16045554.83969682659674035672",
        //                 "sign_price" => "39652.48",
        //                 "index_price" => "39648.44250000",
        //                 "sell_total" => "22.3913",
        //                 "buy_total" => "19.4498",
        //                 "buy_amount" => "12.8942",
        //                 "sell" => "39663.80",
        //                 "sell_amount" => "0.9388"
        //             }
        //         ),
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $ticker = $this->safe_value($data, 'ticker', array());
        return $this->parse_funding_rate($ticker, $market);
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        // fetchFundingRate
        //
        //     {
        //         "vol" => "6090.9430",
        //         "low" => "39180.30",
        //         "open" => "40474.97",
        //         "high" => "40798.01",
        //         "last" => "39659.30",
        //         "buy" => "39663.79",
        //         "period" => 86400,
        //         "funding_time" => 372,
        //         "position_amount" => "270.1956",
        //         "funding_rate_last" => "0.00022913",
        //         "funding_rate_next" => "0.00013158",
        //         "funding_rate_predict" => "0.00016552",
        //         "insurance" => "16045554.83969682659674035672",
        //         "sign_price" => "39652.48",
        //         "index_price" => "39648.44250000",
        //         "sell_total" => "22.3913",
        //         "buy_total" => "19.4498",
        //         "buy_amount" => "12.8942",
        //         "sell" => "39663.80",
        //         "sell_amount" => "0.9388"
        //     }
        //
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol(null, $market),
            'markPrice' => $this->safe_string($contract, 'sign_price'),
            'indexPrice' => $this->safe_string($contract, 'index_price'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_string($contract, 'funding_rate_next'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => $this->safe_string($contract, 'funding_rate_predict'),
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_string($contract, 'funding_rate_last'),
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        yield $this->load_markets();
        $currency = $this->currency($code);
        if ($tag) {
            $address = $address . ':' . $tag;
        }
        $request = array(
            'coin_type' => $currency['id'],
            'coin_address' => $address, // must be authorized, inter-user transfer by a registered mobile phone number or an email $address is supported
            'actual_amount' => floatval($amount), // the actual $amount without fees, https://www.coinex.com/fees
            'transfer_method' => 'onchain', // onchain, local
        );
        $response = yield $this->privatePostBalanceCoinWithdraw (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "actual_amount" => "1.00000000",
        //             "amount" => "1.00000000",
        //             "coin_address" => "1KAv3pazbTk2JnQ5xTo6fpKK7p1it2RzD4",
        //             "coin_type" => "BCH",
        //             "coin_withdraw_id" => 206,
        //             "confirmations" => 0,
        //             "create_time" => 1524228297,
        //             "status" => "audit",
        //             "tx_fee" => "0",
        //             "tx_id" => ""
        //         ),
        //         "message" => "Ok"
        //     }
        //
        $transaction = $this->safe_value($response, 'data', array());
        return $this->parse_transaction($transaction, $currency);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'audit' => 'pending',
            'pass' => 'pending',
            'processing' => 'pending',
            'confirming' => 'pending',
            'not_pass' => 'failed',
            'cancel' => 'canceled',
            'finish' => 'ok',
            'fail' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_funding_rate_history($symbol = null, $since = null, $limit = 100, $params = array ()) {
        /**
         * fetches historical funding rate prices
         * @param {str|null} $symbol unified $symbol of the $market to fetch the funding rate history for
         * @param {int|null} $since $timestamp in ms of the earliest funding rate to fetch
         * @param {int|null} $limit the maximum amount of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~ to fetch
         * @param {dict} $params extra parameters specific to the coinex api endpoint
         * @return {[dict]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'limit' => $limit,
            'offset' => 0,
            // 'end_time' => 1638990636,
        );
        if ($since !== null) {
            $request['start_time'] = $since;
        }
        $response = yield $this->perpetualPublicGetMarketFundingHistory (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "offset" => 0,
        //             "limit" => 3,
        //             "records" => array(
        //                 array(
        //                     "time" => 1650672021.6230309,
        //                     "market" => "BTCUSDT",
        //                     "asset" => "USDT",
        //                     "funding_rate" => "0.00022913",
        //                     "funding_rate_real" => "0.00022913"
        //                 ),
        //             )
        //         ),
        //         "message" => "OK"
        //     }
        //
        $data = $this->safe_value($response, 'data');
        $result = $this->safe_value($data, 'records', array());
        $rates = array();
        for ($i = 0; $i < count($result); $i++) {
            $entry = $result[$i];
            $marketId = $this->safe_string($entry, 'market');
            $symbol = $this->safe_symbol($marketId);
            $timestamp = $this->safe_timestamp($entry, 'time');
            $rates[] = array(
                'info' => $entry,
                'symbol' => $symbol,
                'fundingRate' => $this->safe_string($entry, 'funding_rate'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
            );
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //     {
        //         "actual_amount" => "120.00000000",
        //         "actual_amount_display" => "120",
        //         "add_explorer" => "XXX",
        //         "amount" => "120.00000000",
        //         "amount_display" => "120",
        //         "coin_address" => "XXXXXXXX",
        //         "coin_address_display" => "XXXXXXXX",
        //         "coin_deposit_id" => 1866,
        //         "coin_type" => "USDT",
        //         "confirmations" => 0,
        //         "create_time" => 1539595701,
        //         "explorer" => "",
        //         "remark" => "",
        //         "status" => "finish",
        //         "status_display" => "finish",
        //         "transfer_method" => "local",
        //         "tx_id" => "",
        //         "tx_id_display" => "XXXXXXXXXX"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "actual_amount" => "0.10000000",
        //         "amount" => "0.10000000",
        //         "coin_address" => "15sr1VdyXQ6sVLqeJUJ1uPzLpmQtgUeBSB",
        //         "coin_type" => "BCH",
        //         "coin_withdraw_id" => 203,
        //         "confirmations" => 11,
        //         "create_time" => 1515806440,
        //         "status" => "finish",
        //         "tx_fee" => "0",
        //         "tx_id" => "896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6"
        //     }
        //
        $id = $this->safe_string_2($transaction, 'coin_withdraw_id', 'coin_deposit_id');
        $address = $this->safe_string($transaction, 'coin_address');
        $tag = $this->safe_string($transaction, 'remark'); // set but unused
        if ($tag !== null) {
            if (strlen($tag) < 1) {
                $tag = null;
            }
        }
        $txid = $this->safe_value($transaction, 'tx_id');
        if ($txid !== null) {
            if (strlen($txid) < 1) {
                $txid = null;
            }
        }
        $currencyId = $this->safe_string($transaction, 'coin_type');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_timestamp($transaction, 'create_time');
        $type = (is_array($transaction) && array_key_exists('coin_withdraw_id', $transaction)) ? 'withdraw' : 'deposit';
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $amount = $this->safe_number($transaction, 'amount');
        $feeCost = $this->safe_number($transaction, 'tx_fee');
        if ($type === 'deposit') {
            $feeCost = 0;
        }
        $fee = array(
            'cost' => $feeCost,
            'currency' => $code,
        );
        // https://github.com/ccxt/ccxt/issues/8321
        if ($amount !== null) {
            $amount = $amount - $feeCost;
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => null,
            'tagFrom' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => null,
            'fee' => $fee,
        );
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $amountToPrecision = $this->currency_to_precision($code, $amount);
        $request = array(
            'amount' => $amountToPrecision,
            'coin_type' => $currency['id'],
        );
        $method = 'privatePostContractBalanceTransfer';
        if (($fromAccount === 'spot') && ($toAccount === 'swap')) {
            $request['transfer_side'] = 'in'; // 'in' spot to swap, 'out' swap to spot
        } elseif (($fromAccount === 'swap') && ($toAccount === 'spot')) {
            $request['transfer_side'] = 'out'; // 'in' spot to swap, 'out' swap to spot
        } else {
            $accountsById = $this->safe_value($this->options, 'accountsById', array());
            $fromId = $this->safe_string($accountsById, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsById, $toAccount, $toAccount);
            // $fromAccount and $toAccount must be integers for margin transfers
            // spot is 0, use fetchBalance() to find the margin account id
            $request['from_account'] = intval($fromId);
            $request['to_account'] = intval($toId);
            $method = 'privatePostMarginTransfer';
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     array("code" => 0, "data" => null, "message" => "Success")
        //
        return array_merge($this->parse_transfer($response, $currency), array(
            'amount' => $this->parse_number($amountToPrecision),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
        ));
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            '0' => 'ok',
            'SUCCESS' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        // fetchTransfers Swap
        //
        //     array(
        //         "amount" => "10",
        //         "asset" => "USDT",
        //         "transfer_type" => "transfer_out", // from swap to spot
        //         "created_at" => 1651633422
        //     ),
        //
        // fetchTransfers Margin
        //
        //     array(
        //         "id" => 7580062,
        //         "updated_at" => 1653684379,
        //         "user_id" => 3620173,
        //         "from_account_id" => 0,
        //         "to_account_id" => 1,
        //         "asset" => "BTC",
        //         "amount" => "0.00160829",
        //         "balance" => "0.00160829",
        //         "transfer_type" => "IN",
        //         "status" => "SUCCESS",
        //         "created_at" => 1653684379
        //     ),
        //
        $timestamp = $this->safe_timestamp($transfer, 'created_at');
        $transferType = $this->safe_string($transfer, 'transfer_type');
        $fromAccount = null;
        $toAccount = null;
        if ($transferType === 'transfer_out') {
            $fromAccount = 'swap';
            $toAccount = 'spot';
        } elseif ($transferType === 'transfer_in') {
            $fromAccount = 'spot';
            $toAccount = 'swap';
        } elseif ($transferType === 'IN') {
            $fromAccount = 'spot';
            $toAccount = 'margin';
        } elseif ($transferType === 'OUT') {
            $fromAccount = 'margin';
            $toAccount = 'spot';
        }
        $currencyId = $this->safe_string($transfer, 'asset');
        $currencyCode = $this->safe_currency_code($currencyId, $currency);
        return array(
            'id' => $this->safe_integer($transfer, 'id'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $currencyCode,
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $this->parse_transfer_status($this->safe_string_2($transfer, 'code', 'status')),
        );
    }

    public function fetch_transfers($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $currency = null;
        $request = array(
            'page' => 1,
            'limit' => $limit,
            // 'asset' => 'USDT',
            // 'start_time' => $since,
            // 'end_time' => 1515806440,
            // 'transfer_type' => 'transfer_in', // transfer_in => from Spot to Swap Account, transfer_out => from Swap to Spot Account
        );
        $page = $this->safe_integer($params, 'page');
        if ($page !== null) {
            $request['page'] = $page;
        }
        if ($code !== null) {
            $currency = $this->safe_currency_code($code);
            $request['asset'] = $currency['id'];
        }
        if ($since !== null) {
            $request['start_time'] = $since;
        }
        $params = $this->omit($params, 'page');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $method = ($defaultType === 'margin') ? 'privateGetMarginTransferHistory' : 'privateGetContractTransferHistory';
        $response = yield $this->$method (array_merge($request, $params));
        //
        // Swap
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "records" => array(
        //                 array(
        //                     "amount" => "10",
        //                     "asset" => "USDT",
        //                     "transfer_type" => "transfer_out",
        //                     "created_at" => 1651633422
        //                 ),
        //             ),
        //             "total" => 5
        //         ),
        //         "message" => "Success"
        //     }
        //
        // Margin
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "records" => array(
        //                 array(
        //                     "id" => 7580062,
        //                     "updated_at" => 1653684379,
        //                     "user_id" => 3620173,
        //                     "from_account_id" => 0,
        //                     "to_account_id" => 1,
        //                     "asset" => "BTC",
        //                     "amount" => "0.00160829",
        //                     "balance" => "0.00160829",
        //                     "transfer_type" => "IN",
        //                     "status" => "SUCCESS",
        //                     "created_at" => 1653684379
        //                 }
        //             ),
        //             "total" => 1
        //         ),
        //         "message" => "Success"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $transfers = $this->safe_value($data, 'records', array());
        return $this->parse_transfers($transfers, $currency, $since, $limit);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchWithdrawals() requires a $currency $code argument');
        }
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin_type' => $currency['id'],
        );
        if ($limit !== null) {
            $request['Limit'] = $limit;
        }
        $response = yield $this->privateGetBalanceCoinWithdraw (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             "has_next" => true,
        //             "curr_page" => 1,
        //             "count" => 10,
        //             "data" => array(
        //                 array(
        //                     "coin_withdraw_id" => 203,
        //                     "create_time" => 1513933541,
        //                     "actual_amount" => "0.00100000",
        //                     "actual_amount_display" => "***",
        //                     "amount" => "0.00100000",
        //                     "amount_display" => "******",
        //                     "coin_address" => "1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF",
        //                     "app_coin_address_display" => "**********",
        //                     "coin_address_display" => "****************",
        //                     "add_explorer" => "https://explorer.viawallet.com/btc/address/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF",
        //                     "coin_type" => "BTC",
        //                     "confirmations" => 6,
        //                     "explorer" => "https://explorer.viawallet.com/btc/tx/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF",
        //                     "fee" => "0",
        //                     "remark" => "",
        //                     "smart_contract_name" => "BTC",
        //                     "status" => "finish",
        //                     "status_display" => "finish",
        //                     "transfer_method" => "onchain",
        //                     "tx_fee" => "0",
        //                     "tx_id" => "896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6"
        //                 ), /* many more $data points */
        //             ),
        //             "total" => ***,
        //             "total_page":***
        //         ),
        //         "message" => "Success"
        //     }
        //
        $data = $this->safe_value($response, 'data');
        if (gettype($data) === 'array' && count(array_filter(array_keys($data), 'is_string')) != 0) {
            $data = $this->safe_value($data, 'data', array());
        }
        return $this->parse_transactions($data, $currency, $since, $limit);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits() requires a $currency $code argument');
        }
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin_type' => $currency['id'],
        );
        if ($limit !== null) {
            $request['Limit'] = $limit;
        }
        $response = yield $this->privateGetBalanceCoinDeposit (array_merge($request, $params));
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             {
        //                 "actual_amount" => "4.65397682",
        //                 "actual_amount_display" => "4.65397682",
        //                 "add_explorer" => "https://etherscan.io/address/0x361XXXXXX",
        //                 "amount" => "4.65397682",
        //                 "amount_display" => "4.65397682",
        //                 "coin_address" => "0x36dabcdXXXXXX",
        //                 "coin_address_display" => "0x361X*****XXXXX",
        //                 "coin_deposit_id" => 966191,
        //                 "coin_type" => "ETH",
        //                 "confirmations" => 30,
        //                 "create_time" => 1531661445,
        //                 "explorer" => "https://etherscan.io/tx/0x361XXXXXX",
        //                 "remark" => "",
        //                 "status" => "finish",
        //                 "status_display" => "finish",
        //                 "transfer_method" => "onchain",
        //                 "tx_id" => "0x361XXXXXX",
        //                 "tx_id_display" => "0x361XXXXXX"
        //             }
        //         ),
        //         "message" => "Ok"
        //     }
        //
        $data = $this->safe_value($response, 'data');
        if (gettype($data) === 'array' && count(array_filter(array_keys($data), 'is_string')) != 0) {
            $data = $this->safe_value($data, 'data', array());
        }
        return $this->parse_transactions($data, $currency, $since, $limit);
    }

    public function parse_borrow_rate($info, $currency = null) {
        //
        //     {
        //         "market" => "BTCUSDT",
        //         "leverage" => 10,
        //         "BTC" => array(
        //             "min_amount" => "0.002",
        //             "max_amount" => "200",
        //             "day_rate" => "0.001"
        //         ),
        //         "USDT" => array(
        //             "min_amount" => "60",
        //             "max_amount" => "5000000",
        //             "day_rate" => "0.001"
        //         }
        //     ),
        //
        $timestamp = $this->milliseconds();
        $baseCurrencyData = $this->safe_value($info, $currency, array());
        return array(
            'currency' => $this->safe_currency_code($currency),
            'rate' => $this->safe_number($baseCurrencyData, 'day_rate'),
            'period' => 86400000,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function fetch_borrow_rate($code, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        if (is_array($this->markets) && array_key_exists($code, $this->markets)) {
            $market = $this->market($code);
        } else {
            $defaultSettle = $this->safe_string($this->options, 'defaultSettle', 'USDT');
            $market = $this->market($code . '/' . $defaultSettle);
        }
        $request = array(
            'market' => $market['id'],
        );
        $response = yield $this->privateGetMarginConfig (array_merge($request, $params));
        //
        //     {
        //         "code" => 0,
        //         "data" => {
        //             "market" => "BTCUSDT",
        //             "leverage" => 10,
        //             "BTC" => array(
        //                 "min_amount" => "0.002",
        //                 "max_amount" => "200",
        //                 "day_rate" => "0.001"
        //             ),
        //             "USDT" => array(
        //                 "min_amount" => "60",
        //                 "max_amount" => "5000000",
        //                 "day_rate" => "0.001"
        //             }
        //         ),
        //         "message" => "Success"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_borrow_rate($data, $market['base']);
    }

    public function fetch_borrow_rates($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateGetMarginConfig ($params);
        //
        //     {
        //         "code" => 0,
        //         "data" => array(
        //             {
        //                 "market" => "BTCUSDT",
        //                 "leverage" => 10,
        //                 "BTC" => array(
        //                     "min_amount" => "0.002",
        //                     "max_amount" => "200",
        //                     "day_rate" => "0.001"
        //                 ),
        //                 "USDT" => array(
        //                     "min_amount" => "60",
        //                     "max_amount" => "5000000",
        //                     "day_rate" => "0.001"
        //                 }
        //             ),
        //         ),
        //         "message" => "Success"
        //     }
        //
        $timestamp = $this->milliseconds();
        $data = $this->safe_value($response, 'data', array());
        $rates = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $symbol = $this->safe_string($entry, 'market');
            $market = $this->safe_market($symbol);
            $currencyData = $this->safe_value($entry, $market['base']);
            $rates[] = array(
                'currency' => $market['base'],
                'rate' => $this->safe_number($currencyData, 'day_rate'),
                'period' => 86400000,
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'info' => $entry,
            );
        }
        return $rates;
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $path = $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . '/' . $this->version . '/' . $path;
        $query = $this->omit($params, $this->extract_params($path));
        $this->check_required_credentials();
        $nonce = (string) $this->nonce();
        if ($api === 'perpetualPrivate' || $url === 'https://api->coinex.com/perpetual/v1/market/user_deals') {
            $query = array_merge(array(
                'access_id' => $this->apiKey,
                'timestamp' => $nonce,
            ), $query);
            $query = $this->keysort($query);
            $urlencoded = $this->rawencode($query);
            $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret), 'sha256');
            $headers = array(
                'Authorization' => strtolower($signature),
                'AccessId' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'PUT')) {
                $url .= '?' . $urlencoded;
            } else {
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
                $body = $urlencoded;
            }
        } elseif ($api === 'public' || $api === 'perpetualPublic') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $query = array_merge(array(
                'access_id' => $this->apiKey,
                'tonce' => $nonce,
            ), $query);
            $query = $this->keysort($query);
            $urlencoded = $this->rawencode($query);
            $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret));
            $headers = array(
                'Authorization' => strtoupper($signature),
                'Content-Type' => 'application/json',
            );
            if (($method === 'GET') || ($method === 'DELETE') || ($method === 'PUT')) {
                $url .= '?' . $urlencoded;
            } else {
                $body = $this->json($query);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        $code = $this->safe_string($response, 'code');
        $data = $this->safe_value($response, 'data');
        $message = $this->safe_string($response, 'message');
        if (($code !== '0') || (($message !== 'Success') && ($message !== 'Succeeded') && ($message !== 'Ok') && !$data)) {
            $responseCodes = array(
                // https://github.com/coinexcom/coinex_exchange_api/wiki/013error_code
                '23' => '\\ccxt\\PermissionDenied', // IP Prohibited
                '24' => '\\ccxt\\AuthenticationError',
                '25' => '\\ccxt\\AuthenticationError',
                '34' => '\\ccxt\\AuthenticationError', // Access id is expires
                '35' => '\\ccxt\\ExchangeNotAvailable', // Service unavailable
                '36' => '\\ccxt\\RequestTimeout', // Service timeout
                '107' => '\\ccxt\\InsufficientFunds',
                '600' => '\\ccxt\\OrderNotFound',
                '601' => '\\ccxt\\InvalidOrder',
                '602' => '\\ccxt\\InvalidOrder',
                '606' => '\\ccxt\\InvalidOrder',
            );
            $ErrorClass = $this->safe_value($responseCodes, $code, '\\ccxt\\ExchangeError');
            throw new $ErrorClass($response['message']);
        }
    }
}
